(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var assert = require('assert');
        var path = require('path');
        var proxyquire = require('proxyquire');
        var babelResolve = require('babel-resolve');
        var resolver = babelResolve.create('#', path.join(__dirname, '../../../../', './src/app/_local_modules'));
        var createMockLogger = require(2);
        const mapKeys = resolver.mapKeys.bind(resolver);

        function stubImport(modulePath, stubs) {
            let {
                noCallThru = true
            } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            assert.strictEqual(typeof modulePath, 'string', 'modulePath must be a string');
            assert.strictEqual(typeof stubs, 'object', 'stubs must be an object');
            var parentPath = path.dirname(module.parent.filename);
            var modPath = path.join(parentPath, modulePath);
            stubs['#logger'] = createMockLogger;
            if (noCallThru) {
                Object.keys(stubs).forEach(function(modKey) {
                    stubs[modKey]['@noCallThru'] = true;
                });
            }
            stubs = mapKeys(stubs);
            return proxyquire(modPath, stubs);
        }
        exports.default = {
            mapKeys,
            resolver,
            stubImport
        };

    }, {
        "2": 2,
        "undefined": undefined
    }],
    2: [function(require, module, exports) {
        "use strict";
        module.exports = function createMockLogger() {
            return {
                info: () => {},
                error: () => {},
                debug: () => {},
                warn: () => {},
                trace: () => {}
            };
        };

    }, {}],
    3: [function(require, module, exports) {
        "use strict";

        function includes(item) {
            return this.indexOf(item) >= 0;
        }
        module.exports = {
            includes
        };

    }, {}],
    4: [function(require, module, exports) {
        'use strict';
        var array = require(3);
        var object = require(5);
        var string = require(6);
        Object.keys(array).forEach(key => {
            if (Array.prototype[key]) return;
            Object.defineProperty(Array.prototype, key, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: array[key]
            });
        });
        Object.keys(object).forEach(key => {
            if (Object.prototype[key]) return;
            Object.defineProperty(Object.prototype, key, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: object[key]
            });
        });
        Object.keys(string).forEach(key => {
            if (String.prototype[key]) return;
            Object.defineProperty(String.prototype, key, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: string[key]
            });
        });

    }, {
        "3": 3,
        "5": 5,
        "6": 6
    }],
    5: [function(require, module, exports) {
        "use strict";

        function values(obj) {
            return Object.keys(obj).map(key => {
                return obj[key];
            });
        }
        module.exports = {
            values
        };

    }, {}],
    6: [function(require, module, exports) {
        'use strict';

        function padStart(targetLength, padString) {
            targetLength = targetLength >> 0;
            padString = String(padString || ' ');
            if (this.length > targetLength) {
                return String(this);
            } else {
                targetLength = targetLength - this.length;
                if (targetLength > padString.length) {
                    padString += padString.repeat(targetLength / padString.length);
                }
                return padString.slice(0, targetLength) + String(this);
            }
        }
        module.exports = {
            padStart
        };

    }, {}],
    7: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.tether = exports.ripple = exports.factom = exports.ethereumclassic = exports.ethereum = undefined;
        var _aureus = require(192);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function createAccountState(coin) {
            const defaults = {
                balance: coin.currency.ZERO,
                startblock: 0
            };
            return {
                parse(data) {
                    let {
                        balance,
                        startblock
                    } = Object.assign({}, defaults, data);
                    if (!(0, _aureus.isNumberUnit)(balance) && typeof balance === 'string') {
                        balance = coin.currency.parse(balance);
                    }
                    return {
                        balance,
                        startblock
                    };
                },
                serialize(data) {
                    return Object.assign({}, data, {
                        balance: data.balance.toString()
                    });
                },
                runWithLock: (0, _makeConcurrent2.default)(fn => fn(), {
                    concurrency: 1
                })
            };
        }

        function createEthereumLikeAccountState(asset) {
            const AccountBase = createAccountState(asset);
            const defaults = {
                nonce: 0
            };

            function parse(data) {
                const {
                    nonce
                } = Object.assign({}, defaults, data);
                return Object.assign({}, AccountBase.parse(data), {
                    nonce
                });
            }
            return Object.assign({}, AccountBase, {
                parse
            });
        }

        function createRippleAccountState(asset) {
            const AccountBase = createAccountState(asset);
            const defaults = {
                sequence: 1
            };

            function parse(data) {
                const {
                    sequence
                } = Object.assign({}, defaults, data);
                return Object.assign({}, AccountBase.parse(data), {
                    sequence
                });
            }
            return Object.assign({}, AccountBase, {
                parse
            });
        }
        const ethereum = exports.ethereum = createEthereumLikeAccountState(_assets2.default.ethereum);
        const ethereumclassic = exports.ethereumclassic = createEthereumLikeAccountState(_assets2.default.ethereumclassic);
        const factom = exports.factom = createAccountState(_assets2.default.factom);
        const ripple = exports.ripple = createRippleAccountState(_assets2.default.ripple);
        const tether = exports.tether = createAccountState(_assets2.default.tether);

    }, {
        "184": 184,
        "192": 192,
        "undefined": undefined
    }],
    8: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createFromHDKey = createFromHDKey;
        var _bip = require(200);
        var _bip2 = _interopRequireDefault(_bip);
        var _util = require(9);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function createFromHDKey(asset, hdkey, pairingData) {
            return function* addressGenerator(chainIndex) {
                let {
                    i = 0, limit = Infinity
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const createAddr = n => (0, _util.addressFromChainParams)(asset, hdkey, pairingData, chainIndex, n);
                const start = i;
                for (i; i < start + limit; ++i) {
                    yield createAddr(i);
                }
            };
        }

    }, {
        "200": 200,
        "9": 9
    }],
    9: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.addressFromChainParams = addressFromChainParams;
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _bip = require(200);
        var _bip2 = _interopRequireDefault(_bip);
        var _util = require(10);
        var _withTokens = require(316);
        var _withTokens2 = _interopRequireDefault(_withTokens);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const _cache = new Map();

        function addressFromChainParams(assetName, hdkey, pairingData, chainIndex, addressIndex) {
            if (!pairingData) {
                return (0, _util.addressFromChainParams)(hdkey, chainIndex, addressIndex);
            }
            const path = `m/${chainIndex}/${addressIndex}`;
            let addr = getCache(hdkey, pairingData, path);
            if (addr) return addr;
            const asset = _withTokens2.default[assetName];
            let publicKey;
            if (pairingData.combinedPublicKey && asset.twoOfTwo.type === 'ecdsa-threshold') {
                publicKey = pairingData.combinedPublicKey;
            } else {
                publicKey = asset.twoOfTwo.publicKeys.generate(hdkey._hdkey, pairingData, path);
            }
            const addressString = asset.twoOfTwo.publicKeys.encode(publicKey);
            addr = _address2.default.create(addressString, {
                path
            });
            setCache(hdkey, pairingData, path, addr);
            return addr;
        }

        function getCache(hdkey, pairingData, path) {
            return mapLookup(hdkey, pairingData).get(path);
        }

        function setCache(hdkey, pairingData, path, addr) {
            mapLookup(hdkey, pairingData).set(path, addr);
        }

        function mapLookup(hdkey, pairingData) {
            let keyMap = _cache.get(hdkey);
            if (!keyMap) {
                keyMap = new Map();
                _cache.set(hdkey, keyMap);
            }
            let addrMap = keyMap.get(pairingData);
            if (!addrMap) {
                addrMap = new Map();
                keyMap.set(pairingData, addrMap);
            }
            return addrMap;
        }

    }, {
        "10": 10,
        "200": 200,
        "316": 316,
        "82": 82
    }],
    10: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.addressFromChainParams = addressFromChainParams;
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _bip = require(200);
        var _bip2 = _interopRequireDefault(_bip);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const _cache = new Map();
        const _addressStringFromPath = (hdkey, path) => hdkey.derive(path, 'tag', {
            spendable: true
        }).publicEncoded;

        function addressFromChainParams(accountHDKey, chainIndex, addressIndex) {
            const path = `m/${chainIndex}/${addressIndex}`;
            let addr = getCache(accountHDKey, path);
            if (addr) return addr;
            addr = _address2.default.create(_addressStringFromPath(accountHDKey, path), {
                path
            });
            setCache(accountHDKey, path, addr);
            return addr;
        }

        function getCache(accountHDKey, path) {
            return mapLookup(accountHDKey).get(path);
        }

        function setCache(accountHDKey, path, addr) {
            mapLookup(accountHDKey).set(path, addr);
        }

        function mapLookup(accountHDKey) {
            let keyMap = _cache.get(accountHDKey);
            if (!keyMap) {
                keyMap = new Map();
                _cache.set(accountHDKey, keyMap);
            }
            return keyMap;
        }

    }, {
        "200": 200,
        "82": 82
    }],
    11: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.tether = exports.ripple = exports.factom = exports.ethereumclassic = exports.ethereum = undefined;
        var _accountState = require(7);
        var AccountState = _interopRequireWildcard(_accountState);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function createActions(coin) {
            function load() {
                return (0, _reduxAsyncAction2.default)(`ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD`, (() => {
                    var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                        let {
                            success
                        } = _ref;
                        const accountKey = walletKeys.accountStateMutations(coin.name);
                        const accountData = yield _instanceShim2.default.current.fetchKeyData(accountKey);
                        success(AccountState[coin.name].parse(accountData));
                    });
                    return function(_x, _x2, _x3) {
                        return _ref2.apply(this, arguments);
                    };
                })());
            }

            function update(newData) {
                return (0, _reduxAsyncAction2.default)(`ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE`, (() => {
                    var _ref4 = _asyncToGenerator(function*(dispatch, getState, _ref3) {
                        let {
                            success
                        } = _ref3;
                        const accountKey = walletKeys.accountStateMutations(coin.name);
                        const accountData = yield _instanceShim2.default.current.fetchKeyData(accountKey);
                        const newState = AccountState[coin.name].parse(Object.assign({}, accountData, newData));
                        const newAccountData = AccountState[coin.name].serialize(newState);
                        yield _instanceShim2.default.current.updateKeyData(accountKey, newAccountData);
                        success(newState);
                    });
                    return function(_x4, _x5, _x6) {
                        return _ref4.apply(this, arguments);
                    };
                })());
            }
            return {
                load,
                update
            };
        }
        const ethereum = exports.ethereum = createActions(_assets2.default.ethereum);
        const ethereumclassic = exports.ethereumclassic = createActions(_assets2.default.ethereumclassic);
        const factom = exports.factom = createActions(_assets2.default.factom);
        const ripple = exports.ripple = createActions(_assets2.default.ripple);
        const tether = exports.tether = createActions(_assets2.default.tether);

    }, {
        "167": 167,
        "168": 168,
        "184": 184,
        "288": 288,
        "7": 7
    }],
    12: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.load = load;
        exports.setHDKeyFromXPub = setHDKeyFromXPub;
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _bip = require(200);
        var _bip2 = _interopRequireDefault(_bip);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _util = require(264);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function load() {
            return (0, _reduxAsyncAction2.default)('ACCOUNTS_LOAD', {}, (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                    let {
                        success
                    } = _ref;
                    const data = yield Promise.all(Object.values(_assets2.default).map((() => {
                        var _ref3 = _asyncToGenerator(function*(asset) {
                            const uiSigned = ['factom', 'monero', 'ripple'];
                            let hdkey;
                            if (uiSigned.includes(asset.name)) {
                                const jsonHDKey = yield _instanceShim2.default.current.getHDKey(asset.name);
                                hdkey = _bip2.default.fromJSON(jsonHDKey);
                            } else {
                                const xpub = yield _instanceShim2.default.current.getXPub(asset.name);
                                hdkey = _bip2.default.fromXPub(xpub, {
                                    coin: asset.name
                                });
                            }
                            const key = walletKeys.accountStateChain(asset.name, 'account0');
                            const chainData = yield _instanceShim2.default.current.fetchKeyData(key);
                            return [asset.name, {
                                chain: chainData || [0, 0, 0],
                                hdkey
                            }];
                        });
                        return function(_x4) {
                            return _ref3.apply(this, arguments);
                        };
                    })()));
                    success(_lodash2.default.fromPairs(data));
                });
                return function(_x, _x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            })());
        }

        function setHDKeyFromXPub(asset, xpub) {
            const tag = asset + '-' + 'account0';
            const accountHDKey = _bip2.default.fromXPub(xpub, tag, {
                coin: asset
            });
            const chainData = [0, 0, 0];
            let account = {
                chain: chainData,
                hdkey: accountHDKey
            };
            return (0, _util.FSA)('ACCOUNTS_UPDATE', {
                [asset]: account
            });
        }

    }, {
        "167": 167,
        "168": 168,
        "184": 184,
        "200": 200,
        "264": 264,
        "288": 288,
        "undefined": undefined
    }],
    13: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _walletHelper = require(170);
        var _walletHelper2 = _interopRequireDefault(_walletHelper);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['RESCAN_BLOCKCHAIN_SUCCESS', (() => {
                var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                    let {
                        type,
                        payload
                    } = _ref;
                    let {
                        dispatch,
                        preState,
                        postState
                    } = _ref2;
                    const {
                        asset
                    } = payload;
                    const isChanged = function(path) {
                        return lodash.get(preState, path) !== lodash.get(postState, path);
                    };
                    const promises = [];
                    if (isChanged(['txLog', asset])) {
                        promises.push((0, _walletHelper2.default)(_instanceShim2.default.current).writeTxs(asset, postState.txLog[asset]));
                    }
                    if (isChanged(['utxos', asset])) {
                        const key = walletKeys.accountStateMutations(asset, 'account0');
                        promises.push(_instanceShim2.default.current.updateKeyData(key, postState.utxos[asset].toJSON()));
                    }
                    if (isChanged(['accounts', asset, 'chain'])) {
                        const key = walletKeys.accountStateChain(asset, 'account0');
                        yield _instanceShim2.default.current.updateKeyData(key, postState.accounts[asset].chain);
                    }
                    yield Promise.all(promises);
                });
                return function(_x, _x2) {
                    return _ref3.apply(this, arguments);
                };
            })()]
        ];

    }, {
        "167": 167,
        "168": 168,
        "170": 170,
        "undefined": undefined
    }],
    14: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.refresh = undefined;
        var _asyncGenerator = function() {
            function AwaitValue(value) {
                this.value = value;
            }

            function AsyncGenerator(gen) {
                var front, back;

                function send(key, arg) {
                    return new Promise(function(resolve, reject) {
                        var request = {
                            key: key,
                            arg: arg,
                            resolve: resolve,
                            reject: reject,
                            next: null
                        };
                        if (back) {
                            back = back.next = request;
                        } else {
                            front = back = request;
                            resume(key, arg);
                        }
                    });
                }

                function resume(key, arg) {
                    try {
                        var result = gen[key](arg);
                        var value = result.value;
                        if (value instanceof AwaitValue) {
                            Promise.resolve(value.value).then(function(arg) {
                                resume("next", arg);
                            }, function(arg) {
                                resume("throw", arg);
                            });
                        } else {
                            settle(result.done ? "return" : "normal", result.value);
                        }
                    } catch (err) {
                        settle("throw", err);
                    }
                }

                function settle(type, value) {
                    switch (type) {
                        case "return":
                            front.resolve({
                                value: value,
                                done: true
                            });
                            break;
                        case "throw":
                            front.reject(value);
                            break;
                        default:
                            front.resolve({
                                value: value,
                                done: false
                            });
                            break;
                    }
                    front = front.next;
                    if (front) {
                        resume(front.key, front.arg);
                    } else {
                        back = null;
                    }
                }
                this._invoke = send;
                if (typeof gen.return !== "function") {
                    this.return = undefined;
                }
            }
            if (typeof Symbol === "function" && Symbol.asyncIterator) {
                AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                    return this;
                };
            }
            AsyncGenerator.prototype.next = function(arg) {
                return this._invoke("next", arg);
            };
            AsyncGenerator.prototype.throw = function(arg) {
                return this._invoke("throw", arg);
            };
            AsyncGenerator.prototype.return = function(arg) {
                return this._invoke("return", arg);
            };
            return {
                wrap: function(fn) {
                    return function() {
                        return new AsyncGenerator(fn.apply(this, arguments));
                    };
                },
                await: function(value) {
                    return new AwaitValue(value);
                }
            };
        }();
        let refresh = exports.refresh = (() => {
            var _ref = _asyncGenerator.wrap(function*(asset) {
                const state = _flux.store.getState();
                if (state.assetsRefresh[asset]) return console.warn(`Already refreshing ${asset}.`);
                exodusAPI.logRescan(_assets2.default[asset]);
                const startTime = Date.now();
                let sAsset = asset;
                if (_assets2.default[asset].isEthereumToken) sAsset = 'ethereum';
                switch (sAsset) {
                    case 'bcash':
                    case 'bcashclaim':
                    case 'bitcoin':
                    case 'dash':
                    case 'decred':
                    case 'litecoin':
                    case 'zcash':
                        yield* _asyncGeneratorDelegate(_asyncIterator((0, _insight.rescanBlockchainInsight)(asset, state)), _asyncGenerator.await);
                        break;
                    case 'ethereum':
                    case 'ethereumclassic':
                        const mAssets = [sAsset];
                        if (sAsset === 'ethereum') {
                            mAssets.push(...Object.values(_assets2.default).filter(function(asset) {
                                return asset.isEthereumToken;
                            }).map(function(asset) {
                                return asset.name;
                            }));
                        }
                        for (const mAsset of mAssets) {
                            yield(0, _util.FSA)('RESCAN_BLOCKCHAIN_INIT', {
                                asset: mAsset
                            });
                        }
                        const erefres = yield _asyncGenerator.await(_flux.actions.monitors.coins[sAsset].refresh());
                        yield _asyncGenerator.await((0, _delay2.default)(Math.max(0, startTime + (0, _ms2.default)('7s') - Date.now())));
                        for (const mAsset of mAssets) {
                            yield(0, _util.FSA)('RESCAN_BLOCKCHAIN_SUCCESS', {
                                asset: mAsset,
                                txs: erefres && erefres[mAsset]
                            });
                        }
                        break;
                    case 'factom':
                    case 'tether':
                    case 'ripple':
                        yield(0, _util.FSA)('RESCAN_BLOCKCHAIN_INIT', {
                            asset
                        });
                        const refres = yield _asyncGenerator.await(_flux.actions.monitors.coins[asset].refresh());
                        yield _asyncGenerator.await((0, _delay2.default)(Math.max(0, startTime + (0, _ms2.default)('7s') - Date.now())));
                        yield(0, _util.FSA)('RESCAN_BLOCKCHAIN_SUCCESS', {
                            asset,
                            txs: refres && refres.txs
                        });
                        break;
                    default:
                        window.alert('Asset not supported for refreshing.');
                }
            });
            return function refresh(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.refreshAll = refreshAll;
        exports.refreshAckError = refreshAckError;
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _util = require(264);
        var _flux = require(257);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusApi = require(228);
        var exodusAPI = _interopRequireWildcard(_exodusApi);
        var _insight = require(15);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function _asyncIterator(iterable) {
            if (typeof Symbol === "function") {
                if (Symbol.asyncIterator) {
                    var method = iterable[Symbol.asyncIterator];
                    if (method != null) return method.call(iterable);
                }
                if (Symbol.iterator) {
                    return iterable[Symbol.iterator]();
                }
            }
            throw new TypeError("Object is not async iterable");
        }

        function _asyncGeneratorDelegate(inner, awaitWrap) {
            var iter = {},
                waiting = false;

            function pump(key, value) {
                waiting = true;
                value = new Promise(function(resolve) {
                    resolve(inner[key](value));
                });
                return {
                    done: false,
                    value: awaitWrap(value)
                };
            };
            if (typeof Symbol === "function" && Symbol.iterator) {
                iter[Symbol.iterator] = function() {
                    return this;
                };
            }
            iter.next = function(value) {
                if (waiting) {
                    waiting = false;
                    return value;
                }
                return pump("next", value);
            };
            if (typeof inner.throw === "function") {
                iter.throw = function(value) {
                    if (waiting) {
                        waiting = false;
                        throw value;
                    }
                    return pump("throw", value);
                };
            }
            if (typeof inner.return === "function") {
                iter.return = function(value) {
                    return pump("return", value);
                };
            }
            return iter;
        }

        function refreshAll() {
            return (0, _reduxAsyncAction2.default)('RESCAN_ALL', (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                    let {
                        success
                    } = _ref2;
                    const assets = Object.values((0, _available2.default)(getState()));
                    const skipList = ['monero', ...assets.filter(function(asset) {
                        return asset.isEthereumToken;
                    }).map(function(asset) {
                        return asset.name;
                    })];
                    yield Promise.all(assets.filter(function(asset) {
                        return !skipList.includes(asset.name);
                    }).map(function(asset) {
                        return new Promise(function(resolve, reject) {
                            iterateAsyncGenerator(refresh(asset.name), {
                                success: resolve,
                                fail: reject,
                                update: dispatch
                            });
                        });
                    }));
                    success();
                });
                return function(_x2, _x3, _x4) {
                    return _ref3.apply(this, arguments);
                };
            })());

            function iterateAsyncGenerator(action, actions) {
                const {
                    update,
                    success,
                    fail
                } = actions;
                action.next().then(res => {
                    if (res.value) update(res.value);
                    if (res.done) return success();
                    iterateAsyncGenerator(action, actions);
                }).catch(err => {
                    fail(err);
                    console.error(err);
                });
            }
        }

        function refreshAckError() {
            return (0, _util.FSA)('RESCAN_BLOCKCHAIN_FAIL_ACK');
        }

    }, {
        "15": 15,
        "184": 184,
        "228": 228,
        "257": 257,
        "264": 264,
        "288": 288,
        "96": 96,
        "undefined": undefined
    }],
    15: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.rescanBlockchainInsight = undefined;
        var _asyncGenerator = function() {
            function AwaitValue(value) {
                this.value = value;
            }

            function AsyncGenerator(gen) {
                var front, back;

                function send(key, arg) {
                    return new Promise(function(resolve, reject) {
                        var request = {
                            key: key,
                            arg: arg,
                            resolve: resolve,
                            reject: reject,
                            next: null
                        };
                        if (back) {
                            back = back.next = request;
                        } else {
                            front = back = request;
                            resume(key, arg);
                        }
                    });
                }

                function resume(key, arg) {
                    try {
                        var result = gen[key](arg);
                        var value = result.value;
                        if (value instanceof AwaitValue) {
                            Promise.resolve(value.value).then(function(arg) {
                                resume("next", arg);
                            }, function(arg) {
                                resume("throw", arg);
                            });
                        } else {
                            settle(result.done ? "return" : "normal", result.value);
                        }
                    } catch (err) {
                        settle("throw", err);
                    }
                }

                function settle(type, value) {
                    switch (type) {
                        case "return":
                            front.resolve({
                                value: value,
                                done: true
                            });
                            break;
                        case "throw":
                            front.reject(value);
                            break;
                        default:
                            front.resolve({
                                value: value,
                                done: false
                            });
                            break;
                    }
                    front = front.next;
                    if (front) {
                        resume(front.key, front.arg);
                    } else {
                        back = null;
                    }
                }
                this._invoke = send;
                if (typeof gen.return !== "function") {
                    this.return = undefined;
                }
            }
            if (typeof Symbol === "function" && Symbol.asyncIterator) {
                AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                    return this;
                };
            }
            AsyncGenerator.prototype.next = function(arg) {
                return this._invoke("next", arg);
            };
            AsyncGenerator.prototype.throw = function(arg) {
                return this._invoke("throw", arg);
            };
            AsyncGenerator.prototype.return = function(arg) {
                return this._invoke("return", arg);
            };
            return {
                wrap: function(fn) {
                    return function() {
                        return new AsyncGenerator(fn.apply(this, arguments));
                    };
                },
                await: function(value) {
                    return new AwaitValue(value);
                }
            };
        }();
        let fetchAllTxData = (() => {
            var _ref = _asyncToGenerator(function*(insight, addrs, n, httpDelay) {
                console.log(`fetching: ${addrs.join(',')}`);
                let txs = [];
                let total = 100000;
                let i = 0;
                while (i < total) {
                    const txData = yield insight.fetchTxData(addrs, {
                        from: i,
                        to: i + n
                    });
                    txs = txs.concat(txData.items);
                    total = txData.totalItems || 0;
                    i += txData.items ? txData.items.length : 0;
                    yield(0, _delay2.default)(httpDelay);
                }
                return txs;
            });
            return function fetchAllTxData(_x, _x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            };
        })();
        let rescanBlockchainInsight = exports.rescanBlockchainInsight = (() => {
            var _ref2 = _asyncGenerator.wrap(function*(asset, state) {
                let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOpts;
                const {
                    init,
                    success
                } = (0, _util.createFSAA)('RESCAN_BLOCKCHAIN');
                const {
                    hdkey
                } = state.accounts[asset];
                const newChain = [0, 0, 0];
                const pairingData = (0, _pairingData2.default)(_flux.store.getState())(asset);
                const addrGen = (0, _addressGeneratorTwoOfTwo.createFromHDKey)(asset, hdkey, pairingData);
                const currency = _assets2.default[asset].currency;
                const addrMap = {};
                let txItems = {};
                let allTxs = [];
                const insightServer = state.insightServers[asset].api;
                const insight = new _insightApiClient2.default(insightServer);
                yield init({
                    asset
                });
                for (let chainIndex = 0; chainIndex < newChain.length; ++chainIndex) {
                    const gapLimit = 20 + 1;
                    let i = 0;
                    let txs = [];
                    console.log('CHAIN: ' + chainIndex);
                    do {
                        let addrs = [];
                        const iter = addrGen(chainIndex, {
                            i,
                            limit: gapLimit
                        });
                        for (let addr of iter) {
                            addrMap[String(addr)] = addr;
                            addrs.push(String(addr));
                        }
                        i += gapLimit;
                        txs = yield _asyncGenerator.await(fetchAllTxData(insight, addrs, opts.ntxs, opts.httpDelay));
                        allTxs = allTxs.concat(txs);
                    } while (txs.length > 0);
                }
                allTxs = (0, _insightApiClient.orderTxs)(allTxs);
                allTxs.forEach(function(tx) {
                    txItems[tx.txid] = tx;
                });
                let vinTxids = {};
                let utxos = [];
                let txs = [];
                let addrsRecv = [];
                Object.values(txItems).forEach(function(txItem) {
                    let txLogItem = {
                        txId: txItem.txid,
                        coinAmount: currency.ZERO,
                        date: txItem.time ? new Date(txItem.time * 1000) : new Date(),
                        coinName: asset,
                        confirmations: txItem.confirmations,
                        feeAmount: currency.defaultUnit(txItem.fees || 0),
                        addresses: []
                    };
                    let isSent = false;
                    txItem.vin.forEach(function(vin) {
                        vinTxids[`${vin.txid}-${vin.vout}`] = true;
                        if (!addrMap[vin.addr]) return;
                        txLogItem.coinAmount = txLogItem.coinAmount.subtract(currency.defaultUnit(vin.value));
                        isSent = true;
                    });
                    txItem.vout.forEach(function(vout) {
                        if (!vout.scriptPubKey) return;
                        if (!Array.isArray(vout.scriptPubKey.addresses)) return;
                        if (vout.scriptPubKey.addresses.length === 0) return;
                        if (!addrMap[vout.scriptPubKey.addresses[0]]) return;
                        const address = addrMap[vout.scriptPubKey.addresses[0]];
                        addrsRecv.push(address);
                        if ((0, _util2.isExchangeAddress)(address) || (0, _util2.isReceiveAddress)(address)) txLogItem.addresses.push(address);
                        let val = currency.defaultUnit(vout.value);
                        txLogItem.coinAmount = txLogItem.coinAmount.add(val);
                        if (vout.spentTxId) return;
                        utxos.push({
                            address,
                            txId: txItem.txid,
                            vout: vout.n,
                            confirmations: txLogItem.confirmations,
                            script: vout.scriptPubKey.hex,
                            value: val
                        });
                    });
                    if (isSent) {
                        txLogItem.coinAmount = txLogItem.coinAmount.add(txLogItem.feeAmount);
                    }
                    txs.push(txLogItem);
                });
                utxos = utxos.filter(function(utxo) {
                    if (!vinTxids[`${utxo.txId}-${utxo.vout}`]) return utxo;
                });
                const utxoCol = _utxoCollection2.default.fromArray(utxos, {
                    currency
                });
                addrsRecv.forEach(function(addr) {
                    const pd = addr.meta.path.split('/');
                    const chainJ = ~~pd[1];
                    const addrI = ~~pd[2];
                    newChain[chainJ] = addrI > newChain[chainJ] ? addrI : newChain[chainJ];
                });
                newChain[0] = 0;
                newChain[2] = 0;
                newChain[1] += 1;
                console.dir(newChain);
                txs = _txSet2.default.fromArray(txs);
                yield success({
                    asset,
                    chain: newChain,
                    txs,
                    utxos: utxoCol
                });
            });
            return function rescanBlockchainInsight(_x6, _x7) {
                return _ref2.apply(this, arguments);
            };
        })();
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _insightApiClient = require(265);
        var _insightApiClient2 = _interopRequireDefault(_insightApiClient);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _util = require(264);
        var _flux = require(257);
        var _addressGeneratorTwoOfTwo = require(8);
        var _pairingData = require(140);
        var _pairingData2 = _interopRequireDefault(_pairingData);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);
        var _util2 = require(83);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const defaultOpts = {
            httpDelay: 4500,
            ntxs: 25
        };

    }, {
        "140": 140,
        "184": 184,
        "257": 257,
        "264": 264,
        "265": 265,
        "8": 8,
        "83": 83,
        "86": 86,
        "89": 89,
        "undefined": undefined
    }],
    16: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.loadStatus = exports.loadAuth = exports.createAccount = undefined;
        exports.setStatus = setStatus;
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _flux = require(257);
        var _client = require(217);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const backupAuthClient = (0, _client.createClient)('backup-auth');
        const createAccount = exports.createAccount = (passphrase, email) => (0, _reduxAsyncAction2.default)('BACKUP_CREATE_ACCOUNT', (() => {
            var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                let {
                    success,
                    fail
                } = _ref;
                const account = (0, _client.createClient)('account');
                const {
                    auth,
                    status
                } = yield account.create(passphrase, email);
                success({
                    auth,
                    status
                });
            });
            return function(_x, _x2, _x3) {
                return _ref2.apply(this, arguments);
            };
        })());
        const loadAuth = exports.loadAuth = () => (0, _reduxAsyncAction2.default)('BACKUP_LOAD_AUTH', (() => {
            var _ref4 = _asyncToGenerator(function*(dispatch, getState, _ref3) {
                let {
                    success,
                    fail
                } = _ref3;
                const auth = yield backupAuthClient.current();
                success(auth);
            });
            return function(_x4, _x5, _x6) {
                return _ref4.apply(this, arguments);
            };
        })());
        const loadStatus = exports.loadStatus = () => (0, _reduxAsyncAction2.default)('BACKUP_LOAD_STATUS', (() => {
            var _ref6 = _asyncToGenerator(function*(dispatch, getState, _ref5) {
                let {
                    success,
                    fail
                } = _ref5;
                const backupKey = walletKeys.backup();
                const status = yield _instanceShim2.default.current.fetchKeyData(backupKey);
                success(status);
            });
            return function(_x7, _x8, _x9) {
                return _ref6.apply(this, arguments);
            };
        })());

        function setStatus(status) {
            return {
                type: 'BACKUP_SET_STATUS',
                payload: status
            };
        }
        const walletClient = (0, _client.createClient)('wallet');
        setInterval(_asyncToGenerator(function*() {
            try {
                let status = yield walletClient.fetchKeyData(walletKeys.backup());
                if (status) _flux.actions.backup.setStatus(status);
            } catch (e) {}
        }), 60 * 1000);

    }, {
        "167": 167,
        "168": 168,
        "217": 217,
        "257": 257,
        "288": 288
    }],
    17: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _configFile = require(205);

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['CONFIG_UPDATE', (() => {
                var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                    let {
                        type,
                        payload
                    } = _ref;
                    let {
                        postState
                    } = _ref2;
                    yield(0, _configFile.writeConfig)(postState.config);
                });
                return function(_x, _x2) {
                    return _ref3.apply(this, arguments);
                };
            })()]
        ];

    }, {
        "205": 205
    }],
    18: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.notifications = undefined;
        exports.load = load;
        exports.update = update;
        exports.enableAsset = enableAsset;
        exports.disableAsset = disableAsset;
        exports.setCoinMarketCap = setCoinMarketCap;
        exports.setCryptoCompare = setCryptoCompare;
        exports.setFiatUnit = setFiatUnit;
        var _configFile = require(205);
        var _configKeys = require(206);

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function load() {
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch) {
                    const payload = yield(0, _configFile.readConfig)();
                    dispatch({
                        type: 'CONFIG_LOAD',
                        payload
                    });
                });
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

        function update(key, value) {
            return {
                type: 'CONFIG_UPDATE',
                payload: {
                    key,
                    value
                }
            };
        }

        function enableAsset(asset) {
            return update(`${_configKeys.assets}.${asset}.disabled`, false);
        }

        function disableAsset(asset) {
            return update(`${_configKeys.assets}.${asset}.disabled`, true);
        }

        function setCoinMarketCap() {
            return update(_configKeys.marketPrices, ['coinmarketcap', 'cryptocompare']);
        }

        function setCryptoCompare() {
            return update(_configKeys.marketPrices, ['cryptocompare', 'coinmarketcap']);
        }

        function setFiatUnit(unit) {
            return update(_configKeys.fiatUnit, unit);
        }
        const notifications = exports.notifications = {
            tx: {
                receive: {
                    disable: () => update(_configKeys.notificationsTxReceivedEnabled, false),
                    enable: () => update(_configKeys.notificationsTxReceivedEnabled, true)
                }
            }
        };

    }, {
        "205": 205,
        "206": 206
    }],
    19: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.success = exports.error = undefined;
        var _asyncGenerator = function() {
            function AwaitValue(value) {
                this.value = value;
            }

            function AsyncGenerator(gen) {
                var front, back;

                function send(key, arg) {
                    return new Promise(function(resolve, reject) {
                        var request = {
                            key: key,
                            arg: arg,
                            resolve: resolve,
                            reject: reject,
                            next: null
                        };
                        if (back) {
                            back = back.next = request;
                        } else {
                            front = back = request;
                            resume(key, arg);
                        }
                    });
                }

                function resume(key, arg) {
                    try {
                        var result = gen[key](arg);
                        var value = result.value;
                        if (value instanceof AwaitValue) {
                            Promise.resolve(value.value).then(function(arg) {
                                resume("next", arg);
                            }, function(arg) {
                                resume("throw", arg);
                            });
                        } else {
                            settle(result.done ? "return" : "normal", result.value);
                        }
                    } catch (err) {
                        settle("throw", err);
                    }
                }

                function settle(type, value) {
                    switch (type) {
                        case "return":
                            front.resolve({
                                value: value,
                                done: true
                            });
                            break;
                        case "throw":
                            front.reject(value);
                            break;
                        default:
                            front.resolve({
                                value: value,
                                done: false
                            });
                            break;
                    }
                    front = front.next;
                    if (front) {
                        resume(front.key, front.arg);
                    } else {
                        back = null;
                    }
                }
                this._invoke = send;
                if (typeof gen.return !== "function") {
                    this.return = undefined;
                }
            }
            if (typeof Symbol === "function" && Symbol.asyncIterator) {
                AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                    return this;
                };
            }
            AsyncGenerator.prototype.next = function(arg) {
                return this._invoke("next", arg);
            };
            AsyncGenerator.prototype.throw = function(arg) {
                return this._invoke("throw", arg);
            };
            AsyncGenerator.prototype.return = function(arg) {
                return this._invoke("return", arg);
            };
            return {
                wrap: function(fn) {
                    return function() {
                        return new AsyncGenerator(fn.apply(this, arguments));
                    };
                },
                await: function(value) {
                    return new AwaitValue(value);
                }
            };
        }();
        let error = exports.error = (() => {
            var _ref = _asyncGenerator.wrap(function*(message) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                yield(0, _util.FSA)('DIALOG_INIT');
                const opts = Object.assign({}, options, {
                    text: message
                });
                const res = yield _asyncGenerator.await(swalError(opts));
                yield(0, _util.FSA)('DIALOG_ACK', res);
            });
            return function error(_x2) {
                return _ref.apply(this, arguments);
            };
        })();
        let success = exports.success = (() => {
            var _ref2 = _asyncGenerator.wrap(function*(message) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                yield(0, _util.FSA)('DIALOG_INIT');
                const opts = Object.assign({}, options, {
                    text: message
                });
                const res = yield _asyncGenerator.await(swalSuccess(opts));
                yield(0, _util.FSA)('DIALOG_ACK', res);
            });
            return function success(_x4) {
                return _ref2.apply(this, arguments);
            };
        })();
        let swalError = (() => {
            var _ref3 = _asyncToGenerator(function*() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                return new Promise(function(resolve) {
                    window.requestIdleCallback(function() {
                        _swal2.default.error(options, function(result) {
                            return window.requestIdleCallback(function() {
                                return resolve(result);
                            });
                        });
                    });
                });
            });
            return function swalError() {
                return _ref3.apply(this, arguments);
            };
        })();
        let swalSuccess = (() => {
            var _ref4 = _asyncToGenerator(function*() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                return new Promise(function(resolve) {
                    window.requestIdleCallback(function() {
                        _swal2.default.success(options, function(result) {
                            return window.requestIdleCallback(function() {
                                return resolve(result);
                            });
                        });
                    });
                });
            });
            return function swalSuccess() {
                return _ref4.apply(this, arguments);
            };
        })();
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _util = require(264);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "264": 264,
        "306": 306
    }],
    20: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initExchange = exports.fetchOrders = exports.fetchAssetsAvailable = undefined;
        let fetchAssetsAvailable = exports.fetchAssetsAvailable = (() => {
            var _ref = _asyncToGenerator(function*() {
                const url = `${_appConfig.EXODUS_SERVER}/v1/assets`;
                const res = yield(0, _fetchival2.default)(url).get();
                if (res.status !== 'success') throw new Error(`${url} response not success.`);
                const coinStatuses = res.data;
                let ret = {};
                Object.keys(coinStatuses).forEach(function(csKey) {
                    const cs = coinStatuses[csKey];
                    let name = cs.name.toLowerCase();
                    if (name === 'ether') name = 'ethereum';
                    if (name === 'ether classic') name = 'ethereumclassic';
                    if (name === 'factoids') name = 'factom';
                    if (name === 'basic attention token') name = 'bat';
                    if (name === 'bitcoin cash') name = 'bcash';
                    ret[name] = cs.status;
                });
                return ret;
            });
            return function fetchAssetsAvailable() {
                return _ref.apply(this, arguments);
            };
        })();
        let fetchOrders = exports.fetchOrders = (() => {
            var _ref2 = _asyncToGenerator(function*(eid) {
                return (0, _fetchival2.default)(`${_appConfig.EXODUS_SERVER}/v1/orders/${eid}`).get();
            });
            return function fetchOrders(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        let initExchange = exports.initExchange = (() => {
            var _ref3 = _asyncToGenerator(function*(exchParams) {
                const ep = augmentExchParams(exchParams);
                let url;
                switch (global.EXCHANGE) {
                    case 'SS0':
                        url = `${_appConfig.EXODUS_SERVER}/v1/exchange-exact`;
                        break;
                    default:
                        url = `${_appConfig.EXODUS_SERVER}/v1/exch`;
                        break;
                }
                const res = yield(0, _fetchival2.default)(url).put(ep);
                if (res.status !== 'success') throw new Error('ShapeShift response failure.');
                return res.data;
            });
            return function initExchange(_x2) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _appConfig = require(80);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function augmentExchParams(exchParams) {
            let p = Object.assign({}, exchParams, {
                btn: exchButton(exchParams.activePopover),
                build: _appConfig.ENV_BUILD_NAME,
                version: _appConfig.PACKAGE.version,
                os: exchParamsOS()
            });
            delete p.activePopover;
            return p;
        }

        function exchButton(activePopover) {
            switch (activePopover) {
                case 'all':
                    return 'am';
                case 'half':
                    return 'h';
                case 'min':
                    return 'm';
                default:
                    return '';
            }
        }

        function exchParamsOS() {
            switch (process.platform) {
                case 'win32':
                    return 'W';
                case 'darwin':
                    return 'M';
                case 'linux':
                    return 'L';
            }
        }

    }, {
        "80": 80,
        "undefined": undefined
    }],
    21: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initExchange = exports.fetchOrderInfo = undefined;
        let fetchOrderInfo = exports.fetchOrderInfo = (() => {
            var _ref = _asyncToGenerator(function*(orderId) {
                const url = `https://shapeshift.io/orderinfo/${orderId}`;
                const res = yield(0, _fetchival2.default)(url).get();
                return res;
            });
            return function fetchOrderInfo(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        let initExchange = exports.initExchange = (() => {
            var _ref2 = _asyncToGenerator(function*(exchParams) {
                let opts = Object.assign({
                    apiKey: SS_PUB
                }, exchParams);
                delete opts.eid;
                delete opts.os;
                delete opts.active;
                opts.depositAmount = parseFloat(opts.depositAmount);
                opts.withdrawalAmount = parseFloat(opts.withdrawalAmount);
                if (opts.active === 'deposit') {
                    delete opts.withdrawalAmount;
                } else if (opts.active === 'withdrawal') {
                    opts.amount = opts.withdrawalAmount;
                    delete opts.withdrawalAmount;
                    delete opts.depositAmount;
                }
                const [err, res] = yield(0, _aw2.default)(shapeshift.sendAmount)(opts.pair, opts);
                if (err) throw err;
                return res;
            });
            return function initExchange(_x2) {
                return _ref2.apply(this, arguments);
            };
        })();
        exports.convertFromExodusOptions = convertFromExodusOptions;
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _shapeshift = require('shapeshift.io');
        var shapeshift = _interopRequireWildcard(_shapeshift);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const SS_PUB = 'e85b5fd4e7868bffa60d2286e13fdb121ae7535e317fc358181306d8c6c8456603651351fe28eb8a9a7f7bf067c3526eb2319d6103335e26b008548358c48f31';

        function convertFromExodusOptions(options) {
            let opts = Object.assign({}, options);
            return opts;
        }

    }, {
        "undefined": undefined
    }],
    22: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.startMonitorMarket = startMonitorMarket;
        exports.stopMonitorMarket = stopMonitorMarket;
        exports.updateMonitorMarket = updateMonitorMarket;
        exports.exchange = exchange;
        exports.ackExchange = ackExchange;
        exports.cancelExchange = cancelExchange;
        exports.checkShapeShiftMaintenance = checkShapeShiftMaintenance;
        exports.checkCoinsOnline = checkCoinsOnline;
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _shapeshift = require(302);
        var _shapeshift2 = _interopRequireDefault(_shapeshift);
        var _pairs = require(23);
        var pairs = _interopRequireWildcard(_pairs);
        var _txSend = require(75);
        var _flux = require(257);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _getExchangeAddress = require(91);
        var _getExchangeAddress2 = _interopRequireDefault(_getExchangeAddress);
        var _util = require(264);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _getUsdValue = require(120);
        var _getUsdValue2 = _interopRequireDefault(_getUsdValue);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _exodusApi = require(228);
        var exodusAPI = _interopRequireWildcard(_exodusApi);
        var _exodus = require(20);
        var exodusExchange = _interopRequireWildcard(_exodus);
        var _shapeshift3 = require(21);
        var shapeshiftExchange = _interopRequireWildcard(_shapeshift3);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        let eid;

        function startMonitorMarket() {
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch, getState) {
                    const fetchMarketInfo = (() => {
                        var _ref2 = _asyncToGenerator(function*() {
                            dispatch({
                                type: 'EXCHANGE_MARKET_INFO_INIT'
                            });
                            let [err, marketInfo] = [];
                            switch (global.EXCHANGE) {
                                case 'SS0':
                                    [err, marketInfo] = yield(0, _aw2.default)(_shapeshift2.default.marketInfo)();
                                    break;
                                default:
                                    [err, marketInfo] = yield(0, _aw2.default)(exodusAPI.marketInfo, {
                                        injectCallback: false
                                    })();
                                    break;
                            }
                            if (err) return dispatch({
                                type: 'EXCHANGE_MARKET_INFO_FAIL',
                                payload: err
                            });
                            dispatch({
                                type: 'EXCHANGE_MARKET_INFO_SUCCESS',
                                payload: marketInfo
                            });
                        });
                        return function fetchMarketInfo() {
                            return _ref2.apply(this, arguments);
                        };
                    })();
                    let marketInterval = setInterval(fetchMarketInfo, (0, _ms2.default)('30s'));
                    dispatch({
                        type: 'EXCHANGE_MARKET_INTERVAL',
                        payload: marketInterval
                    });
                    fetchMarketInfo();
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

        function stopMonitorMarket() {
            return (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState) {
                    let marketInterval = getState().exchange.marketInterval;
                    if (!marketInterval) return;
                    clearInterval(marketInterval);
                    dispatch({
                        type: 'EXCHANGE_MARKET_INTERVAL',
                        payload: null
                    });
                });
                return function(_x3, _x4) {
                    return _ref3.apply(this, arguments);
                };
            })();
        }

        function updateMonitorMarket(_ref4) {
            let {
                fromCoin,
                toCoin
            } = _ref4;
            return (() => {
                var _ref5 = _asyncToGenerator(function*(dispatch, getState) {
                    yield stopMonitorMarket()(dispatch, getState);
                    yield startMonitorMarket({
                        fromCoin,
                        toCoin
                    })(dispatch, getState);
                });
                return function(_x5, _x6) {
                    return _ref5.apply(this, arguments);
                };
            })();
        }

        function exchange(_ref6) {
            let {
                toAmount,
                fromAmount,
                fromCoin,
                toCoin,
                lastActive,
                activePopover
            } = _ref6;
            const initPayload = {
                fromCoin,
                toCoin
            };
            return (0, _reduxAsyncAction2.default)('EXCHANGE', {}, initPayload, (() => {
                var _ref8 = _asyncToGenerator(function*(dispatch, getState, _ref7) {
                    let {
                        success,
                        fail
                    } = _ref7;
                    let state = getState();
                    const getExchangeAddress = (0, _getExchangeAddress2.default)(state);
                    const getFiatValue = (0, _getValue2.default)(state);
                    const getUSDValue = (0, _getUsdValue2.default)(state);
                    if (!eid) eid = yield _instanceShim2.default.current.getEID();
                    let pair = pairs.fromCoins(fromCoin, toCoin);
                    const returnAddress = String(getExchangeAddress(fromCoin));
                    let toAddress = String(getExchangeAddress(toCoin));
                    if (toCoin === 'ethereum' || toCoin === 'ethereumclassic' || _assets2.default[toCoin].isEthereumToken) {
                        toAddress = toAddress.toLowerCase();
                    }
                    let fromCurrency = _assets2.default[fromCoin].currency;
                    let toCurrency = _assets2.default[toCoin].currency;
                    let sendAmount = fromAmount;
                    let depositAmount = sendAmount.toString();
                    let withdrawalAmount = toAmount.toString();
                    let active = lastActive === 'from' ? 'deposit' : 'withdrawal';
                    const fromCoinIsEthErcEtc = fromCoin === 'ethereum' || fromCoin === 'ethereumclassic' || _assets2.default[fromCoin].isEthereumToken;
                    if (fromCoinIsEthErcEtc && active === 'deposit') {
                        depositAmount = (Math.floor(sendAmount.toNumber() * 1e8) / 1e8).toFixed(8) + ' ETH';
                        console.log(depositAmount);
                    }
                    let exchOpts = {
                        withdrawal: toAddress,
                        pair,
                        returnAddress,
                        depositAmount,
                        withdrawalAmount,
                        active,
                        eid,
                        activePopover,
                        depositAmountFiat: getFiatValue(sendAmount),
                        withdrawalAmountFiat: getFiatValue(toAmount)
                    };
                    let res = yield exodusExchange.initExchange(exchOpts);
                    console.log('Exodus ShapeShift response:');
                    console.dir(res);
                    const orderInfo = yield shapeshiftExchange.fetchOrderInfo(res.orderId);
                    console.log('ShapeShift OrderInfo:');
                    console.dir(orderInfo);
                    let depositAddress = orderInfo.deposit;
                    let statusAddress = depositAddress;
                    if (fromCoin === 'monero') depositAddress = res.sAddress;
                    const oldToAmount = toAmount;
                    const waddress = orderInfo.withdraw || orderInfo.withdrawal;
                    if (!waddress) console.warn('No ShapeShift withdrawal address returned.');
                    if (waddress !== toAddress) {
                        console.warn('ShapeShift withdrawal address does not match.');
                        console.log(waddress);
                        console.log(toAddress);
                        let res2 = yield shapeshiftExchange.initExchange(exchOpts);
                        console.log('ShapeShift second response:');
                        console.dir(res2);
                        res = res2;
                        depositAddress = res.deposit;
                        statusAddress = depositAddress;
                        if (fromCoin === 'monero') depositAddress = res.sAddress;
                    }
                    toAmount = toCurrency.defaultUnit(res.withdrawalAmount);
                    dispatch({
                        type: 'EXCHANGE_START_SS',
                        payload: res
                    });
                    if (res.depositAmount && (active === 'withdrawal' || !fromCoinIsEthErcEtc)) {
                        const oldSendAmount = sendAmount;
                        sendAmount = fromCurrency.defaultUnit(res.depositAmount);
                        const fromDiff = (sendAmount.subtract(oldSendAmount).toNumber() * 100 / oldSendAmount.toNumber()).toFixed(4);
                        console.log(`DEPOSIT: ${sendAmount.toString()}, diff: ${fromDiff}`);
                        toAmount = toCurrency.defaultUnit(res.withdrawalAmount);
                        const toDiff = (toAmount.subtract(oldToAmount).toNumber() * 100 / oldToAmount.toNumber()).toFixed(4);
                        console.log(`WITHDRAWAL: ${toAmount.toString()}, diff: ${toDiff}`);
                    }
                    dispatch({
                        type: 'EXCHANGE_START',
                        payload: {
                            fromCoin,
                            toCoin,
                            depositAddress,
                            toAddress,
                            amount: sendAmount,
                            fromAmount: sendAmount,
                            toAmount
                        }
                    });
                    fromCoin = _assets2.default[fromCoin];
                    toCoin = _assets2.default[toCoin];
                    let receiver = {
                        address: depositAddress,
                        amount: sendAmount
                    };
                    if (fromCoin.name === 'monero') receiver.paymentId = statusAddress;
                    if (fromCoin.name === 'ripple') {
                        const [address, destTag] = receiver.address.split('?');
                        Object.assign(receiver, {
                            address,
                            destTag: destTag.split('=')[1]
                        });
                    }
                    yield(0, _delay2.default)((0, _ms2.default)('4s'));
                    dispatch((0, _util.FSA)('EXCHANGE_DISABLE_CANCEL'));
                    if (getState().exchange.canceled) {
                        dispatch(_flux.actions.exchange.ackExchange());
                        return;
                    }
                    yield(0, _txSend.send)({
                        coin: fromCoin,
                        receiver
                    })(dispatch, getState);
                    const txSendState = getState().txSend;
                    if (txSendState.error) {
                        return fail(new Error('Transaction failed to send.'));
                    }
                    dispatch((0, _txSend.ackSend)());
                    const fromExchgData = {
                        exchange: true,
                        txId: txSendState.txId,
                        coinAmount: sendAmount.abs().negate(),
                        fiatAmount: getFiatValue(sendAmount.abs().negate()),
                        toCoin: {
                            coin: toCoin.name,
                            coinAmount: toAmount.toString(),
                            fiatAmount: getFiatValue(toAmount).toString()
                        },
                        meta: {
                            shapeshiftOrderId: res.orderId,
                            shapeshiftDeposit: statusAddress
                        }
                    };
                    _flux.actions.txLog.update(fromCoin.name, fromExchgData);
                    const orderData = {
                        orderId: res.orderId,
                        status: res.status,
                        fromAsset: fromCoin.name,
                        fromTxId: txSendState.txId,
                        toAsset: toCoin.name,
                        fromAmount: sendAmount,
                        toAmount,
                        fromAmountUSD: getUSDValue(sendAmount),
                        toAmountUSD: getUSDValue(toAmount)
                    };
                    _flux.actions.orders.update(orderData);
                    yield(0, _delay2.default)((0, _ms2.default)('5s'));
                    dispatch((0, _util.FSA)('EXCHANGE_STATUS', 'complete'));
                    success();
                });
                return function(_x7, _x8, _x9) {
                    return _ref8.apply(this, arguments);
                };
            })());
        }

        function ackExchange() {
            return (0, _util.FSA)('EXCHANGE_ACK');
        }

        function cancelExchange() {
            return (0, _util.FSA)('EXCHANGE_CANCEL');
        }

        function checkShapeShiftMaintenance() {
            return (0, _reduxAsyncAction2.default)('EXCHANGE_MAINTENANCE', {}, (() => {
                var _ref10 = _asyncToGenerator(function*(dispatch, getState, _ref9) {
                    let {
                        success
                    } = _ref9;
                    const [err] = yield(0, _aw2.default)(_shapeshift2.default.isDown)();
                    success(!!err);
                });
                return function(_x10, _x11, _x12) {
                    return _ref10.apply(this, arguments);
                };
            })());
        }

        function checkCoinsOnline() {
            return (0, _reduxAsyncAction2.default)('EXCHANGE_COINS_ONLINE', {}, (() => {
                var _ref12 = _asyncToGenerator(function*(dispatch, getState, _ref11) {
                    let {
                        fail,
                        success
                    } = _ref11;
                    const ret = yield exodusExchange.fetchAssetsAvailable();
                    success(ret);
                });
                return function(_x13, _x14, _x15) {
                    return _ref12.apply(this, arguments);
                };
            })());
        }

    }, {
        "120": 120,
        "121": 121,
        "167": 167,
        "184": 184,
        "20": 20,
        "21": 21,
        "228": 228,
        "23": 23,
        "257": 257,
        "264": 264,
        "288": 288,
        "302": 302,
        "75": 75,
        "91": 91,
        "undefined": undefined
    }],
    23: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromCoins = fromCoins;
        exports.toCoins = toCoins;
        exports.isValid = isValid;
        exports.invert = invert;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const units = Object.values(_assets2.default).reduce((map, asset) => Object.assign(map, {
            [asset.shapeShiftUnit]: asset.name
        }), {});

        function fromCoins(fromCoin, toCoin) {
            const fromSS = _assets2.default[fromCoin.toLowerCase()].shapeShiftUnit;
            (0, _assert2.default)(fromSS, `${fromCoin} not supported`);
            const toSS = _assets2.default[toCoin.toLowerCase()].shapeShiftUnit;
            (0, _assert2.default)(toSS, `${toCoin} not supported`);
            return `${fromSS}_${toSS}`;
        }

        function toCoins(pair) {
            const items = pair.split('_');
            (0, _assert2.default)(items.length === 2, `${pair} is an invalid pair`);
            const fromCoin = units[items[0].toLowerCase()];
            (0, _assert2.default)(fromCoin, `from ${items[0]} is an invalid coin`);
            const toCoin = units[items[1].toLowerCase()];
            (0, _assert2.default)(toCoin, `to ${items[1]} is an invalid coin`);
            return [fromCoin, toCoin];
        }

        function isValid(pair) {
            const items = pair.split('_');
            return items.length === 2 && units[items[0].toLowerCase()] && units[items[1].toLowerCase()];
        }

        function invert(pair) {
            const [fromCoin, toCoin] = toCoins(pair);
            return fromCoins(toCoin, fromCoin);
        }

    }, {
        "184": 184,
        "undefined": undefined
    }],
    24: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _hooks = require(17);
        var _hooks2 = _interopRequireDefault(_hooks);
        var _hooks3 = require(13);
        var _hooks4 = _interopRequireDefault(_hooks3);
        var _hooks5 = require(26);
        var _hooks6 = _interopRequireDefault(_hooks5);
        var _hooks7 = require(62);
        var _hooks8 = _interopRequireDefault(_hooks7);
        var _hooks9 = require(64);
        var _hooks10 = _interopRequireDefault(_hooks9);
        var _hooks11 = require(69);
        var _hooks12 = _interopRequireDefault(_hooks11);
        var _hooks13 = require(74);
        var _hooks14 = _interopRequireDefault(_hooks13);
        var _hooks15 = require(78);
        var _hooks16 = _interopRequireDefault(_hooks15);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = [_hooks2.default, _hooks6.default, _hooks8.default, _hooks10.default, _hooks4.default, _hooks12.default, _hooks14.default, _hooks16.default];

    }, {
        "13": 13,
        "17": 17,
        "26": 26,
        "62": 62,
        "64": 64,
        "69": 69,
        "74": 74,
        "78": 78
    }],
    25: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bindAllActionCreators = bindAllActionCreators;
        var _reduxBindActionCreators = require(289);
        var _reduxBindActionCreators2 = _interopRequireDefault(_reduxBindActionCreators);
        var _accounts = require(12);
        var accounts = _interopRequireWildcard(_accounts);
        var _accountStates = require(11);
        var accountStates = _interopRequireWildcard(_accountStates);
        var _assetsRefresh = require(14);
        var assetsRefresh = _interopRequireWildcard(_assetsRefresh);
        var _backup = require(16);
        var backup = _interopRequireWildcard(_backup);
        var _config = require(18);
        var config = _interopRequireWildcard(_config);
        var _dialog = require(19);
        var dialog = _interopRequireWildcard(_dialog);
        var _exchange = require(22);
        var exchange = _interopRequireWildcard(_exchange);
        var _localStorage = require(27);
        var localStorage = _interopRequireWildcard(_localStorage);
        var _marketHistory = require(28);
        var marketHistory = _interopRequireWildcard(_marketHistory);
        var _moneroNgMm = require(29);
        var moneroMM = _interopRequireWildcard(_moneroNgMm);
        var _moneroSimplewallet = require(30);
        var moneroSimplewallet = _interopRequireWildcard(_moneroSimplewallet);
        var _monitors = require(53);
        var monitors = _interopRequireWildcard(_monitors);
        var _orders = require(65);
        var orders = _interopRequireWildcard(_orders);
        var _networks = require(63);
        var networks = _interopRequireWildcard(_networks);
        var _twoOfTwo = require(67);
        var twoOfTwo = _interopRequireWildcard(_twoOfTwo);
        var _txLog = require(70);
        var txLog = _interopRequireWildcard(_txLog);
        var _txSend = require(75);
        var txSend = _interopRequireWildcard(_txSend);
        var _utxos = require(79);
        var utxos = _interopRequireWildcard(_utxos);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const actionCreators = {
            accounts,
            accountStates,
            assetsRefresh,
            backup,
            config,
            dialog,
            exchange,
            localStorage,
            marketHistory,
            moneroMM,
            moneroSimplewallet,
            monitors,
            networks,
            orders,
            twoOfTwo,
            txLog,
            txSend,
            utxos
        };
        exports.default = actionCreators;

        function bindAllActionCreators(_ref) {
            let {
                dispatch
            } = _ref;
            const bindedActionCreators = {};
            Object.keys(actionCreators).forEach(ac => {
                bindedActionCreators[ac] = (0, _reduxBindActionCreators2.default)(actionCreators[ac], dispatch);
            });
            return bindedActionCreators;
        }

    }, {
        "11": 11,
        "12": 12,
        "14": 14,
        "16": 16,
        "18": 18,
        "19": 19,
        "22": 22,
        "27": 27,
        "28": 28,
        "289": 289,
        "29": 29,
        "30": 30,
        "53": 53,
        "63": 63,
        "65": 65,
        "67": 67,
        "70": 70,
        "75": 75,
        "79": 79
    }],
    26: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const localStorage = window.localStorage;
        exports.default = [
            ['LOCAL_STORAGE_SET_ITEM', (() => {
                var _ref2 = _asyncToGenerator(function*(_ref) {
                    let {
                        type,
                        payload
                    } = _ref;
                    localStorage.setItem('exodus:' + payload.key, payload.value);
                });
                return function(_x) {
                    return _ref2.apply(this, arguments);
                };
            })()]
        ];

    }, {}],
    27: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.load = load;
        exports.setItem = setItem;
        var _util = require(264);
        const localStorage = window.localStorage;

        function load() {
            const obj = {};
            for (let i = 0; i < localStorage.length; ++i) {
                const key = localStorage.key(i);
                if (!key.startsWith('exodus:')) continue;
                obj[key.slice(7)] = localStorage.getItem(key);
            }
            return (0, _util.FSA)('LOCAL_STORAGE_LOAD', obj);
        }

        function setItem(key, value) {
            return (0, _util.FSA)('LOCAL_STORAGE_SET_ITEM', {
                key,
                value
            });
        }

    }, {
        "264": 264
    }],
    28: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.load = exports.loadAll = undefined;
        var _asyncGenerator = function() {
            function AwaitValue(value) {
                this.value = value;
            }

            function AsyncGenerator(gen) {
                var front, back;

                function send(key, arg) {
                    return new Promise(function(resolve, reject) {
                        var request = {
                            key: key,
                            arg: arg,
                            resolve: resolve,
                            reject: reject,
                            next: null
                        };
                        if (back) {
                            back = back.next = request;
                        } else {
                            front = back = request;
                            resume(key, arg);
                        }
                    });
                }

                function resume(key, arg) {
                    try {
                        var result = gen[key](arg);
                        var value = result.value;
                        if (value instanceof AwaitValue) {
                            Promise.resolve(value.value).then(function(arg) {
                                resume("next", arg);
                            }, function(arg) {
                                resume("throw", arg);
                            });
                        } else {
                            settle(result.done ? "return" : "normal", result.value);
                        }
                    } catch (err) {
                        settle("throw", err);
                    }
                }

                function settle(type, value) {
                    switch (type) {
                        case "return":
                            front.resolve({
                                value: value,
                                done: true
                            });
                            break;
                        case "throw":
                            front.reject(value);
                            break;
                        default:
                            front.resolve({
                                value: value,
                                done: false
                            });
                            break;
                    }
                    front = front.next;
                    if (front) {
                        resume(front.key, front.arg);
                    } else {
                        back = null;
                    }
                }
                this._invoke = send;
                if (typeof gen.return !== "function") {
                    this.return = undefined;
                }
            }
            if (typeof Symbol === "function" && Symbol.asyncIterator) {
                AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                    return this;
                };
            }
            AsyncGenerator.prototype.next = function(arg) {
                return this._invoke("next", arg);
            };
            AsyncGenerator.prototype.throw = function(arg) {
                return this._invoke("throw", arg);
            };
            AsyncGenerator.prototype.return = function(arg) {
                return this._invoke("return", arg);
            };
            return {
                wrap: function(fn) {
                    return function() {
                        return new AsyncGenerator(fn.apply(this, arguments));
                    };
                },
                await: function(value) {
                    return new AwaitValue(value);
                }
            };
        }();
        let loadAll = exports.loadAll = (() => {
            var _ref = _asyncGenerator.wrap(function*() {
                for (const assetName of Object.keys(_assets2.default)) {
                    if (_assets2.default[assetName].available) {
                        yield* _asyncGeneratorDelegate(_asyncIterator(load(_flux.store.getState, assetName)), _asyncGenerator.await);
                        yield _asyncGenerator.await((0, _delay2.default)((0, _ms2.default)('1s')));
                    }
                }
            });
            return function loadAll() {
                return _ref.apply(this, arguments);
            };
        })();
        let load = exports.load = (() => {
            var _ref2 = _asyncGenerator.wrap(function*(getState, asset) {
                const fiat = getState().config.get(_configKeys.fiatUnit);
                yield(0, _util.FSA)('MARKET_HISTORY_LOAD_INIT', {
                    asset,
                    fiat
                });
                const assetObj = _assets2.default[asset];
                const symbol = assetObj.displayUnit;
                const [err, priceData] = yield _asyncGenerator.await((0, _aw2.default)(_cryptocompare.histoDay)(symbol, fiat, {
                    limit: HISTO_DAYS,
                    tryConversion: true
                }));
                if (err) {
                    console.error(`MARKET_HISTORY_LOAD_FAIL (${asset}/${fiat})`);
                    console.error(err);
                    const error = err instanceof Error ? err : new Error(err);
                    error.asset = asset;
                    error.fiat = fiat;
                    return yield(0, _util.FSA)('MARKET_HISTORY_LOAD_FAIL', error);
                }
                yield _asyncGenerator.await(idle({
                    timeout: 1000
                }));
                const prices = convertPriceArrayToMap(priceData);
                yield(0, _util.FSA)('MARKET_HISTORY_LOAD_SUCCESS', {
                    asset,
                    fiat,
                    prices
                });
            });
            return function load(_x, _x2) {
                return _ref2.apply(this, arguments);
            };
        })();
        let idle = (() => {
            var _ref3 = _asyncToGenerator(function*(options) {
                return new Promise(function(resolve) {
                    return window.requestIdleCallback(resolve, options);
                });
            });
            return function idle(_x3) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _util = require(264);
        var _cryptocompare = require('cryptocompare');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _configKeys = require(206);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _dateUtil = require(214);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function _asyncIterator(iterable) {
            if (typeof Symbol === "function") {
                if (Symbol.asyncIterator) {
                    var method = iterable[Symbol.asyncIterator];
                    if (method != null) return method.call(iterable);
                }
                if (Symbol.iterator) {
                    return iterable[Symbol.iterator]();
                }
            }
            throw new TypeError("Object is not async iterable");
        }

        function _asyncGeneratorDelegate(inner, awaitWrap) {
            var iter = {},
                waiting = false;

            function pump(key, value) {
                waiting = true;
                value = new Promise(function(resolve) {
                    resolve(inner[key](value));
                });
                return {
                    done: false,
                    value: awaitWrap(value)
                };
            };
            if (typeof Symbol === "function" && Symbol.iterator) {
                iter[Symbol.iterator] = function() {
                    return this;
                };
            }
            iter.next = function(value) {
                if (waiting) {
                    waiting = false;
                    return value;
                }
                return pump("next", value);
            };
            if (typeof inner.throw === "function") {
                iter.throw = function(value) {
                    if (waiting) {
                        waiting = false;
                        throw value;
                    }
                    return pump("throw", value);
                };
            }
            if (typeof inner.return === "function") {
                iter.return = function(value) {
                    return pump("return", value);
                };
            }
            return iter;
        }
        const HISTO_DAYS = 500;

        function convertPriceArrayToMap(prices) {
            const map = new Map();
            for (let price of prices) {
                const time = (0, _dateUtil.secsToDate)(price.time);
                map.set((0, _dateUtil.startOfDay)(time).valueOf(), Object.assign({}, price, {
                    time
                }));
            }
            return map;
        }

    }, {
        "184": 184,
        "206": 206,
        "214": 214,
        "257": 257,
        "264": 264,
        "undefined": undefined
    }],
    29: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.login = login;
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _electronIpcBroadcast = require('electron-ipc-broadcast');
        var _electronIpcBroadcast2 = _interopRequireDefault(_electronIpcBroadcast);
        var _electron = require('electron');
        var _monerojsUtil = require(281);
        var moneroUtil = _interopRequireWildcard(_monerojsUtil);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function login() {
            return (0, _reduxAsyncAction2.default)('MONERO_MM_LOGIN', {
                indefinite: true
            }, (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                    let {
                        update
                    } = _ref;
                    const state = getState();
                    const {
                        meta
                    } = (0, _getReceiveAddress2.default)(state)('monero');
                    let accMonero = getState().accounts.monero;
                    let hdkey = accMonero.hdkey.derive(meta.path, '');
                    let keys = moneroUtil.crypto.deriveKeys(hdkey.privateKey);
                    let addr = moneroUtil.address.create(keys.spend.pub, keys.view.pub);
                    _login(keys, addr);
                    _electron.ipcRenderer.on('mm:update', function(event, _ref3) {
                        let {
                            payload
                        } = _ref3;
                        console.log('mm:update');
                        console.dir(payload);
                        update(payload);
                    });
                });
                return function(_x, _x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            })());
        }
        let failCount = 0;

        function _login(keys, addr) {
            console.log('mm:login');
            const cancelTimeout = setTimeout(() => _login(keys, addr), (0, _ms2.default)('20s'));
            _electron.ipcRenderer.once('mm:login:success', () => {
                console.log('mm:login:success');
                clearTimeout(cancelTimeout);
            });
            _electron.ipcRenderer.once('mm:login:fail', () => {
                failCount += 1;
                console.error('mm:login:fail');
                if (failCount >= 3) {
                    console.error(`Tried logging into MyMonero ${failCount} times. Done trying.`);
                    clearTimeout(cancelTimeout);
                }
            });
            (0, _electronIpcBroadcast2.default)('mm:login', {
                keys,
                addr
            });
        }

    }, {
        "281": 281,
        "288": 288,
        "92": 92,
        "undefined": undefined
    }],
    30: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        var _monerojsUtil = require(281);
        var moneroUtil = _interopRequireWildcard(_monerojsUtil);
        var _moneroSimplewallet = require(274);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function start() {
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch, getState) {
                    const state = getState();
                    const {
                        meta
                    } = (0, _getReceiveAddress2.default)(state)('monero');
                    let accMonero = getState().accounts.monero;
                    let hdkey = accMonero.hdkey.derive(meta.path, '');
                    let spendPK = moneroUtil.crypto.reduceECKey(hdkey.privateKey);
                    let viewPK = moneroUtil.crypto.createECPrivateKey(spendPK);
                    _asyncToGenerator(function*() {
                        dispatch({
                            type: 'MONERO_SIMPLEWALLET_INIT'
                        });
                        yield(0, _moneroSimplewallet.ensureWallet)(spendPK, viewPK);
                        yield new Promise(function(resolve, reject) {
                            let emitter = (0, _moneroSimplewallet.refreshWallet)(spendPK, viewPK);
                            emitter.on('progress', function(current, total) {
                                dispatch({
                                    type: 'MONERO_SIMPLEWALLET_REFRESH_PROGRESS',
                                    payload: {
                                        current,
                                        total
                                    }
                                });
                            });
                            emitter.on('error', reject);
                            emitter.on('exit', resolve);
                        });
                        yield new Promise(function(resolve, reject) {
                            let emitter = (0, _moneroSimplewallet.startRPC)(spendPK, viewPK);
                            emitter.on('ready', function() {
                                dispatch({
                                    type: 'MONERO_SIMPLEWALLET_STRATED',
                                    payload: emitter.rpcNetworkOptions
                                });
                                resolve();
                            });
                            emitter.on('error', reject);
                            emitter.on('exit', function(code, signal) {
                                reject(new Error(`simplewallet terminated with code: ${code}, signal: ${signal}`));
                            });
                        });
                    })().catch(function(err) {
                        dispatch({
                            type: 'MONERO_SIMPLEWALLET_FAIL',
                            payload: err
                        });
                        setTimeout(function() {
                            return start()(dispatch, getState);
                        }, 30000);
                    });
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

    }, {
        "274": 274,
        "281": 281,
        "92": 92
    }],
    31: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _cryptoTotal = require(100);
        var _cryptoTotal2 = _interopRequireDefault(_cryptoTotal);
        var _assetsDisabled = require(103);
        var _assetsDisabled2 = _interopRequireDefault(_assetsDisabled);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const balanceSelector = (0, _reselect.createSelector)(_cryptoTotal2.default, _.mapValues.convert({
            cap: false
        })((balance, assetName) => {
            if (['ripple'].includes(assetName)) {
                return balance.subtract(_assets2.default[assetName].accountReserve).clampLowerZero();
            }
            return balance;
        }));
        const checkAssets = (0, _reselect.createSelector)(balanceSelector, _assetsDisabled2.default, _.pipe([(balances, configAssetsDisabled) => {
            return asset => !balances[asset.name].isZero() && configAssetsDisabled[asset.name] !== false;
        }, _.filter(_.__, _.values(_assets2.default)), _.map(asset => _flux.actions.config.enableAsset(asset.name))]));

        function start() {
            return () => {
                _flux.store.subscribe(_.pipe(_flux.store.getState, checkAssets));
            };
        }

    }, {
        "100": 100,
        "103": 103,
        "184": 184,
        "257": 257,
        "undefined": undefined
    }],
    32: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMonitor = createMonitor;
        var _events = require('events');
        var _aureus = require(192);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _flux = require(257);
        var _util = require(264);
        var _accountState = require(7);
        var AccountStates = _interopRequireWildcard(_accountState);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const UPDATE_LOOP_INTERVAL_DEFAULT = (0, _ms2.default)('15s');

        function createMonitor(_ref) {
            let loadingWait = (() => {
                var _ref6 = _asyncToGenerator(function*(getState) {
                    function isLoadedCheck() {
                        const state = getState();
                        if (asset.isEthereumToken) return state.txLog[asset.name + 'Loaded'];
                        return state.accountStates[asset.name].loaded && state.txLog[asset.name + 'Loaded'];
                    }
                    if (isLoadedCheck()) return;
                    return new Promise(function(resolve) {
                        const unsubscribe = _flux.store.subscribe(function() {
                            if (!isLoadedCheck()) return;
                            unsubscribe();
                            resolve();
                        });
                    });
                });
                return function loadingWait(_x4) {
                    return _ref6.apply(this, arguments);
                };
            })();
            let {
                asset,
                getHistory,
                getNewAccountState
            } = _ref;
            const events = new _events.EventEmitter();
            const logger = (0, _logger2.default)('rend:monitors:' + asset.name);
            let isStarted = false;
            let updateLoopInterval = UPDATE_LOOP_INTERVAL_DEFAULT;
            let _updateTimeoutId;

            function toNumberUnit(value) {
                if ((0, _aureus.isNumberUnit)(value)) return value;
                return asset.currency.baseUnit(value).to(asset.displayUnit);
            }
            const update = (0, _makeConcurrent2.default)((() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState) {
                    let {
                        refresh = false
                    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    clearTimeout(_updateTimeoutId);
                    if (!isStarted && !refresh) return;
                    const newLogItems = [];
                    const [err] = yield(0, _aw2.default)(AccountStates[asset.name].runWithLock)(_asyncToGenerator(function*() {
                        const existedLogItems = [];
                        const _ref4 = yield getHistory({
                            getState,
                            refresh
                        }), {
                            history
                        } = _ref4, rest = _objectWithoutProperties(_ref4, ['history']);
                        const state = getState();
                        for (const item of history) {
                            const logItem = state.txLog[asset.name].get(item.txId);
                            if (logItem && !refresh) {
                                const existedLogItem = {
                                    txId: item.txId
                                };
                                if (item.confirmations !== undefined && item.confirmations !== logItem.confirmations) {
                                    existedLogItem.confirmations = item.confirmations;
                                }
                                if (item.error !== undefined && item.error !== logItem.error) {
                                    existedLogItem.error = item.error;
                                }
                                if (asset.name === 'ethereum' && item.feeAmount !== undefined) {
                                    if (logItem.feeAmount === undefined || !toNumberUnit(item.feeAmount).equals(logItem.feeAmount)) {
                                        existedLogItem.feeAmount = toNumberUnit(item.feeAmount);
                                    }
                                }
                                if (Object.keys(existedLogItem).length > 1) existedLogItems.push(existedLogItem);
                                continue;
                            }
                            const coinAmount = toNumberUnit(item.coinAmount);
                            const newLogItem = {
                                txId: item.txId,
                                coinAmount
                            };
                            if (item.error !== undefined) newLogItem.error = item.error;
                            if (item.confirmations !== undefined) newLogItem.confirmations = item.confirmations;
                            if (item.date !== undefined) newLogItem.date = item.date;
                            if (item.to !== undefined) {
                                newLogItem.coinAmount = coinAmount.negate();
                                newLogItem.feeAmount = toNumberUnit(item.feeAmount);
                                newLogItem.to = item.to;
                                if (item.token) newLogItem.token = item.token;
                            }
                            if (item.to === undefined && item.feeAmount) newLogItem.feeAmount = toNumberUnit(item.feeAmount);
                            newLogItems.push(newLogItem);
                        }
                        if (existedLogItems.length === 0 && newLogItems.length === 0) return;
                        const newAccountState = yield getNewAccountState(Object.assign({
                            getState
                        }, rest));
                        if (newAccountState) {
                            if (newAccountState.balance) newAccountState.balance = toNumberUnit(newAccountState.balance);
                            yield _flux.actions.accountStates[asset.name].update(newAccountState);
                        }
                        if (refresh) return;
                        if (existedLogItems.length > 0) yield _flux.actions.txLog.updateTxsProperties(asset, existedLogItems);
                        if (newLogItems.length > 0) yield _flux.actions.txLog.bulkWrite(asset, newLogItems);
                        const newReceivedTxs = newLogItems.filter(function(tx) {
                            return tx.to === undefined;
                        });
                        if (newReceivedTxs.length > 0) dispatch((0, _util.FSA)('TX_RECEIVE', {
                            asset,
                            txs: newReceivedTxs
                        }));
                        const confirmedReceivedTxs = existedLogItems.filter(function(tx) {
                            return tx.confirmations !== undefined;
                        }).map(function(_ref5) {
                            let {
                                txId
                            } = _ref5;
                            return state.txLog[asset.name].get(txId);
                        }).filter(function(tx) {
                            return tx.to === undefined;
                        });
                        if (confirmedReceivedTxs.length > 0) dispatch((0, _util.FSA)('TX_RECEIVE_CONFIRMED', {
                            asset,
                            txs: confirmedReceivedTxs
                        }));
                    }));
                    if (err) {
                        logger.error(err);
                        console.error(`${asset.name} monitor::getHistory() = ${err.message}`);
                        console.error(err.stack || err);
                    }
                    if (isStarted) _updateTimeoutId = setTimeout(update, updateLoopInterval, dispatch, getState);
                    if (refresh && !err) return {
                        txs: newLogItems.map(function(item) {
                            return Object.assign(item, {
                                coinName: asset.name
                            });
                        })
                    };
                });
                return function(_x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            })(), {
                concurrency: 1
            });
            return {
                events,
                setUpdateInterval(interval) {
                    updateLoopInterval = interval;
                },
                resetUpdateInterval() {
                    updateLoopInterval = UPDATE_LOOP_INTERVAL_DEFAULT;
                },
                start() {
                    return (() => {
                        var _ref7 = _asyncToGenerator(function*(dispatch, getState) {
                            yield loadingWait(getState);
                            isStarted = true;
                            setTimeout(update, 0, dispatch, getState);
                            events.emit('start');
                        });
                        return function(_x5, _x6) {
                            return _ref7.apply(this, arguments);
                        };
                    })();
                },
                update() {
                    return (() => {
                        var _ref8 = _asyncToGenerator(function*(dispatch, getState) {
                            if (isStarted) yield update(dispatch, getState);
                        });
                        return function(_x7, _x8) {
                            return _ref8.apply(this, arguments);
                        };
                    })();
                },
                refresh() {
                    return (() => {
                        var _ref9 = _asyncToGenerator(function*(dispatch, getState) {
                            return update(dispatch, getState, {
                                refresh: true
                            });
                        });
                        return function(_x9, _x10) {
                            return _ref9.apply(this, arguments);
                        };
                    })();
                }
            };
        }

    }, {
        "192": 192,
        "257": 257,
        "264": 264,
        "269": 269,
        "7": 7,
        "undefined": undefined
    }],
    33: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMonitor = createMonitor;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _delay2 = require('delay');
        var _delay3 = _interopRequireDefault(_delay2);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _ethereumjsUtil = require('ethereumjs-util');
        var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _appConfig = require(80);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _flux = require(257);
        var _util = require(264);
        var _accountState = require(7);
        var AccountStates = _interopRequireWildcard(_accountState);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _aureus = require(192);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const UPDATE_LOOP_INTERVAL_DEFAULT = (0, _ms2.default)('15s');
        const UPDATE_LOOP_INTERVAL = (0, _ms2.default)('300s');

        function createMonitor(_ref) {
            let updateFromExodus = (() => {
                var _ref2 = _asyncToGenerator(function*(refresh, state, newLogItems, existedLogItems) {
                    if (asset.name === 'ethereum' && _appConfig.ENV_DEV) console.log('ethereum: updateFromExodus');
                    const address = (0, _getReceiveAddress2.default)(state)(asset.name).toString().toLowerCase();
                    let startblock = refresh ? 0 : state.accountStates[asset.name].startblock;
                    let nonce = refresh ? 0 : state.accountStates[asset.name].nonce;

                    function getValue(asset, items) {
                        return items.reduce((amount, item) => {
                            if (item.from === address) amount = amount.subtract(asset.currency.baseUnit(item.value));
                            if (item.to === address) amount = amount.add(asset.currency.baseUnit(item.value));
                            return amount;
                        }, asset.currency.ZERO).to(asset.displayUnit);
                    }
                    const txlist = [];
                    while (true) {
                        const limit = 1000;
                        const txs = yield server.getHistory(address, {
                            startblock: startblock + 1,
                            limit
                        });
                        for (const tx of txs) {
                            const blockNumber = parseInt(tx.blockNumber, 16);
                            if (blockNumber > startblock) startblock = blockNumber;
                            txlist.push(tx);
                        }
                        if (txs.length < limit) break;
                        yield(0, _delay3.default)(1050);
                    }
                    for (const tx of txlist) {
                        const txnonce = parseInt(tx.nonce, 16) + 1;
                        if (tx.from === address && txnonce > nonce) nonce = txnonce;
                        const txerror = tx.error ? tx.error : tx.status === 0 ? 'Failed' : null;
                        const confirmations = tx.blockHash ? 1 : 0;
                        const feeAmountRaw = tx.gasPrice ? parseInt(tx.gasPrice, 16) * parseInt(tx.blockHash ? tx.gasUsed : tx.gas, 16) : 0;
                        const feeAmount = asset.currency.baseUnit(feeAmountRaw).to(asset.displayUnit);
                        const internal = lodash.get(tx, 'internal', []);
                        const isEthChanged = [tx, ...internal].some(function(item) {
                            return item.from === address || item.to === address;
                        });
                        if (isEthChanged) {
                            const coinAmount = getValue(asset, [tx, ...internal]);
                            const to = [tx.to, ...internal.map(function(item) {
                                return item.to;
                            })].find(function(to) {
                                return to !== address;
                            }) || address;
                            const item = {
                                txId: tx.hash
                            };
                            const logItem = state.txLog[asset.name].get(tx.hash);
                            if (logItem && !refresh) {
                                if (!logItem.coinAmount.equals(coinAmount)) item.coinAmount = coinAmount;
                                if (logItem.confirmations !== confirmations) item.confirmations = confirmations;
                                if (txerror && logItem.error !== txerror) item.error = txerror;
                                if (tx.from === address) {
                                    if (!logItem.feeAmount.equals(feeAmount)) item.feeAmount = feeAmount;
                                    if (logItem.to !== to) item.to = to;
                                }
                                if (Object.keys(item).length > 1) existedLogItems[asset.name].push(item);
                            } else {
                                const date = tx.blockHash ? new Date(parseInt(tx.timestamp, 16) * 1000) : new Date();
                                Object.assign(item, {
                                    date,
                                    coinAmount,
                                    confirmations
                                });
                                if (txerror) item.error = txerror;
                                if (tx.from === address) {
                                    Object.assign(item, {
                                        feeAmount,
                                        to
                                    });
                                    const token = tokenByAddress[tx.to];
                                    if (token) item.token = token.name;
                                }
                                newLogItems[asset.name].push(item);
                            }
                        }
                        const erc20 = lodash.get(tx, 'erc20', []);
                        for (const [tokenAddress, items] of lodash.entries(lodash.groupBy(erc20, 'address'))) {
                            const token = tokenByAddress[tokenAddress];
                            if (!token) continue;
                            const isOurTransfers = items.some(function(item) {
                                return item.from === address || item.to === address;
                            });
                            if (!isOurTransfers) continue;
                            const coinAmount = getValue(token, lodash.filter(items, {
                                events: confirmations > 0
                            }));
                            const to = items.map(function(item) {
                                return item.to;
                            }).find(function(to) {
                                return to !== address;
                            }) || address;
                            const item = {
                                txId: tx.hash
                            };
                            const logItem = state.txLog[token.name].get(tx.hash);
                            if (logItem && !refresh) {
                                if (!logItem.coinAmount.equals(coinAmount)) item.coinAmount = coinAmount;
                                if (logItem.confirmations !== confirmations) item.confirmations = confirmations;
                                if (txerror && logItem.error !== txerror) item.error = txerror;
                                if (tx.from === address) {
                                    if (!logItem.feeAmount.equals(feeAmount)) item.feeAmount = feeAmount;
                                    if (logItem.to !== to) item.to = to;
                                }
                                if (Object.keys(item).length > 1) existedLogItems[token.name].push(item);
                            } else {
                                const date = tx.blockHash ? new Date(parseInt(tx.timestamp, 16) * 1000) : new Date();
                                Object.assign(item, {
                                    date,
                                    coinAmount,
                                    confirmations
                                });
                                if (txerror) item.error = txerror;
                                if (tx.from === address) Object.assign(item, {
                                    feeAmount,
                                    to
                                });
                                newLogItems[token.name].push(item);
                            }
                        }
                    }
                    return {
                        startblock,
                        nonce
                    };
                });
                return function updateFromExodus(_x, _x2, _x3, _x4) {
                    return _ref2.apply(this, arguments);
                };
            })();
            let updateFromEtherscan = (() => {
                var _ref3 = _asyncToGenerator(function*(refresh, state, newLogItems, existedLogItems) {
                    let base = (() => {
                        var _ref4 = _asyncToGenerator(function*(asset, getHistory) {
                            function toNumberUnit(value) {
                                if ((0, _aureus.isNumberUnit)(value)) return value;
                                return asset.currency.baseUnit(value).to(asset.displayUnit);
                            }
                            const history = yield getHistory();
                            for (const item of history) {
                                const logItem = state.txLog[asset.name].get(item.txId);
                                if (logItem && !refresh) {
                                    const existedLogItem = {
                                        txId: item.txId
                                    };
                                    if (item.confirmations !== undefined && item.confirmations !== logItem.confirmations) {
                                        existedLogItem.confirmations = item.confirmations;
                                    }
                                    if (item.error !== undefined && item.error !== logItem.error) {
                                        existedLogItem.error = item.error;
                                    }
                                    if (asset.name === 'ethereum' && item.feeAmount !== undefined) {
                                        if (logItem.feeAmount === undefined || !toNumberUnit(item.feeAmount).equals(logItem.feeAmount)) {
                                            existedLogItem.feeAmount = toNumberUnit(item.feeAmount);
                                        }
                                    }
                                    if (Object.keys(existedLogItem).length > 1) existedLogItems[asset.name].push(existedLogItem);
                                    continue;
                                }
                                const coinAmount = toNumberUnit(item.coinAmount);
                                const newLogItem = {
                                    txId: item.txId,
                                    coinAmount
                                };
                                if (item.error !== undefined) newLogItem.error = item.error;
                                if (item.confirmations !== undefined) newLogItem.confirmations = item.confirmations;
                                if (item.date !== undefined) newLogItem.date = item.date;
                                if (item.to !== undefined) {
                                    newLogItem.coinAmount = coinAmount.negate();
                                    newLogItem.feeAmount = toNumberUnit(item.feeAmount);
                                    newLogItem.to = item.to;
                                    if (item.token) newLogItem.token = item.token;
                                }
                                if (item.to === undefined && item.feeAmount) newLogItem.feeAmount = toNumberUnit(item.feeAmount);
                                newLogItems[asset.name].push(newLogItem);
                            }
                        });
                        return function base(_x9, _x10) {
                            return _ref4.apply(this, arguments);
                        };
                    })();
                    let ethGetHistory = (() => {
                        var _ref5 = _asyncToGenerator(function*() {
                            const [txlist, txlistinternal] = yield Promise.all([etherscan.fetchTxlist(address, {
                                startblock: stateStartblock
                            }), etherscan.fetchTxlistinternal(address, {
                                startblock: stateStartblock
                            })]);
                            const history = txlist.concat(lodash.differenceBy(txlistinternal, txlist, 'hash')).map(function(tx) {
                                const blockNumber = parseInt(tx.blockNumber, 10);
                                if (blockNumber > startblock) startblock = blockNumber;
                                const item = {
                                    txId: tx.hash,
                                    coinAmount: tx.value,
                                    confirmations: 1,
                                    date: new Date(parseInt(tx.timeStamp, 10) * 1000)
                                };
                                if (tx.isError === '1' || tx.txreceipt_status === '0') item.error = 'Failed';
                                if (tx.from.toLowerCase() === address) {
                                    const newNonce = parseInt(tx.nonce, 10) + 1;
                                    if (newNonce > nonce) nonce = newNonce;
                                    item.feeAmount = parseInt(tx.gasUsed, 10) * parseInt(tx.gasPrice, 10);
                                    item.to = tx.to.toLowerCase();
                                    if (item.to === address) item.coinAmount = '0';
                                    (function() {
                                        const data = _ethereumjsUtil2.default.toBuffer(tx.input);
                                        for (const token of tokens) {
                                            if (!token.contract.transfer.test(data)) continue;
                                            const addresses = [token.contract.addresses.current].concat(lodash.get(token.contract.addresses, 'previous', []));
                                            for (const address of addresses) {
                                                if (item.to === address.toLowerCase()) {
                                                    item.to = token.contract.transfer.parse(data).to.toLowerCase();
                                                    item.token = token.name;
                                                    return;
                                                }
                                            }
                                        }
                                    })();
                                }
                                const internaltxs = lodash.filter(txlistinternal, {
                                    hash: tx.hash
                                });
                                if (lodash.filter(txlist, {
                                        hash: tx.hash
                                    }).length === 1 && internaltxs.length > 0) {
                                    let diff = _assets2.default.ethereum.currency.ZERO;
                                    for (const internaltx of internaltxs) {
                                        if (internaltx.from.toLowerCase() === address) diff = diff.subtract(_assets2.default.ethereum.currency.baseUnit(internaltx.value));
                                        if (internaltx.to.toLowerCase() === address) diff = diff.add(_assets2.default.ethereum.currency.baseUnit(internaltx.value));
                                    }
                                    const value = _assets2.default.ethereum.currency.baseUnit(item.coinAmount);
                                    if (item.to) item.coinAmount = diff.subtract(value).negate().to(_assets2.default.ethereum.displayUnit);
                                    else item.coinAmount = diff.add(value).to(_assets2.default.ethereum.displayUnit);
                                }
                                return item;
                            });
                            for (const item of history) {
                                if (item.feeAmount) continue;
                                const tx = lodash.find(txlist, {
                                    hash: item.txId
                                });
                                if (tx && tx.from.toLowerCase() === address) {
                                    const newNonce = parseInt(tx.nonce, 10) + 1;
                                    if (newNonce > nonce) nonce = newNonce;
                                    item.feeAmount = parseInt(tx.gasUsed, 10) * parseInt(tx.gasPrice, 10);
                                }
                            }
                            return history;
                        });
                        return function ethGetHistory() {
                            return _ref5.apply(this, arguments);
                        };
                    })();
                    if (asset.name === 'ethereum' && _appConfig.ENV_DEV) console.log('ethereum: updateFromEtherscan');
                    const address = (0, _getReceiveAddress2.default)(state)(asset.name).toString().toLowerCase();
                    let startblock = refresh ? 0 : state.accountStates[asset.name].startblock;
                    const stateStartblock = startblock;
                    let nonce = refresh ? 0 : state.accountStates[asset.name].nonce;

                    function createTokenGetHistory(asset) {
                        return _asyncToGenerator(function*() {
                            const contractAddress = asset.contract.addresses.current.toLowerCase();
                            const getLogsOptions = {
                                topic0: asset.contract.transfer.EVENT_ID,
                                topic1: '0x000000000000000000000000' + address.slice(2),
                                topic2: '0x000000000000000000000000' + address.slice(2),
                                topic0_1_opr: 'and',
                                topic0_2_opr: 'and',
                                topic1_2_opr: 'or'
                            };
                            const txlist = yield etherscan.getLogs(contractAddress, stateStartblock, 'latest', getLogsOptions);
                            if (stateStartblock === 0 && asset.contract.addresses.previous) {
                                yield Promise.all(asset.contract.addresses.previous.map((() => {
                                    var _ref7 = _asyncToGenerator(function*(address) {
                                        const lst = yield etherscan.getLogs(address.toLowerCase(), 0, 'latest', getLogsOptions);
                                        txlist.push(...lst);
                                    });
                                    return function(_x11) {
                                        return _ref7.apply(this, arguments);
                                    };
                                })()));
                            }
                            const history = Object.values(lodash.groupBy(txlist, 'transactionHash')).map(function(txs) {
                                const blockNumber = parseInt(txs[0].blockNumber, 16);
                                if (blockNumber > startblock) startblock = blockNumber;
                                txs = txs.filter(function(tx) {
                                    return tx.topics[0] === asset.contract.transfer.EVENT_ID;
                                });
                                const coinAmount = txs.reduce(function(total, tx) {
                                    if ('0x' + tx.topics[1].slice(-40).toLowerCase() === address) total = total.subtract(asset.currency.baseUnit(tx.data));
                                    if ('0x' + tx.topics[2].slice(-40).toLowerCase() === address) total = total.add(asset.currency.baseUnit(tx.data));
                                    return total;
                                }, asset.currency.ZERO).to(asset.displayUnit);
                                if (coinAmount.isZero()) return;
                                const item = {
                                    txId: txs[0].transactionHash,
                                    confirmations: 1,
                                    coinAmount,
                                    date: new Date(parseInt(txs[0].timeStamp, 16) * 1000)
                                };
                                if (item.coinAmount.isNegative) {
                                    item.coinAmount = item.coinAmount.negate();
                                    const rawFee = parseInt(txs[0].gasUsed, 16) * parseInt(txs[0].gasPrice, 16);
                                    item.feeAmount = _assets2.default.ethereum.currency.baseUnit(rawFee).to(_assets2.default.ethereum.displayUnit);
                                    item.to = txs.map(function(tx) {
                                        return '0x' + tx.topics[2].slice(-40).toLowerCase();
                                    }).find(function(to) {
                                        return to !== address;
                                    });
                                }
                                return item;
                            }).filter(function(item) {
                                return item;
                            });
                            return history;
                        });
                    }
                    yield Promise.all([base(asset, ethGetHistory), ...tokens.map((() => {
                        var _ref8 = _asyncToGenerator(function*(token, i) {
                            yield(0, _delay3.default)((i + 1) * 100);
                            return base(token, createTokenGetHistory(token));
                        });
                        return function(_x12, _x13) {
                            return _ref8.apply(this, arguments);
                        };
                    })())]);
                    return {
                        startblock,
                        nonce
                    };
                });
                return function updateFromEtherscan(_x5, _x6, _x7, _x8) {
                    return _ref3.apply(this, arguments);
                };
            })();
            let loadingWait = (() => {
                var _ref12 = _asyncToGenerator(function*(getState) {
                    function isLoadedCheck() {
                        const state = getState();
                        return state.accountStates[asset.name].loaded && state.txLog[asset.name + 'Loaded'] && tokens.every(token => state.txLog[token.name + 'Loaded']);
                    }
                    if (isLoadedCheck()) return;
                    return new Promise(function(resolve) {
                        const unsubscribe = _flux.store.subscribe(function() {
                            if (!isLoadedCheck()) return;
                            unsubscribe();
                            resolve();
                        });
                    });
                });
                return function loadingWait(_x17) {
                    return _ref12.apply(this, arguments);
                };
            })();
            let {
                asset,
                tokens,
                server
            } = _ref;
            const logger = (0, _logger2.default)('rend:monitors:' + asset.name);
            const assetByName = lodash.keyBy([asset, ...tokens], 'name');
            const tokenByAddress = tokens.reduce((obj, token) => {
                const addresses = [token.contract.addresses.current, ...(token.contract.addresses.previous || [])];
                for (const address of addresses) obj[address.toLowerCase()] = token;
                return obj;
            }, {});
            let isStarted = false;
            let updateLoopInterval = UPDATE_LOOP_INTERVAL_DEFAULT;
            let _updateTimeoutId;

            function isEtherscanUpdate(state) {
                const remoteConfigMonitor = lodash.get(state.remoteConfig, 'assets.ethereum.monitor', 'new');
                return asset.name === 'ethereum' && remoteConfigMonitor === 'old';
            }
            const update = (0, _makeConcurrent2.default)((() => {
                var _ref9 = _asyncToGenerator(function*(dispatch, getState) {
                    let {
                        refresh = false
                    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    clearTimeout(_updateTimeoutId);
                    if (!isStarted && !refresh) return;
                    const newLogItems = tokens.reduce(function(obj, token) {
                        return Object.assign(obj, {
                            [token.name]: []
                        });
                    }, {
                        [asset.name]: []
                    });
                    const [err] = yield(0, _aw2.default)(AccountStates[asset.name].runWithLock)(_asyncToGenerator(function*() {
                        const state = getState();
                        const existedLogItems = lodash.cloneDeep(newLogItems);
                        const _update = isEtherscanUpdate(state) ? updateFromEtherscan : updateFromExodus;
                        const {
                            startblock,
                            nonce
                        } = yield _update(refresh, state, newLogItems, existedLogItems);
                        if (state.accountStates[asset.name].startblock !== startblock || state.accountStates[asset.name].nonce !== nonce) {
                            yield _flux.actions.accountStates[asset.name].update({
                                startblock,
                                nonce
                            });
                        }
                        if (refresh) return;
                        for (const [assetName, items] of lodash.entries(existedLogItems)) {
                            if (items.length === 0) continue;
                            yield _flux.actions.txLog.updateTxsProperties(assetByName[assetName], items);
                            const confirmedReceivedTxs = items.filter(function(item) {
                                return item.confirmations !== undefined;
                            }).map(function(_ref11) {
                                let {
                                    txId
                                } = _ref11;
                                return state.txLog[assetName].get(txId);
                            }).filter(function(tx) {
                                return tx.to === undefined;
                            });
                            if (confirmedReceivedTxs.length === 0) continue;
                            dispatch((0, _util.FSA)('TX_RECEIVE_CONFIRMED', {
                                asset: assetByName[assetName],
                                txs: confirmedReceivedTxs
                            }));
                        }
                        for (const [assetName, items] of lodash.entries(newLogItems)) {
                            if (items.length === 0) continue;
                            yield _flux.actions.txLog.bulkWrite(assetByName[assetName], items);
                            const newReceivedTxs = items.filter(function(item) {
                                return item.to === undefined;
                            });
                            if (newReceivedTxs.length === 0) continue;
                            dispatch((0, _util.FSA)('TX_RECEIVE', {
                                asset: assetByName[assetName],
                                txs: newReceivedTxs
                            }));
                        }
                    }));
                    if (err) {
                        logger.error(err);
                        console.error(err.stack || err);
                    }
                    const _delay = isEtherscanUpdate(getState()) ? UPDATE_LOOP_INTERVAL_DEFAULT : updateLoopInterval;
                    if (isStarted) _updateTimeoutId = setTimeout(update, _delay, dispatch, getState);
                    if (refresh && !err) {
                        for (const [coinName, items] of lodash.entries(newLogItems)) {
                            items.forEach(function(item) {
                                return Object.assign(item, {
                                    coinName
                                });
                            });
                        }
                        return newLogItems;
                    }
                });
                return function(_x15, _x16) {
                    return _ref9.apply(this, arguments);
                };
            })(), {
                concurrency: 1
            });
            return {
                start() {
                    return (() => {
                        var _ref13 = _asyncToGenerator(function*(dispatch, getState) {
                            yield loadingWait(getState);
                            isStarted = true;
                            setTimeout(update, 0, dispatch, getState);
                            const address = (0, _getReceiveAddress2.default)(getState())(asset.name).toString().toLowerCase();
                            server.ws.watch(address);
                            server.ws.events.on('open', function() {
                                updateLoopInterval = UPDATE_LOOP_INTERVAL;
                            });
                            server.ws.events.on(`address-${address}`, function() {
                                return update(dispatch, getState);
                            });
                            server.ws.events.on('close', function() {
                                updateLoopInterval = UPDATE_LOOP_INTERVAL_DEFAULT;
                            });
                            server.ws.events.on('close', function() {
                                return update(dispatch, getState);
                            });
                            server.ws.open();
                        });
                        return function(_x18, _x19) {
                            return _ref13.apply(this, arguments);
                        };
                    })();
                },
                update() {
                    return (() => {
                        var _ref14 = _asyncToGenerator(function*(dispatch, getState) {
                            if (isStarted) yield update(dispatch, getState);
                        });
                        return function(_x20, _x21) {
                            return _ref14.apply(this, arguments);
                        };
                    })();
                },
                refresh() {
                    return (() => {
                        var _ref15 = _asyncToGenerator(function*(dispatch, getState) {
                            return update(dispatch, getState, {
                                refresh: true
                            });
                        });
                        return function(_x22, _x23) {
                            return _ref15.apply(this, arguments);
                        };
                    })();
                }
            };
        }

    }, {
        "184": 184,
        "192": 192,
        "223": 223,
        "257": 257,
        "264": 264,
        "269": 269,
        "7": 7,
        "80": 80,
        "92": 92,
        "undefined": undefined
    }],
    34: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _util = require(264);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _ws = require(266);
        var _ws2 = _interopRequireDefault(_ws);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function start() {
            return (dispatch, getState) => {
                console.log('BCASH MONITOR STARTED');
                let addressSet = _addressSet2.default.EMPTY;
                const w = (0, _reduxWatch2.default)(() => (0, _getRecvExchAddresses2.default)(getState())('bcash'));
                _flux.store.subscribe(w(newAddressSet => {
                    addressSet = newAddressSet;
                }));
                let insightWS = null;
                _flux.store.subscribe(_.pipe([_flux.store.getState, (0, _reselect.createSelector)(_.get('insightServers'), insightServers => {
                    const url = insightServers.bcash.ws;
                    if (insightWS === null || insightWS.url !== url) reconnect(url);
                })]));

                function reconnect(url) {
                    if (insightWS !== null) insightWS.disconnect();
                    insightWS = new _ws2.default(url);
                    insightWS.connect({
                        secure: false,
                        transports: ['websocket']
                    }).on('tx', data => {
                        if (!data.vout) return;
                        const txId = data.txid;
                        const utxoArr = [];
                        data.vout.forEach((vout, i) => {
                            for (const address of Array.from(addressSet)) {
                                if (!vout[address]) continue;
                                utxoArr.push({
                                    txId: data.txid,
                                    address: addressSet.get(address),
                                    vout: i,
                                    script: null,
                                    value: _assets2.default.bcash.currency.baseUnit(vout[address])
                                });
                            }
                        });
                        if (utxoArr.length === 0) return;
                        const state = getState();
                        const getFiat = (0, _getValue2.default)(state);
                        const currentUtxos = state.utxos.bcash;
                        console.log(`INS: BCASH tx detected: ${txId}`);
                        if (state.txLog.bcash.has(txId)) return console.log(`INS: already have: ${txId}`);
                        const utxos = _utxoCollection2.default.fromArray(utxoArr, {
                            currency: _assets2.default.bcash.currency
                        });
                        const newUtxos = currentUtxos.union(utxos);
                        if (newUtxos.difference(currentUtxos).isEmpty()) return;
                        dispatch({
                            type: 'NETWORK_UTXOS_RECEIVE',
                            payload: {
                                utxos,
                                asset: 'bcash'
                            }
                        });
                        dispatch((0, _util.FSA)('TX_RECEIVE', {
                            asset: _assets2.default.bcash,
                            txs: [{
                                coinAmount: utxos.value
                            }]
                        }));
                        const utxoAddrs = utxos.addresses.map(addr => addressSet.get(addr));
                        _flux.actions.txLog.write(_assets2.default.bcash, {
                            txId,
                            coinAmount: utxos.value,
                            fiatAmount: getFiat(utxos.value),
                            addresses: utxoAddrs
                        });
                    });
                }
            };
        }

    }, {
        "121": 121,
        "184": 184,
        "257": 257,
        "264": 264,
        "266": 266,
        "81": 81,
        "89": 89,
        "94": 94,
        "undefined": undefined
    }],
    35: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = undefined;
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _insightApiClient = require(265);
        var _insightApiClient2 = _interopRequireDefault(_insightApiClient);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _lodash = require('lodash');
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _util = require(264);
        var _flux = require(257);
        var _util2 = require(87);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const totalTime = (0, _ms2.default)('5m');
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_BITCOIN_START', _start);

        function _start(dispatch, getState) {
            let checkTx = (() => {
                var _ref = _asyncToGenerator(function*() {
                    const insightServer = _flux.store.getState().insightServers.bitcoin.api;
                    const insight = new _insightApiClient2.default(insightServer);
                    clearTimeout(checkTxTimeoutId);
                    if (isRunning) return;
                    isRunning = true;
                    const txsToCheck = unconfirmedOrUnacceptedTxs(getState().txLog.bitcoin);
                    const recvTxs = (0, _util2.sortByDesc)(isRecvTxs(txsToCheck));
                    console.log(`RUNNING CHECK BTC TX RECV CHECK ${recvTxs.length}:`);
                    for (let tx of recvTxs) {
                        const [, txStatus] = yield(0, _aw2.default)(insight.fetchTx, {
                            context: insight
                        })(tx.txId);
                        console.log(`BTC TX CHECK: ${tx.txId}: ${tx.coinAmount.toString()}`);
                        console.dir(txStatus);
                        if ((0, _lodash.get)(txStatus, 'confirmations', tx.confirmations) !== tx.confirmations) {
                            _flux.actions.txLog.updateTxsProperties(_assets2.default.bitcoin, [{
                                txId: tx.txId,
                                confirmations: txStatus.confirmations
                            }]);
                            dispatch((0, _util.FSA)('UTXOS_UPDATE_CONFIRMATIONS', {
                                asset: 'bitcoin',
                                txs: [{
                                    txId: tx.txId,
                                    confirmations: txStatus.confirmations
                                }]
                            }));
                            if (tx.to === undefined) dispatch((0, _util.FSA)('TX_RECEIVE_CONFIRMED', {
                                asset: _assets2.default.bitcoin,
                                txs: [tx]
                            }));
                        }
                        yield(0, _delay2.default)((0, _ms2.default)('10s'));
                    }
                    const sentTxs = (0, _util2.sortByDesc)(isSentTxs(txsToCheck));
                    console.log(`RUNNING CHECK BTC TX SENT CHECK ${sentTxs.length}:`);
                    for (let tx of sentTxs) {
                        const [, txStatus] = yield(0, _aw2.default)(insight.fetchTx, {
                            context: insight
                        })(tx.txId);
                        console.log(`BTC TX CHECK: ${tx.txId}: ${tx.coinAmount.toString()}`);
                        console.dir(txStatus);
                        if ((0, _lodash.get)(txStatus, 'confirmations', tx.confirmations) !== tx.confirmations) {
                            dispatch((0, _util.FSA)('TX_LOG_UPDATE_TXS_PROPERTIES', {
                                asset: 'bitcoin',
                                items: [{
                                    txId: tx.txId,
                                    confirmations: txStatus.confirmations
                                }]
                            }));
                            dispatch((0, _util.FSA)('UTXOS_UPDATE_CONFIRMATIONS', {
                                asset: 'bitcoin',
                                txs: [{
                                    txId: tx.txId,
                                    confirmations: txStatus.confirmations
                                }]
                            }));
                        }
                        yield(0, _delay2.default)((0, _ms2.default)('10s'));
                    }
                    isRunning = false;
                    checkTxTimeoutId = runIt();
                });
                return function checkTx() {
                    return _ref.apply(this, arguments);
                };
            })();
            let isRunning = false;
            let checkTxTimeoutId;
            const runIt = () => setTimeout(() => {
                checkTx().then(() => {}).catch(err => console.error(`BTC TX MONITOR ERR ${err}`));
            }, totalTime);
            checkTx();
            checkTxTimeoutId = runIt();
        }

        function unconfirmedOrUnacceptedTxs(txs) {
            return Array.from(txs).filter(tx => tx.confirmations === -1 || tx.confirmations === 0);
        }

        function isRecvTxs(txs) {
            console.log('RECV TXS');
            console.dir(txs);
            return Array.from(txs).filter(tx => tx.received);
        }

        function isSentTxs(txs) {
            return Array.from(txs).filter(tx => tx.sent);
        }

    }, {
        "184": 184,
        "257": 257,
        "264": 264,
        "265": 265,
        "288": 288,
        "87": 87,
        "undefined": undefined
    }],
    36: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = undefined;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _ws = require(266);
        var _ws2 = _interopRequireDefault(_ws);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _flux = require(257);
        var _util = require(264);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_DASH_UTXO_START', _start);

        function _start(dispatch, getState) {
            const state = getState();
            const addressSet = (0, _getRecvExchAddresses2.default)(state)(_assets2.default.dash.name);
            const addrs = Array.from(addressSet);
            let insightWS = null;
            _flux.store.subscribe(_.pipe([_flux.store.getState, (0, _reselect.createSelector)(_.get('insightServers'), insightServers => {
                const url = insightServers.dash.ws;
                if (insightWS === null || insightWS.url !== url) reconnect(url);
            })]));

            function reconnect(url) {
                if (insightWS !== null) insightWS.disconnect();
                insightWS = new _ws2.default(url);
                insightWS.connect().on('tx', data => {
                    const txId = data.txid;
                    const utxoArr = [];
                    data.vout.forEach((vout, i) => {
                        addrs.forEach(addr => {
                            if (!vout[addr]) return;
                            const value = vout[addr];
                            utxoArr.push({
                                txId: data.txid,
                                address: addressSet.get(addr),
                                vout: i,
                                script: null,
                                value: _assets2.default.dash.currency.baseUnit(value)
                            });
                        });
                    });
                    if (utxoArr.length === 0) return;
                    const state = getState();
                    const getFiat = (0, _getValue2.default)(state);
                    const currentUtxos = state.utxos.dash;
                    const currentTxs = state.txLog.dash;
                    console.log(`INS: DASH tx detected: ${txId}`);
                    if (currentTxs.has(txId)) return console.log(`INS: already have: ${txId}`);
                    const utxos = _utxoCollection2.default.fromArray(utxoArr, {
                        currency: _assets2.default.dash.currency
                    });
                    const newUtxos = currentUtxos.union(utxos);
                    if (newUtxos.difference(currentUtxos).isEmpty()) return;
                    dispatch({
                        type: 'NETWORK_UTXOS_RECEIVE',
                        payload: {
                            utxos,
                            asset: 'dash'
                        }
                    });
                    dispatch((0, _util.FSA)('TX_RECEIVE', {
                        asset: _assets2.default.dash,
                        txs: [{
                            coinAmount: utxos.value
                        }]
                    }));
                    const utxoAddrs = utxos.addresses.map(addr => addressSet.get(addr));
                    _flux.actions.txLog.write(_assets2.default.dash, {
                        txId,
                        coinAmount: utxos.value,
                        fiatAmount: getFiat(utxos.value),
                        addresses: utxoAddrs
                    });
                });
            }
        }

    }, {
        "121": 121,
        "184": 184,
        "257": 257,
        "264": 264,
        "266": 266,
        "288": 288,
        "89": 89,
        "94": 94,
        "undefined": undefined
    }],
    37: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _util = require(264);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _ws = require(266);
        var _ws2 = _interopRequireDefault(_ws);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function start() {
            return (dispatch, getState) => {
                let addressSet = _addressSet2.default.EMPTY;
                const w = (0, _reduxWatch2.default)(() => (0, _getRecvExchAddresses2.default)(getState())('decred'));
                _flux.store.subscribe(w(newAddressSet => {
                    addressSet = newAddressSet;
                }));
                let insightWS = null;
                _flux.store.subscribe(_.pipe([_flux.store.getState, (0, _reselect.createSelector)(_.get('insightServers'), insightServers => {
                    const url = insightServers.decred.ws;
                    if (insightWS === null || insightWS.url !== url) reconnect(url);
                })]));

                function reconnect(url) {
                    if (insightWS !== null) insightWS.disconnect();
                    insightWS = new _ws2.default(url);
                    insightWS.connect({
                        secure: true,
                        transports: ['websocket']
                    }).on('tx', data => {
                        if (!data.vout) return;
                        const txId = data.txid;
                        const utxoArr = [];
                        data.vout.forEach((vout, i) => {
                            for (const address of Array.from(addressSet)) {
                                if (!vout[address]) continue;
                                utxoArr.push({
                                    txId: data.txid,
                                    address: addressSet.get(address),
                                    vout: i,
                                    script: null,
                                    value: _assets2.default.decred.currency.baseUnit(vout[address])
                                });
                            }
                        });
                        if (utxoArr.length === 0) return;
                        const state = getState();
                        const getFiat = (0, _getValue2.default)(state);
                        const currentUtxos = state.utxos.decred;
                        console.log(`INS: DECRED tx detected: ${txId}`);
                        if (state.txLog.decred.has(txId)) return console.log(`INS: already have: ${txId}`);
                        const utxos = _utxoCollection2.default.fromArray(utxoArr, {
                            currency: _assets2.default.decred.currency
                        });
                        const newUtxos = currentUtxos.union(utxos);
                        if (newUtxos.difference(currentUtxos).isEmpty()) return;
                        dispatch({
                            type: 'NETWORK_UTXOS_RECEIVE',
                            payload: {
                                utxos,
                                asset: 'decred'
                            }
                        });
                        dispatch((0, _util.FSA)('TX_RECEIVE', {
                            asset: _assets2.default.decred,
                            txs: [{
                                coinAmount: utxos.value
                            }]
                        }));
                        const utxoAddrs = utxos.addresses.map(addr => addressSet.get(addr));
                        _flux.actions.txLog.write(_assets2.default.decred, {
                            txId,
                            coinAmount: utxos.value,
                            fiatAmount: getFiat(utxos.value),
                            addresses: utxoAddrs
                        });
                    });
                }
            };
        }

    }, {
        "121": 121,
        "184": 184,
        "257": 257,
        "264": 264,
        "266": 266,
        "81": 81,
        "89": 89,
        "94": 94,
        "undefined": undefined
    }],
    38: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusEthereumServer = require(229);
        var _base_ethereum = require(33);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const tokens = Object.values(_assets2.default).filter(asset => asset.isEthereumToken);
        exports.default = (0, _base_ethereum.createMonitor)({
            asset: _assets2.default.ethereum,
            tokens,
            server: _exodusEthereumServer.eth
        });

    }, {
        "184": 184,
        "229": 229,
        "33": 33
    }],
    39: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusEthereumServer = require(229);
        var _base_ethereum = require(33);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _base_ethereum.createMonitor)({
            asset: _assets2.default.ethereumclassic,
            tokens: [],
            server: _exodusEthereumServer.etc
        });

    }, {
        "184": 184,
        "229": 229,
        "33": 33
    }],
    40: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.refresh = exports.update = exports.start = undefined;
        let getHistory = (() => {
            var _ref2 = _asyncToGenerator(function*(_ref) {
                let {
                    getState,
                    refresh
                } = _ref;
                const state = getState();
                const address = (0, _getReceiveAddress2.default)(state)('factom').toString();
                let startblock = refresh ? 0 : state.accountStates.factom.startblock;
                const txlist = yield _exodusFactomServer2.default.getHistory(address, {
                    startblock
                });
                const history = txlist.map(function(_ref3) {
                    let {
                        blockNumber,
                        txid,
                        tx
                    } = _ref3;
                    if (blockNumber && blockNumber > startblock) startblock = blockNumber;
                    const item = {
                        txId: txid,
                        confirmations: blockNumber === undefined ? 0 : 1,
                        date: new Date(tx.timestamp)
                    };
                    const addressInputs = lodash.filter(tx.inputs, {
                        address
                    });
                    const addressOutputs = lodash.filter(tx.outputs, {
                        address
                    });
                    if (addressInputs.length === 0 && addressOutputs.length > 0) {
                        item.coinAmount = lodash.sumBy(addressOutputs, 'value');
                    }
                    if (addressInputs.length > 0) {
                        item.coinAmount = lodash.sumBy(addressInputs, 'value');
                        if (addressOutputs.length > 0) item.coinAmount -= lodash.sumBy(addressOutputs, 'value');
                        if (item.coinAmount >= 0) {
                            item.to = lodash.map([...tx.outputs, ...tx.outECs], 'address').find(function(x) {
                                return x !== address;
                            }) || address;
                            item.feeAmount = lodash.sumBy(tx.inputs, 'value') - lodash.sumBy([...tx.outputs, ...tx.outECs], 'value');
                            item.coinAmount -= item.feeAmount;
                            if (item.coinAmount < 0) {
                                item.feeAmount += item.coinAmount;
                                item.coinAmount = 0;
                            }
                        } else {
                            item.coinAmount = -item.coinAmount;
                        }
                    }
                    return item;
                });
                return {
                    history,
                    startblock
                };
            });
            return function getHistory(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        let getNewAccountState = (() => {
            var _ref5 = _asyncToGenerator(function*(_ref4) {
                let {
                    getState,
                    startblock
                } = _ref4;
                return {
                    startblock
                };
            });
            return function getNewAccountState(_x2) {
                return _ref5.apply(this, arguments);
            };
        })();
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusFactomServer = require(231);
        var _exodusFactomServer2 = _interopRequireDefault(_exodusFactomServer);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _base = require(32);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const monitor = (0, _base.createMonitor)({
            asset: _assets2.default.factom,
            getHistory,
            getNewAccountState
        });
        const start = exports.start = monitor.start;
        const update = exports.update = monitor.update;
        const refresh = exports.refresh = monitor.refresh;
        monitor.events.on('start', () => {
            const update = () => monitor.update()(_flux.store.dispatch, _flux.store.getState);
            const address = (0, _getReceiveAddress2.default)(_flux.store.getState())('factom').toString();
            _exodusFactomServer2.default.ws.events.on('open', () => monitor.setUpdateInterval((0, _ms2.default)('60s')));
            _exodusFactomServer2.default.ws.events.on(`address-${address}`, update);
            _exodusFactomServer2.default.ws.events.on('close', monitor.resetUpdateInterval);
            _exodusFactomServer2.default.ws.events.on('close', update);
            _exodusFactomServer2.default.ws.watch(address);
            _exodusFactomServer2.default.ws.open();
        });

    }, {
        "184": 184,
        "231": 231,
        "257": 257,
        "32": 32,
        "92": 92,
        "undefined": undefined
    }],
    41: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _bcash2 = require(34);
        var _bcash = _interopRequireWildcard(_bcash2);
        var _bitcoin2 = require(35);
        var _bitcoin = _interopRequireWildcard(_bitcoin2);
        var _dash2 = require(36);
        var _dash = _interopRequireWildcard(_dash2);
        var _decred2 = require(37);
        var _decred = _interopRequireWildcard(_decred2);
        var _ethereum2 = require(38);
        var _ethereum3 = _interopRequireDefault(_ethereum2);
        var _ethereumclassic2 = require(39);
        var _ethereumclassic3 = _interopRequireDefault(_ethereumclassic2);
        var _factom2 = require(40);
        var _factom = _interopRequireWildcard(_factom2);
        var _monero2 = require(42);
        var _monero = _interopRequireWildcard(_monero2);
        var _omniProperty = require(43);
        var _omniProperty2 = _interopRequireDefault(_omniProperty);
        var _ripple2 = require(44);
        var _ripple = _interopRequireWildcard(_ripple2);
        var _zcash2 = require(45);
        var _zcash = _interopRequireWildcard(_zcash2);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = {
            bcash: _bcash,
            bitcoin: _bitcoin,
            dash: _dash,
            decred: _decred,
            ethereum: _ethereum3.default,
            ethereumclassic: _ethereumclassic3.default,
            factom: _factom,
            monero: _monero,
            ripple: _ripple,
            tether: (0, _omniProperty2.default)(_assets2.default.tether),
            zcash: _zcash
        };

    }, {
        "184": 184,
        "34": 34,
        "35": 35,
        "36": 36,
        "37": 37,
        "38": 38,
        "39": 39,
        "40": 40,
        "42": 42,
        "43": 43,
        "44": 44,
        "45": 45
    }],
    42: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = undefined;
        var _moneroSimplewallet = require(274);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const logger = (0, _logger2.default)('rend:monitors:monero');
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_MONERO_START', _start);

        function _start(dispatch, getState) {
            let fetchNewBalance = (() => {
                var _ref = _asyncToGenerator(function*(networkOptions) {
                    let data = yield(0, _moneroSimplewallet.walletRPC)(networkOptions, 'getbalance');
                    return {
                        balance: _assets2.default.monero.currency.atomic(data.unlocked_balance),
                        totalBalance: _assets2.default.monero.currency.atomic(data.balance)
                    };
                });
                return function fetchNewBalance(_x) {
                    return _ref.apply(this, arguments);
                };
            })();
            const ZERO_VALUE = _assets2.default.monero.currency.atomic(0);
            const ZERO_BALANCE = {
                balance: ZERO_VALUE,
                totalBalance: ZERO_VALUE
            };
            (() => {
                var _ref2 = _asyncToGenerator(function*() {
                    try {
                        let networkOptions = getState().moneroSimplewallet.rpcNetworkOptions;
                        if (!networkOptions) return;
                        let data = yield fetchNewBalance(networkOptions);
                        let accState = getState().accountStates.monero;
                        if (accState.balance && accState.balance.equals(data.balance) && accState.totalBalance.equals(data.totalBalance)) return;
                        _flux.actions.accountStates.monero.update({
                            balance: data.balance,
                            totalBalance: data.totalBalance
                        });
                    } catch (err) {
                        if (err.code !== 'ECONNREFUSED') return logger.error(err);
                        _flux.actions.accountStates.monero.update(ZERO_BALANCE);
                        dispatch({
                            type: 'MONERO_SIMPLEWALLET_FAIL',
                            payload: err
                        });
                        _flux.actions.moneroSimplewallet.start();
                    } finally {
                        setTimeout(update, 250);
                    }
                });

                function update() {
                    return _ref2.apply(this, arguments);
                }
                return update;
            })()();
        }

    }, {
        "184": 184,
        "257": 257,
        "269": 269,
        "274": 274,
        "288": 288
    }],
    43: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(asset) {
            let getHistory = (() => {
                var _ref2 = _asyncToGenerator(function*(_ref) {
                    let {
                        getState,
                        refresh
                    } = _ref;
                    const address = (0, _getReceiveAddress2.default)(getState())(asset.name).toString().toLowerCase();
                    const hashlist = yield omniexplorer.getHistory(address);
                    const history = yield Promise.all(hashlist.map((() => {
                        var _ref3 = _asyncToGenerator(function*(txId) {
                            const info = yield omniexplorer.getTx(txId);
                            if (info.propertyid !== asset.omniPropertyId) return;
                            const item = {
                                txId,
                                coinAmount: asset.currency.defaultUnit(info.amount).to(asset.displayUnit),
                                confirmations: info.confirmations
                            };
                            if (info.blocktime) item.date = new Date(info.blocktime * 1000);
                            if (info.sendingaddress === address) {
                                item.feeAmount = _assets2.default.bitcoin.currency.defaultUnit(info.fee).to(_assets2.default.bitcoin.displayUnit);
                                item.to = info.referenceaddress;
                            }
                            return item;
                        });
                        return function(_x2) {
                            return _ref3.apply(this, arguments);
                        };
                    })()));
                    return {
                        history: history.filter(function(x) {
                            return x;
                        })
                    };
                });
                return function getHistory(_x) {
                    return _ref2.apply(this, arguments);
                };
            })();
            let getNewAccountState = (() => {
                var _ref5 = _asyncToGenerator(function*(_ref4) {
                    let {
                        getState
                    } = _ref4;
                    const address = (0, _getReceiveAddress2.default)(getState())(asset.name).toString().toLowerCase();
                    const value = yield omniexplorer.getBalance(asset.omniPropertyId, address);
                    const balance = asset.currency.defaultUnit(value).to(asset.displayUnit);
                    return {
                        balance
                    };
                });
                return function getNewAccountState(_x3) {
                    return _ref5.apply(this, arguments);
                };
            })();
            const monitor = (0, _base.createMonitor)({
                asset,
                getHistory,
                getNewAccountState
            });
            return lodash.pick(monitor, ['start', 'update', 'refresh']);
        };
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _omniexplorer = require(284);
        var omniexplorer = _interopRequireWildcard(_omniexplorer);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _base = require(32);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "184": 184,
        "284": 284,
        "32": 32,
        "92": 92,
        "undefined": undefined
    }],
    44: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.refresh = exports.update = exports.start = undefined;
        let getHistory = (() => {
            var _ref2 = _asyncToGenerator(function*(_ref) {
                let {
                    getState,
                    refresh
                } = _ref;
                const state = getState();
                const address = (0, _getReceiveAddress2.default)(state)('ripple').toString();
                const history = [];
                let fromLedger = refresh ? 0 : state.accountStates.ripple.startblock;
                const txlist = yield(0, _rippleApi.getTransactions)(address, {
                    fromLedger
                });
                for (const _ref3 of txlist) {
                    const {
                        tx,
                        meta
                    } = _ref3;
                    fromLedger = Math.max(fromLedger, tx.inLedger);
                    if (tx.TransactionType !== 'Payment') continue;
                    let coinAmount;
                    for (const node of meta.AffectedNodes) {
                        if (lodash.get(node, 'CreatedNode.NewFields.Account') === address) {
                            coinAmount = _assets2.default.ripple.currency.baseUnit(node.CreatedNode.NewFields.Balance).to(_assets2.default.ripple.displayUnit);
                        }
                        if (lodash.get(node, 'ModifiedNode.FinalFields.Account') === address) {
                            const pBalance = _assets2.default.ripple.currency.baseUnit(node.ModifiedNode.PreviousFields.Balance);
                            const fBalance = _assets2.default.ripple.currency.baseUnit(node.ModifiedNode.FinalFields.Balance);
                            coinAmount = pBalance.subtract(fBalance).abs().to(_assets2.default.ripple.displayUnit);
                        }
                        if (coinAmount !== undefined) break;
                    }
                    if (coinAmount === undefined) continue;
                    const item = {
                        txId: tx.hash,
                        coinAmount,
                        confirmations: 1,
                        date: new Date((0, _util.rippleToUnixTimestamp)(tx.date))
                    };
                    if (meta.TransactionResult !== 'tesSUCCESS') {
                        item.error = meta.TransactionResult.slice(3).replace(/_/g, ' ');
                    }
                    if (tx.Account === address) {
                        item.feeAmount = _assets2.default.ripple.currency.baseUnit(tx.Fee).to(_assets2.default.ripple.displayUnit);
                        item.coinAmount = item.coinAmount.subtract(item.feeAmount);
                        item.to = tx.Destination;
                    }
                    history.push(item);
                }
                return {
                    history,
                    fromLedger
                };
            });
            return function getHistory(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        let getNewAccountState = (() => {
            var _ref5 = _asyncToGenerator(function*(_ref4) {
                let {
                    getState,
                    fromLedger
                } = _ref4;
                const address = (0, _getReceiveAddress2.default)(getState())('ripple').toString();
                const info = yield(0, _rippleApi.getAccountInfo)(address);
                return {
                    startblock: fromLedger,
                    sequence: info.sequence
                };
            });
            return function getNewAccountState(_x2) {
                return _ref5.apply(this, arguments);
            };
        })();
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _rippleApi = require(290);
        var _util = require(295);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _base = require(32);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const monitor = (0, _base.createMonitor)({
            asset: _assets2.default.ripple,
            getHistory,
            getNewAccountState
        });
        const start = exports.start = monitor.start;
        const update = exports.update = monitor.update;
        const refresh = exports.refresh = monitor.refresh;

    }, {
        "184": 184,
        "290": 290,
        "295": 295,
        "32": 32,
        "92": 92,
        "undefined": undefined
    }],
    45: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _util = require(264);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _ws = require(266);
        var _ws2 = _interopRequireDefault(_ws);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function start() {
            return (dispatch, getState) => {
                let addressSet = _addressSet2.default.EMPTY;
                const w = (0, _reduxWatch2.default)(() => (0, _getRecvExchAddresses2.default)(getState())('zcash'));
                _flux.store.subscribe(w(newAddressSet => {
                    addressSet = newAddressSet;
                }));
                let insightWS = null;
                _flux.store.subscribe(_.pipe([_flux.store.getState, (0, _reselect.createSelector)(_.get('insightServers'), insightServers => {
                    const url = insightServers.zcash.ws;
                    if (insightWS === null || insightWS.url !== url) reconnect(url);
                })]));

                function reconnect(url) {
                    if (insightWS !== null) insightWS.disconnect();
                    insightWS = new _ws2.default(url);
                    insightWS.connect().on('tx', data => {
                        const utxosArray = lodash.get(data, 'vout', []).map((vout, index) => {
                            for (const address of addressSet) {
                                if (!vout[address]) continue;
                                return {
                                    txId: data.txid,
                                    address: addressSet.get(address),
                                    vout: index,
                                    script: null,
                                    value: _assets2.default.zcash.currency.baseUnit(vout[address])
                                };
                            }
                        }).filter(lodash.identity);
                        if (utxosArray.length === 0) return;
                        const state = getState();
                        const getFiat = (0, _getValue2.default)(state);
                        const currentUtxos = state.utxos.zcash;
                        console.log(`INS: Zcash tx detected: ${data.txid}`);
                        if (state.txLog.zcash.has(data.txid)) return console.log(`INS: already have: ${data.txid}`);
                        const utxos = _utxoCollection2.default.fromArray(utxosArray, {
                            currency: _assets2.default.zcash.currency
                        });
                        const newUtxos = currentUtxos.union(utxos);
                        if (newUtxos.difference(currentUtxos).isEmpty()) return;
                        dispatch({
                            type: 'NETWORK_UTXOS_RECEIVE',
                            payload: {
                                utxos,
                                asset: 'zcash'
                            }
                        });
                        dispatch((0, _util.FSA)('TX_RECEIVE', {
                            asset: _assets2.default.zcash,
                            txs: [{
                                coinAmount: utxos.value
                            }]
                        }));
                        const utxoAddrs = utxos.addresses.map(addr => addressSet.get(addr));
                        _flux.actions.txLog.write(_assets2.default.zcash, {
                            txId: data.txid,
                            coinAmount: utxos.value,
                            fiatAmount: getFiat(utxos.value),
                            addresses: utxoAddrs
                        });
                    });
                }
            };
        }

    }, {
        "121": 121,
        "184": 184,
        "257": 257,
        "264": 264,
        "266": 266,
        "81": 81,
        "89": 89,
        "94": 94,
        "undefined": undefined
    }],
    46: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let {
                asset,
                ws,
                getFee,
                setFee
            } = _ref;
            let storeUnsubscribe = null;
            let updateTimeoutId;
            const getRemoteConfigFee = (0, _reselect.createSelector)(_.get(`remoteConfig.assets.${asset.name}.fee`), fee => {
                return {
                    valid: fee !== undefined,
                    value: fee
                };
            });
            const update = (0, _makeConcurrent2.default)(_asyncToGenerator(function*() {
                clearTimeout(updateTimeoutId);
                if (storeUnsubscribe === null || getRemoteConfigFee(_flux.store.getState()).valid) return;
                try {
                    const fee = yield getFee();
                    if (storeUnsubscribe === null || getRemoteConfigFee(_flux.store.getState()).valid) return;
                    setFee(fee);
                    const delay = ws.isOpened() ? LOOP_INTERVAL_NORMAL_WS : LOOP_INTERVAL_NORMAL;
                    updateTimeoutId = setTimeout(update, delay);
                } catch (err) {
                    console.error(`${asset.properName} fee error: ${err.stack||err}`);
                    updateTimeoutId = setTimeout(update, LOOP_INTERVAL_FAIL);
                }
            }), {
                concurrency: 1
            });
            ws.events.on('open', update);
            ws.events.on('close', update);
            ws.events.on('fee', fee => {
                if (storeUnsubscribe === null || getRemoteConfigFee(_flux.store.getState()).valid) return;
                setFee(fee);
            });

            function start() {
                if (storeUnsubscribe !== null) return;

                function setOrUpdate(fee) {
                    if (fee.valid) setFee(fee.value);
                    else update();
                }
                const checkRemoteConfigFee = (0, _reselect.createSelector)(getRemoteConfigFee, setOrUpdate);
                storeUnsubscribe = _flux.store.subscribe(_.pipe(_flux.store.getState, checkRemoteConfigFee));
                setOrUpdate(getRemoteConfigFee(_flux.store.getState()));
            }

            function stop() {
                if (storeUnsubscribe === null) return;
                storeUnsubscribe();
                storeUnsubscribe = null;
            }
            return {
                start: () => () => start(),
                update: () => () => update(),
                stop: () => () => stop()
            };
        };
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _reselect = require('reselect');
        var _flux = require(257);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const LOOP_INTERVAL_NORMAL = (0, _ms2.default)('5m');
        const LOOP_INTERVAL_NORMAL_WS = (0, _ms2.default)('20m');
        const LOOP_INTERVAL_FAIL = (0, _ms2.default)('2m');

    }, {
        "257": 257,
        "undefined": undefined
    }],
    47: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require('events');
        var _bitcoinBestFee = require('bitcoin-best-fee');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _base = require(46);
        var _base2 = _interopRequireDefault(_base);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const MIN_FEE = 1e2;
        const MAX_FEE = 2e3;
        exports.default = (0, _base2.default)({
            asset: _assets2.default.bitcoin,
            ws: {
                isOpened: () => false,
                events: new _events.EventEmitter()
            },
            getFee() {
                return _asyncToGenerator(function*() {
                    const fee = yield(0, _bitcoinBestFee.fetchMean)();
                    const isValid = Number.isFinite(fee);
                    if (!isValid) throw new Error(`Invalid fee: ${fee}`);
                    if (fee < MIN_FEE) return MIN_FEE;
                    if (fee > MAX_FEE) return MAX_FEE;
                    return fee;
                })();
            },
            setFee(fee) {
                const feePerKB = Math.ceil(fee * 1000);
                if (!Number.isFinite(feePerKB)) return;
                _assets2.default.bitcoin.setFeePerKB(feePerKB);
            }
        });

    }, {
        "184": 184,
        "46": 46,
        "undefined": undefined
    }],
    48: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createETHMonitor = createETHMonitor;
        var _events = require('events');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusEthereumServer = require(229);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _base = require(46);
        var _base2 = _interopRequireDefault(_base);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const MIN_GASPRICE = 1e9;
        const MAX_GASPRICE = 250e9;
        const getGasPrice = (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.gasPrice, etherscan.gasPrice);
        exports.default = createETHMonitor(_assets2.default.ethereum, _exodusEthereumServer.eth.ws, getGasPrice, MIN_GASPRICE, MAX_GASPRICE);

        function transformRawGasPrice(gasPriceRaw) {
            const gasPrice = parseInt(gasPriceRaw, 16);
            const isValidPrice = typeof gasPrice === 'number' && isFinite(gasPrice) && gasPrice > 0;
            return [isValidPrice, gasPrice];
        }

        function createETHMonitor(asset, ws, getGasPrice, minGasPrice, maxGasPrice) {
            function adjustGasPrice(gasPrice) {
                if (gasPrice < minGasPrice) return minGasPrice;
                if (gasPrice > maxGasPrice) return maxGasPrice;
                return gasPrice;
            }
            const events = new _events.EventEmitter();
            ws.events.on('open', () => events.emit('open'));
            ws.events.on('close', () => events.emit('close'));
            ws.events.on('gasprice', gasPriceRaw => {
                const [isValidPrice, gasPrice] = transformRawGasPrice(gasPriceRaw);
                if (!isValidPrice) return;
                events.emit('fee', adjustGasPrice(gasPrice));
            });
            return (0, _base2.default)({
                asset,
                ws: {
                    isOpened: ws.isOpened,
                    events
                },
                getFee() {
                    return _asyncToGenerator(function*() {
                        const gasPriceRaw = yield getGasPrice();
                        const [isValidPrice, gasPrice] = transformRawGasPrice(gasPriceRaw);
                        if (!isValidPrice) throw new Error(`Invalid gas price: ${gasPrice}`);
                        return adjustGasPrice(gasPrice);
                    })();
                },
                setFee: asset.setGasPrice
            });
        }

    }, {
        "184": 184,
        "223": 223,
        "229": 229,
        "46": 46,
        "undefined": undefined
    }],
    49: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusEthereumServer = require(229);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _ethereum = require(48);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const MIN_GASPRICE = 1e9;
        const MAX_GASPRICE = 250e9;
        const getGasPrice = (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.gasPrice, etcchain.gasPrice);
        exports.default = (0, _ethereum.createETHMonitor)(_assets2.default.ethereumclassic, _exodusEthereumServer.etc.ws, getGasPrice, MIN_GASPRICE, MAX_GASPRICE);

    }, {
        "184": 184,
        "221": 221,
        "229": 229,
        "48": 48
    }],
    50: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require('events');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _exodusFactomServer = require(231);
        var _exodusFactomServer2 = _interopRequireDefault(_exodusFactomServer);
        var _base = require(46);
        var _base2 = _interopRequireDefault(_base);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (0, _base2.default)({
            asset: _assets2.default.factom,
            ws: {
                isOpened: () => false,
                events: new _events.EventEmitter()
            },
            getFee() {
                return _asyncToGenerator(function*() {
                    const response = yield _exodusFactomServer2.default.getEntryCreditRate();
                    const ecrate = lodash.get(response, 'rate');
                    const isValidRate = Number.isFinite(ecrate) && ecrate > 0;
                    if (!isValidRate) throw new Error(`Invalid entry credit rate: ${ecrate}`);
                    return Math.ceil(ecrate * 1.1);
                })();
            },
            setFee: _assets2.default.factom.setNewECRate
        });

    }, {
        "184": 184,
        "231": 231,
        "46": 46,
        "undefined": undefined
    }],
    51: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ripple = exports.factom = exports.ethereumclassic = exports.ethereum = exports.bitcoin = undefined;
        var _bitcoin2 = require(47);
        var _bitcoin3 = _interopRequireDefault(_bitcoin2);
        var _ethereum2 = require(48);
        var _ethereum3 = _interopRequireDefault(_ethereum2);
        var _ethereumclassic2 = require(49);
        var _ethereumclassic3 = _interopRequireDefault(_ethereumclassic2);
        var _factom2 = require(50);
        var _factom3 = _interopRequireDefault(_factom2);
        var _ripple2 = require(52);
        var _ripple3 = _interopRequireDefault(_ripple2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const bitcoin = exports.bitcoin = _bitcoin3.default;
        const ethereum = exports.ethereum = _ethereum3.default;
        const ethereumclassic = exports.ethereumclassic = _ethereumclassic3.default;
        const factom = exports.factom = _factom3.default;
        const ripple = exports.ripple = _ripple3.default;

    }, {
        "47": 47,
        "48": 48,
        "49": 49,
        "50": 50,
        "52": 52
    }],
    52: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require('events');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _rippleApi = require(290);
        var _base = require(46);
        var _base2 = _interopRequireDefault(_base);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _base2.default)({
            asset: _assets2.default.ripple,
            ws: {
                isOpened: () => false,
                events: new _events.EventEmitter()
            },
            getFee: _rippleApi.getFee,
            setFee: _assets2.default.ripple.setFee
        });

    }, {
        "184": 184,
        "290": 290,
        "46": 46,
        "undefined": undefined
    }],
    53: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.status = exports.remoteConfig = exports.orders = exports.marketws = exports.market = exports.insightServers = exports.fee = exports.coins = exports.balances = undefined;
        var _balances2 = require(31);
        var _balances = _interopRequireWildcard(_balances2);
        var _coins2 = require(41);
        var _coins3 = _interopRequireDefault(_coins2);
        var _fee2 = require(51);
        var _fee = _interopRequireWildcard(_fee2);
        var _insightServers2 = require(54);
        var _insightServers = _interopRequireWildcard(_insightServers2);
        var _market2 = require(55);
        var _market = _interopRequireWildcard(_market2);
        var _marketws2 = require(56);
        var _marketws = _interopRequireWildcard(_marketws2);
        var _orders2 = require(57);
        var _orders = _interopRequireWildcard(_orders2);
        var _remoteConfig2 = require(58);
        var _remoteConfig = _interopRequireWildcard(_remoteConfig2);
        var _status2 = require(59);
        var _status = _interopRequireWildcard(_status2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const balances = exports.balances = _balances;
        const coins = exports.coins = _coins3.default;
        const fee = exports.fee = _fee;
        const insightServers = exports.insightServers = _insightServers;
        const market = exports.market = _market;
        const marketws = exports.marketws = _marketws;
        const orders = exports.orders = _orders;
        const remoteConfig = exports.remoteConfig = _remoteConfig;
        const status = exports.status = _status;

    }, {
        "31": 31,
        "41": 41,
        "51": 51,
        "54": 54,
        "55": 55,
        "56": 56,
        "57": 57,
        "58": 58,
        "59": 59
    }],
    54: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.defaultServers = undefined;
        exports.start = start;
        var _url = require('url');
        var _url2 = _interopRequireDefault(_url);
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _flux = require(257);
        var _util = require(264);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const defaultServers = exports.defaultServers = _.mapValues(_.map(expandServer), {
            bcashclaim: [{
                api: 'https://blockdozer.com/insight-api/'
            }],
            bcash: [{
                api: 'https://blockdozer.com/insight-api/'
            }],
            bitcoin: [{
                api: 'https://insight.bitpay.com/api/'
            }],
            dash: [{
                api: 'https://api.dash.org/insight-api/',
                ws: 'https://insight.dash.org/'
            }],
            decred: [{
                api: 'https://mainnet.decred.org/api/'
            }],
            litecoin: [{
                api: 'https://insight.litecore.io/api/'
            }],
            zcash: [{
                api: 'https://zchain.online/api/'
            }]
        });

        function expandServer(server) {
            const value = Object.assign({}, server);
            if (value.api && value.ws === undefined) {
                const obj = _url2.default.parse(value.api);
                obj.pathname = obj.pathname.split('/').slice(-1).join('/');
                value.ws = _url2.default.format(obj);
            }
            return value;
        }
        const remoteServersSelector = (0, _reselect.createSelector)(_.get('remoteConfig.assets'), _.pipe(_.mapValues(assetConfig => {
            const server = expandServer({
                api: _.pipe(_.get('insightServers'), _.first)(assetConfig),
                ws: _.pipe(_.get('insightServersWS'), _.first)(assetConfig)
            });
            if (server.api) return server;
        }), _.pickBy(_.identity)));
        const checkInsightServers = (0, _reselect.createSelector)(_.get('insightServers'), remoteServersSelector, (currentServers, remoteServers) => {
            const payload = Object.keys(currentServers).reduce((obj, assetName) => {
                const currentServer = currentServers[assetName];
                const newServer = remoteServers[assetName] || defaultServers[assetName][0];
                if (!_.isEqual(currentServer, newServer)) Object.assign(obj, {
                    [assetName]: newServer
                });
                return obj;
            }, {});
            if (Object.keys(payload).length > 0) _flux.store.dispatch((0, _util.FSA)('INSIGHT_SERVERS_SET', payload));
        });

        function start() {
            return () => {
                _flux.store.subscribe(_.pipe(_flux.store.getState, checkInsightServers));
            };
        }

    }, {
        "257": 257,
        "264": 264,
        "undefined": undefined
    }],
    55: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let _update = (() => {
            var _ref = _asyncToGenerator(function*(dispatch, getState) {
                const fiat = (0, _fiat2.default)(getState()).defaultUnit.unitName;
                yield Promise.all(Object.keys(_marketApi.MARKET_PROVIDERS).map((() => {
                    var _ref2 = _asyncToGenerator(function*(provider) {
                        try {
                            const prices = yield(0, _marketApi2.default)(provider, fiat);
                            dispatch((0, _util.FSA)('MARKET_PRICES_UPDATE', {
                                provider,
                                prices
                            }));
                        } catch (err) {
                            console.error(`Error fetching ${fiat} prices from ${provider}:`);
                            console.error(err);
                            dispatch((0, _util.FSA)('MARKET_PRICES_UPDATE', {
                                provider,
                                prices: {}
                            }));
                        }
                    });
                    return function(_x3) {
                        return _ref2.apply(this, arguments);
                    };
                })()));
            });
            return function _update(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.start = start;
        exports.update = update;
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _marketApi = require(270);
        var _marketApi2 = _interopRequireDefault(_marketApi);
        var _util = require(264);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function start() {
            return (dispatch, getState) => {;
                _asyncToGenerator(function*() {
                    while (true) {
                        try {
                            _update(dispatch, getState);
                        } catch (err) {}
                        yield(0, _delay2.default)((0, _ms2.default)('2m'));
                    }
                })();
            };
        }

        function update() {
            return _update;
        }

    }, {
        "104": 104,
        "264": 264,
        "270": 270,
        "undefined": undefined
    }],
    56: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = start;
        exports.update = update;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _socket = require('socket.io-client');
        var _socket2 = _interopRequireDefault(_socket);
        var _flux = require(257);
        var _util = require(264);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _appConfig = require(80);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const assetBySYM = lodash.keyBy(_assets2.default, 'displayUnit');
        const EMIT_INTERVAL = (0, _ms2.default)('30s');
        const subs = {
            fiat: null,
            reset() {
                this.fiat = null;
            },
            getList(fiat) {
                return Object.keys(assetBySYM).map(sym => `5~CCCAGG~${sym}~${fiat}`);
            },
            resubscribe() {
                const fiat = (0, _fiat2.default)(_flux.store.getState()).defaultUnit.unitName;
                if (this.fiat !== fiat) socket.emit('SubRemove', {
                    subs: this.getList(this.fiat)
                });
                socket.emit('SubAdd', {
                    subs: this.getList(fiat)
                });
                this.fiat = fiat;
            }
        };
        const socket = _socket2.default.connect('https://streamer.cryptocompare.com/', {
            autoConnect: false
        });
        socket.on('connect', () => subs.resubscribe());
        socket.on('disconnect', () => subs.reset());
        const wsdata = {
            prices: {},
            ts: Date.now()
        };
        socket.on('m', message => {
            const values = message.split('~');
            if (values[0] === '5' && parseInt(lodash.last(values), 16) & 0x1) {
                const [fsym, tsym] = [values[2], values[3]];
                lodash.set(wsdata.prices, [assetBySYM[fsym].name, tsym], parseFloat(values[5]));
                const diff = Date.now() - wsdata.ts;
                if (diff < EMIT_INTERVAL) return;
                const payload = {
                    provider: 'cryptocompare',
                    prices: wsdata.prices
                };
                _flux.store.dispatch((0, _util.FSA)('MARKET_PRICES_PAIRS_UPDATE', payload));
                wsdata.prices = {};
                wsdata.ts = Date.now();
            }
        });

        function start() {
            return () => {
                const enabled = _appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN;
                if (enabled) socket.connect();
            };
        }

        function update() {
            return () => {
                if (socket.readyState === 'open') subs.resubscribe();
            };
        }

    }, {
        "104": 104,
        "184": 184,
        "257": 257,
        "264": 264,
        "80": 80,
        "undefined": undefined
    }],
    57: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fetchOrderInfo = exports.start = undefined;
        let fetchOrderInfo = exports.fetchOrderInfo = (() => {
            var _ref2 = _asyncToGenerator(function*(orderId) {
                const url = `https://shapeshift.io/orderinfo/${orderId}`;
                const res = yield(0, _fetchival2.default)(url).get();
                return res;
            });
            return function fetchOrderInfo(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _flux = require(257);
        var _order = require(85);
        var _order2 = _interopRequireDefault(_order);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const TOTAL_TIME = (0, _ms2.default)('30s');
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_ORDERS_START', _start);

        function _start(dispatch, getState) {
            let checkOrders = (() => {
                var _ref = _asyncToGenerator(function*() {
                    clearTimeout(checkTimeoutId);
                    if (isRunning) return;
                    isRunning = true;
                    const incompleteOrders = getIncompleteOrders(getState().orders.data);
                    console.log(`RUNNING CHECK ORDER ${incompleteOrders.length}:`);
                    for (let o of incompleteOrders) {
                        const [err, orderInfo] = yield(0, _aw2.default)(fetchOrderInfo)(o.orderId);
                        if (err) {
                            console.error('ORDER CHECK fetch error');
                            console.error(err);
                            continue;
                        }
                        console.log(`ORDER CHECK: ${o.inspect()}`);
                        console.dir(orderInfo);
                        const updateOrder = {
                            orderId: o.orderId,
                            status: orderInfo.status
                        };
                        if (orderInfo.status === 'complete') {
                            updateOrder.toTxId = orderInfo.transaction;
                            const toTx = checkIfHaveToTx(getState(), Object.assign({}, o, updateOrder));
                            if (toTx) {
                                console.log('updated toTx:');
                                console.dir(toTx);
                                _flux.actions.txLog.update(o.toAsset, toTx);
                                updateOrder.status = 'complete-verified';
                            }
                        }
                        _flux.actions.orders.update(updateOrder);
                        yield(0, _delay2.default)((0, _ms2.default)('20s'));
                    }
                    const completeOrders = getCompleteOrders(getState().orders.data);
                    console.log(`COMPLETE ORDERS: ${completeOrders.length}`);
                    for (let o of completeOrders) {
                        const toTx = checkIfHaveToTx(getState(), o);
                        if (toTx) {
                            _flux.actions.txLog.update(o.toAsset, toTx);
                            _flux.actions.orders.update({
                                orderId: o.orderId,
                                status: 'complete-verified'
                            });
                        }
                    }
                    isRunning = false;
                    checkTimeoutId = runIt();
                });
                return function checkOrders() {
                    return _ref.apply(this, arguments);
                };
            })();
            let isRunning = false;
            let checkTimeoutId;
            const runIt = () => setTimeout(() => {
                checkOrders().then(() => {}).catch(err => {
                    console.error(`ORDER MONITOR ERR ${err}`);
                    console.error(err);
                    isRunning = false;
                });
            }, TOTAL_TIME);
            checkOrders();
            checkTimeoutId = runIt();
        }

        function getIncompleteOrders(orders) {
            const now = new Date();
            const limit = (0, _ms2.default)('1h');
            const completeStatuses = ['complete', 'expired', 'failed', 'complete-verified', 'resolved', 'contact_support'];
            return Array.from(orders).filter(order => {
                const isIncomplete = !completeStatuses.includes(order.status);
                if (isIncomplete) return true;
                return order.status === 'complete' && now - order.date > limit;
            });
        }

        function getCompleteOrders(orders) {
            return Array.from(orders).filter(o => o.status === 'complete');
        }

        function checkIfHaveToTx(state, order) {
            const {
                orderId,
                fromAsset,
                toAsset,
                fromTxId,
                toTxId
            } = order;
            if (!orderId || !toAsset || !fromAsset || !fromTxId || !toTxId) return null;
            const fromTxs = state.txLog[fromAsset];
            const toTxs = state.txLog[toAsset];
            let fromTx = fromTxs ? fromTxs.get(fromTxId) : null;
            let toTx = toTxs ? toTxs.get(toTxId) : null;
            if (!fromTx || !toTx) return null;
            toTx = toTx.update({
                exchange: true,
                fromCoin: {
                    coin: fromAsset,
                    coinAmount: fromTx.coinAmount.abs()
                },
                meta: {
                    shapeshiftOrderId: orderId
                }
            });
            return toTx;
        }

    }, {
        "257": 257,
        "288": 288,
        "85": 85,
        "undefined": undefined
    }],
    58: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = undefined;
        let fetchRemoteConfig = (() => {
            var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                let {
                    update
                } = _ref2;
                let [err, body] = yield(0, _aw2.default)((0, _fetchival2.default)(REMOTE_CONFIG_URL).get)();
                if (err) throw new Error('fetchRemoteConfig(): error => ' + err.message);
                if (typeof body !== 'object') throw new Error('fetchRemoteConfig(): invalid body');
                const {
                    data
                } = body;
                if (typeof data !== 'object') throw new Error('fetchRemoteConfig(): invalid body data');
                update(data);
            });
            return function fetchRemoteConfig(_x, _x2, _x3) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _appConfig = require(80);
        var appConfig = _interopRequireWildcard(_appConfig);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const REMOTE_CONFIG_URL = (0, _urlJoin2.default)(appConfig.EXODUS_SERVER, 'v1/config', `?version=${appConfig.PACKAGE.version}&build=${appConfig.ENV_BUILD_NAME||'exodus'}`);
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_REMOTE_CONFIG', _asyncToGenerator(function*() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            fetchRemoteConfig(...args);
            setInterval(function() {
                return fetchRemoteConfig(...args);
            }, (0, _ms2.default)('10m'));
        }));

    }, {
        "288": 288,
        "80": 80,
        "undefined": undefined
    }],
    59: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.start = undefined;
        let fetchStatus = (() => {
            var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                let {
                    update
                } = _ref2;
                let [err, body] = yield(0, _aw2.default)((0, _fetchival2.default)(SERVER1).get)();
                if (err) {
                    body = yield(0, _fetchival2.default)(SERVER2).get();
                }
                if (typeof body !== 'object') throw new Error('fetchStats(): invalid body');
                const {
                    data
                } = body;
                if (typeof data !== 'object') throw new Error('fetchStats(): invalid body data');
                update(data);
            });
            return function fetchStatus(_x, _x2, _x3) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _appConfig = require(80);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const SERVER1 = (0, _urlJoin2.default)(_appConfig.EXODUS_SERVER, 'v1/status');
        const SERVER2 = 'https://www.exodus.io/status/status.json';
        const start = exports.start = () => (0, _reduxAsyncAction2.default)('MONITOR_STATUS', _asyncToGenerator(function*() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            fetchStatus(...args);
            setInterval(function() {
                return fetchStatus(...args);
            }, (0, _ms2.default)('5m'));
        }));

    }, {
        "288": 288,
        "80": 80,
        "undefined": undefined
    }],
    60: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(coinName) {
            const asset = _assets2.default[coinName];
            const NETWORK_CONNECT = `NETWORK_${coinName.toUpperCase()}_CONNECT`;
            const NETWORK_PEER_CONNECT = `NETWORK_${coinName.toUpperCase()}_PEER_CONNECT`;
            const NETWORK_PEER_DISCONNECT = `NETWORK_${coinName.toUpperCase()}_PEER_DISCONNECT`;

            function setHandler(eventName, handler) {
                _electron.ipcRenderer.on(eventName, (event, _ref) => {
                    let {
                        payload
                    } = _ref;
                    if (payload.coin === coinName) handler(event, payload.data);
                });
            }

            function setHandlers(dispatch, getState) {
                let addressSet = _addressSet2.default.EMPTY;
                let hashAddrMap = new Map();
                const w = (0, _reduxWatch2.default)(() => (0, _getRecvExchAddresses2.default)(getState()));
                _flux.store.subscribe(w(getAddrSet => {
                    addressSet = getAddrSet(coinName);
                    hashAddrMap = new Map();
                    for (const addr of addressSet) {
                        const hash = _bs58check2.default.decode(String(addr)).slice(-20).toString('hex');
                        hashAddrMap.set(hash, addr);
                    }
                }));
                setHandler('network:p2p:peer:connect', (event, peerId) => {
                    dispatch({
                        type: NETWORK_PEER_CONNECT,
                        payload: peerId
                    });
                });
                setHandler('network:p2p:peer:disconnect', (event, peerId) => {
                    dispatch({
                        type: NETWORK_PEER_DISCONNECT,
                        payload: peerId
                    });
                });
                setHandler('network:p2p:tx', (event, _ref2) => {
                    let [txHex, blockIdHex] = _ref2;
                    const state = getState();
                    if (state.txSend.isSending) return;
                    const getFiat = (0, _getValue2.default)(state);
                    const currentUtxos = state.utxos[coinName];
                    const currentTxs = state.txLog[coinName];
                    Array.from(hashAddrMap.entries()).forEach((_ref3) => {
                        let [publicHashHex, addr] = _ref3;
                        if (!txHex.includes(publicHashHex)) return;
                        const rawTx = Buffer.from(txHex, 'hex');
                        let txId = new _bitcoreLib.Transaction(rawTx).id;
                        console.log(`${coinName} tx detected: ${txId}`);
                        if (currentTxs.has(txId)) return console.log(`already have: ${txId}`);
                        let omniAsset = null;
                        if (coinName === 'bitcoin') {
                            for (const asset of omniAssets) {
                                if (omniAsset === null && asset.simpleSend.parseTx(rawTx) !== null) omniAsset = asset;
                            }
                            if (omniAsset) {
                                setTimeout(() => _flux.actions.monitors.coins[omniAsset.name].update(), (0, _ms2.default)('10s'));
                            }
                        }
                        const utxos = (0, _extractUtxosFromTx2.default)(rawTx, addressSet, coinName);
                        const newUtxos = currentUtxos.union(utxos);
                        if (newUtxos.difference(currentUtxos).isEmpty()) return;
                        dispatch({
                            type: 'NETWORK_UTXOS_RECEIVE',
                            payload: {
                                utxos,
                                asset: coinName
                            }
                        });
                        if (omniAsset) return;
                        dispatch((0, _util.FSA)('TX_RECEIVE', {
                            asset: asset,
                            txs: [{
                                coinAmount: utxos.value
                            }]
                        }));
                        txId = utxos.txIds[0];
                        dispatch((0, _txLog.write)(asset, {
                            txId,
                            coinAmount: utxos.value,
                            fiatAmount: getFiat(utxos.value),
                            addresses: [addr],
                            confirmations: 0
                        }));
                    });
                });
            }
            return {
                connect: () => {
                    return (() => {
                        var _ref4 = _asyncToGenerator(function*(dispatch, getState) {
                            (0, _electronIpcBroadcast2.default)('network:p2p:connect', {
                                coin: coinName
                            });
                            setHandlers(dispatch, getState);
                            setTimeout(function() {
                                return dispatch({
                                    type: NETWORK_CONNECT
                                });
                            }, (0, _ms2.default)('60s'));
                        });
                        return function(_x, _x2) {
                            return _ref4.apply(this, arguments);
                        };
                    })();
                },
                sendTx: rawTx => {
                    return (() => {
                        var _ref5 = _asyncToGenerator(function*(dispatch, getState) {
                            (0, _electronIpcBroadcast2.default)('network:p2p:broadcast', {
                                coin: coinName,
                                data: rawTx.toString('hex')
                            });
                        });
                        return function(_x3, _x4) {
                            return _ref5.apply(this, arguments);
                        };
                    })();
                }
            };
        };
        var _bitcoreLib = require('bitcore-lib');
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _flux = require(257);
        var _util = require(264);
        var _electron = require('electron');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _electronIpcBroadcast = require('electron-ipc-broadcast');
        var _electronIpcBroadcast2 = _interopRequireDefault(_electronIpcBroadcast);
        var _extractUtxosFromTx = require(254);
        var _extractUtxosFromTx2 = _interopRequireDefault(_extractUtxosFromTx);
        var _txLog = require(70);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const omniAssets = Object.values(_assets2.default).filter(asset => asset.isOmniProperty);

    }, {
        "121": 121,
        "184": 184,
        "254": 254,
        "257": 257,
        "264": 264,
        "70": 70,
        "81": 81,
        "94": 94,
        "undefined": undefined
    }],
    61: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.litecoin = exports.dash = exports.bitcoin = undefined;
        var _bitcoinLike = require(60);
        var _bitcoinLike2 = _interopRequireDefault(_bitcoinLike);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const bitcoin = exports.bitcoin = (0, _bitcoinLike2.default)('bitcoin');
        const dash = exports.dash = (0, _bitcoinLike2.default)('dash');
        const litecoin = exports.litecoin = (0, _bitcoinLike2.default)('litecoin');

    }, {
        "60": 60
    }],
    62: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['NETWORK_UTXOS_RECEIVE', (() => {
                var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                    let {
                        type,
                        payload
                    } = _ref;
                    let {
                        dispatch,
                        preState,
                        postState
                    } = _ref2;
                    let asset = payload.asset;
                    let utxos = postState.utxos[asset];
                    if (!asset) return;
                    let utxosKey = walletKeys.accountStateMutations(asset, 'account0');
                    yield _instanceShim2.default.current.updateKeyData(utxosKey, utxos.toJSON());
                });
                return function(_x, _x2) {
                    return _ref3.apply(this, arguments);
                };
            })()]
        ];

    }, {
        "167": 167,
        "168": 168
    }],
    63: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.coins = undefined;
        var _coins2 = require(61);
        var _coins = _interopRequireWildcard(_coins2);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const coins = exports.coins = _coins;

    }, {
        "61": 61
    }],
    64: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let serialize = (() => {
            var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                let {
                    type,
                    payload
                } = _ref;
                let {
                    dispatch,
                    preState,
                    postState
                } = _ref2;
                if (!payload) return;
                let orders = postState.orders.data;
                try {
                    yield(0, _walletHelper2.default)(_instanceShim2.default.current).writeOrders(orders);
                } catch (err) {
                    console.error('Order write error: ' + err);
                }
            });
            return function serialize(_x, _x2) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _walletHelper = require(170);
        var _walletHelper2 = _interopRequireDefault(_walletHelper);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['ORDERS_UPDATE', serialize]
        ];

    }, {
        "167": 167,
        "170": 170
    }],
    65: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.load = undefined;
        var _asyncGenerator = function() {
            function AwaitValue(value) {
                this.value = value;
            }

            function AsyncGenerator(gen) {
                var front, back;

                function send(key, arg) {
                    return new Promise(function(resolve, reject) {
                        var request = {
                            key: key,
                            arg: arg,
                            resolve: resolve,
                            reject: reject,
                            next: null
                        };
                        if (back) {
                            back = back.next = request;
                        } else {
                            front = back = request;
                            resume(key, arg);
                        }
                    });
                }

                function resume(key, arg) {
                    try {
                        var result = gen[key](arg);
                        var value = result.value;
                        if (value instanceof AwaitValue) {
                            Promise.resolve(value.value).then(function(arg) {
                                resume("next", arg);
                            }, function(arg) {
                                resume("throw", arg);
                            });
                        } else {
                            settle(result.done ? "return" : "normal", result.value);
                        }
                    } catch (err) {
                        settle("throw", err);
                    }
                }

                function settle(type, value) {
                    switch (type) {
                        case "return":
                            front.resolve({
                                value: value,
                                done: true
                            });
                            break;
                        case "throw":
                            front.reject(value);
                            break;
                        default:
                            front.resolve({
                                value: value,
                                done: false
                            });
                            break;
                    }
                    front = front.next;
                    if (front) {
                        resume(front.key, front.arg);
                    } else {
                        back = null;
                    }
                }
                this._invoke = send;
                if (typeof gen.return !== "function") {
                    this.return = undefined;
                }
            }
            if (typeof Symbol === "function" && Symbol.asyncIterator) {
                AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                    return this;
                };
            }
            AsyncGenerator.prototype.next = function(arg) {
                return this._invoke("next", arg);
            };
            AsyncGenerator.prototype.throw = function(arg) {
                return this._invoke("throw", arg);
            };
            AsyncGenerator.prototype.return = function(arg) {
                return this._invoke("return", arg);
            };
            return {
                wrap: function(fn) {
                    return function() {
                        return new AsyncGenerator(fn.apply(this, arguments));
                    };
                },
                await: function(value) {
                    return new AwaitValue(value);
                }
            };
        }();
        let load = exports.load = (() => {
            var _ref = _asyncGenerator.wrap(function*() {
                let accountName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'account0';
                const {
                    init,
                    success
                } = (0, _util.createFSAA)('ORDERS_LOAD');
                yield init();
                const key = walletKeys.accountOrders(accountName);
                const orderArr = yield _asyncGenerator.await(_instanceShim2.default.current.fetchKeyData(key));
                const orders = _orderSet2.default.fromArray(orderArr);
                yield success(orders);
            });
            return function load() {
                return _ref.apply(this, arguments);
            };
        })();
        exports.update = update;
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _util = require(264);
        var _order = require(85);
        var _order2 = _interopRequireDefault(_order);
        var _orderSet = require(84);
        var _orderSet2 = _interopRequireDefault(_orderSet);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function update(order) {
            if (!(order instanceof _order2.default)) order = _order2.default.fromJSON(order);
            return (0, _util.FSA)('ORDERS_UPDATE', order);
        }

    }, {
        "167": 167,
        "168": 168,
        "264": 264,
        "84": 84,
        "85": 85
    }],
    66: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MESSAGE_TYPES = undefined;
        exports.connect = connect;
        exports.disconnect = disconnect;
        exports.send = send;
        var _util = require(264);
        var _twoOfTwo = require(319);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const MESSAGE_TYPES = exports.MESSAGE_TYPES = _twoOfTwo.connection.MESSAGE_TYPES;

        function receivedMessage(message) {
            return (0, _util.FSA)('TWO_OF_TWO_CONNECTION_RECEIVED_MESSAGE', {
                message
            });
        }

        function connect(connectionCode) {
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch, getState) {
                    const {
                        status
                    } = getState().twoOfTwo.connection;
                    if (status !== 'disconnected') {
                        return;
                    }
                    dispatch((0, _util.FSA)('TWO_OF_TWO_CONNECTION_CONNECT'));
                    yield(0, _delay2.default)((0, _ms2.default)('3s'));
                    dispatch((0, _util.FSA)('TWO_OF_TWO_CONNECTION_CONNECTED'));
                    yield(0, _delay2.default)((0, _ms2.default)('2s'));
                    const message = {
                        type: _twoOfTwo.connection.MESSAGE_TYPES.PRESENCE,
                        payload: {
                            presence: true
                        }
                    };
                    dispatch(receivedMessage(message));
                    _twoOfTwo.connection.receiveMessage(message, dispatch, getState);
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

        function disconnect() {
            return function(dispatch, getState) {
                dispatch((0, _util.FSA)('TWO_OF_TWO_CONNECTION_DISCONNECT'));
            };
        }

        function send(type, payload) {
            return (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState) {
                    let response = yield _twoOfTwo.connection.send({
                        type,
                        payload
                    });
                    if (type === _twoOfTwo.connection.MESSAGE_TYPES.PAIRING_DATA) {
                        response = JSON.parse('{"bcash":{"data":{"xPub":"xpub6CXM6DLwKNesX7TgJVTw8DfS3QNcZou46qF6KfM5mCJrW5bc2W2u61rsc6B1qKLb8qZqaZXWXcrq5SKEQc1hqo9tJJ4L3PLxBpcZ2TVQnPx"},"proof":{"signature":"bbeb8d38f15c9ec6324c3622134d2681e19f3d487412ce5670d945cb2b95517958a2decbd98533c3a902d2ac724bd85860341d17203e24ec9eca0cbd3659fef4"}},"bitcoin":{"data":{"xPub":"xpub6DQsRhUZQkidRJt8hs7KuWYWTP8NEmFD6zeLSDtmyAZxzHcPrFMcAikfykAy6CpfaaJYeosYDwf4nvDMM1XTyMKyQiX7XpdTbNCP94aTCVP"},"proof":{"signature":"62a55c2ef0a38c40ca6a117ce337d60139c60d3a92b60655637063c3ac785cca65ab286d0fc00a5716efbada49bfc5ecd17bd40fa7ad8809101431de649f5d5c"}},"dash":{"data":{"xPub":"xpub6CeHrsrgx2maD2pPVdvPs341hniwe14GbmExba6ZKjuxpFKumPjsx6KM1XyhXpLMDRsufcRX2HNUQGMdJ5VYr8vF1PuhUZ7E1UJzkt3BV6o"},"proof":{"signature":"4d3bbdd3e3066c302fe96b8e7038599d7153f922ad87bc1f7330325678e3ea1e6a5c6d43ed17287c0179553a224a346591da62517a9a7d93c72e20b0db06f67e"}},"ethereum":{"data":{"publicKey":"02c57e14ddf61f1194440a73930826181cdc772371e2bfb0899c064103e304c7b8"},"proof":{"signature":"a9508a93b6f96a71814cfef1d45bc8959a6aa870cf0a1276c063c696548d49a425545a64641f4141259b8ad1cb9744162b233d1aac559f435cfcd31580621736"}},"ethereumclassic":{"data":{"publicKey":"03dc7f5a0cc4ca01757740d02b759dd556dd555101419adc44763f1c29af56479b"},"proof":{"signature":"e453103b4e9ead5883cf1adce5d059c41744d792210f31714d4fe056802eb3674c1e16946804c1df657866f5774f200c4ef37141858c58182e901b7883319f3f"}},"litecoin":{"data":{"xPub":"xpub6CwavzNnQsiHbrv1GB6YsS1t9oK71VrgDf1PpMeC2Q6PuJQHTPY1AQhSxd3oUeMWvQKKuHVTa7Js8X1HyLBRjCLu4zwgtEAxa1iuxZ9Nadj"},"proof":{"signature":"6df6e428d4f57ed4cdd6ac5eed0b13d23b81650960a6f4f230fa10d351d40d492e37d874af8ded0ccdb0122bdac77df610b51156aec8a1e2ba95bc1289136eff"}}}');
                    } else if (type === _twoOfTwo.connection.MESSAGE_TYPES.PAIRING_DATA) {
                        response = {
                            success: true
                        };
                    }
                    return response;
                });
                return function(_x3, _x4) {
                    return _ref2.apply(this, arguments);
                };
            })();
        }

    }, {
        "264": 264,
        "319": 319,
        "undefined": undefined
    }],
    67: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.pair = exports.connection = undefined;
        var _connection = require(66);
        var connection = _interopRequireWildcard(_connection);
        var _pair = require(68);
        var pair = _interopRequireWildcard(_pair);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.connection = connection;
        exports.pair = pair;

    }, {
        "66": 66,
        "68": 68
    }],
    68: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let onPresence = (() => {
            var _ref4 = _asyncToGenerator(function*(dispatch, getState) {
                const desktopCode = getState().twoOfTwo.pair.desktopCode;
                dispatch((0, _util.FSA)('TWO_OF_TWO_PAIR_GENERATING_DESKTOP_PAIRING_DATA'));
                try {
                    const desktopPairingData = yield _twoOfTwo2.pairingData.generate(desktopCode);
                    const phonePairingData = yield dispatch(_twoOfTwo.connection.send(_twoOfTwo.connection.MESSAGE_TYPES.PAIRING_DATA, desktopPairingData));
                    dispatch((0, _util.FSA)('TWO_OF_TWO_PAIR_RECEIVED_PHONE_PAIRING_DATA', {
                        phonePairingData
                    }));
                    dispatch(showPhoneCodeInput());
                } catch (err) {
                    dispatch(fail(err));
                }
            });
            return function onPresence(_x5, _x6) {
                return _ref4.apply(this, arguments);
            };
        })();
        exports.load = load;
        exports.init = init;
        exports.submitPhoneCode = submitPhoneCode;
        exports.cancel = cancel;
        exports.receiveMessage = receiveMessage;
        var _util = require(264);
        var _twoOfTwo = require(67);
        var _twoOfTwo2 = require(319);

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function fail(err) {
            return (0, _util.FSA)('TWO_OF_TWO_PAIR_FAIL', err);
        }

        function showPhoneCodeInput(error) {
            return (0, _util.FSA)('TWO_OF_TWO_PAIR_SHOW_PHONE_CODE_INPUT', error);
        }

        function notStarted() {
            return (0, _util.FSA)('TWO_OF_TWO_PAIR_NOT_STARTED');
        }

        function load() {
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch, getState) {
                    const data = yield _twoOfTwo2.pairingData.get();
                    if (data) {
                        dispatch((0, _util.FSA)('TWO_OF_TWO_PAIR_DONE', {
                            connectionCode: data.connectionCode,
                            phonePairingData: data.pairingData
                        }));
                    } else {
                        dispatch(notStarted());
                    }
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

        function init(_ref2) {
            let {
                connectionCode,
                desktopCode
            } = _ref2;
            return (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState) {
                    dispatch((0, _util.FSA)('TWO_OF_TWO_PAIR_INIT', {
                        connectionCode,
                        desktopCode
                    }));
                    dispatch(_twoOfTwo.connection.connect(connectionCode));
                });
                return function(_x3, _x4) {
                    return _ref3.apply(this, arguments);
                };
            })();
        }

        function submitPhoneCode(phoneCode) {
            return (() => {
                var _ref5 = _asyncToGenerator(function*(dispatch, getState) {
                    const {
                        status,
                        phonePairingData,
                        connectionCode
                    } = getState().twoOfTwo.pair;
                    if (status !== 'code-input') {
                        dispatch(fail(new Error('Invalid status')));
                        return;
                    }
                    dispatch((0, _util.FSA)('TWO_OF_TWO_PAIR_CONFIRMING_PHONE_CODE'));
                    try {
                        _twoOfTwo2.pairingData.validate(phoneCode, phonePairingData);
                    } catch (error) {
                        dispatch(showPhoneCodeInput(error));
                        return;
                    }
                    try {
                        const response = yield dispatch(_twoOfTwo.connection.send(_twoOfTwo.connection.MESSAGE_TYPES.PHONE_CODE, phoneCode));
                        if (!response.success) {
                            dispatch(showPhoneCodeInput(new Error('Invalid phoneCode')));
                            return;
                        }
                        yield _twoOfTwo2.pairingData.pair(connectionCode, phonePairingData);
                        dispatch(load());
                        dispatch(_twoOfTwo.connection.disconnect());
                    } catch (err) {
                        dispatch(fail(err));
                    }
                });
                return function(_x7, _x8) {
                    return _ref5.apply(this, arguments);
                };
            })();
        }

        function cancel() {
            return (() => {
                var _ref6 = _asyncToGenerator(function*(dispatch, getState) {
                    dispatch(notStarted());
                    dispatch(_twoOfTwo.connection.disconnect());
                });
                return function(_x9, _x10) {
                    return _ref6.apply(this, arguments);
                };
            })();
        }

        function receiveMessage(message) {
            return (() => {
                var _ref7 = _asyncToGenerator(function*(dispatch, getState) {
                    switch (message.type) {
                        case _twoOfTwo.connection.MESSAGE_TYPES.PRESENCE:
                            return onPresence(dispatch, getState);
                    }
                });
                return function(_x11, _x12) {
                    return _ref7.apply(this, arguments);
                };
            })();
        }

    }, {
        "264": 264,
        "319": 319,
        "67": 67
    }],
    69: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let serializeTxLogItems = (() => {
            var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                let {
                    type,
                    payload
                } = _ref;
                let {
                    dispatch,
                    preState,
                    postState
                } = _ref2;
                if (!payload.asset) return;
                let txLogItems = postState.txLog[payload.asset];
                if (Array.isArray(txLogItems)) txLogItems = _txSet2.default.fromArray(txLogItems);
                try {
                    yield(0, _walletHelper2.default)(_instanceShim2.default.current).writeTxs(payload.asset, txLogItems);
                } catch (err) {
                    console.error('Log write error: ' + err);
                }
            });
            return function serializeTxLogItems(_x, _x2) {
                return _ref3.apply(this, arguments);
            };
        })();
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _walletHelper = require(170);
        var _walletHelper2 = _interopRequireDefault(_walletHelper);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['TX_LOG_BULK_WRITE', serializeTxLogItems],
            ['TX_LOG_WRITE', serializeTxLogItems],
            ['TX_LOG_UPDATE_TXS_PROPERTIES', serializeTxLogItems]
        ];

    }, {
        "167": 167,
        "170": 170,
        "86": 86
    }],
    70: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let tryFixEthereumLike = (() => {
            var _ref3 = _asyncToGenerator(function*(asset) {
                function isLoadedCheck() {
                    const state = _flux.store.getState();
                    return lodash.get(state, `accounts.${asset.name}`) && (asset.name !== 'ethereum' || lodash.get(state, `accountStates.${asset.name}.loaded`)) && lodash.get(state, `txLog.${asset.name}Loaded`);
                }
                while (!isLoadedCheck()) yield(0, _delay2.default)(25);
                const state = _flux.store.getState();
                const txs = state.txLog[asset.name];
                const address = (0, _getReceiveAddress2.default)(state)(asset.name).toString().toLowerCase();
                const needRefresh = Array.from(txs).some(function(tx) {
                    return tx.txId && tx.txId.slice(0, 2) !== '0x' || tx.to && tx.to.toLowerCase() === address;
                });
                if (needRefresh) _flux.actions.assetsRefresh.refresh(asset.name);
            });
            return function tryFixEthereumLike(_x4) {
                return _ref3.apply(this, arguments);
            };
        })();
        exports.update = update;
        exports.write = write;
        exports.bulkWrite = bulkWrite;
        exports.updateTxsProperties = updateTxsProperties;
        exports.load = load;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _util = require(264);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);
        var _tx = require(88);
        var _tx2 = _interopRequireDefault(_tx);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function update(asset, tx) {
            const txLog = _flux.store.getState().txLog[asset];
            const assetObj = _assets2.default[asset];
            if (!txLog.has(tx.txId)) return write(assetObj, tx);
            const curTx = txLog.get(tx.txId);
            const newTx = curTx.update(tx);
            return (0, _util.FSA)('TX_LOG_WRITE', {
                asset,
                tx: newTx
            });
        }

        function write(coin, tx, date) {
            const txLog = _flux.store.getState().txLog[coin.name];
            if (txLog.has(tx.txId) && txLog.get(tx.txId).exchange) {
                return {
                    type: 'TX_LOG_WRITE_ABORT',
                    payload: `Aready logged ${tx.txId}`
                };
            }
            tx = _tx2.default.fromJSON(Object.assign({}, tx, {
                date: date || new Date(),
                coinName: coin.name
            }));
            return {
                type: 'TX_LOG_WRITE',
                payload: {
                    asset: coin.name,
                    tx
                }
            };
        }

        function bulkWrite(asset, txs) {
            txs = txs.map(tx => {
                tx = _tx2.default.fromJSON(Object.assign({}, tx, {
                    date: tx.date || new Date(),
                    coinName: asset.name
                }));
                return tx;
            });
            return (0, _util.FSA)('TX_LOG_BULK_WRITE', {
                txs: _txSet2.default.fromArray(txs),
                asset: asset.name
            });
        }

        function updateTxsProperties(asset, items) {
            return (0, _util.FSA)('TX_LOG_UPDATE_TXS_PROPERTIES', {
                asset: asset.name,
                items
            });
        }

        function load(asset) {
            return (0, _reduxAsyncAction2.default)('TX_LOG_LOAD', (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                    let {
                        success,
                        fail
                    } = _ref;
                    const key = walletKeys.accountTxs(asset.name, 'account0');
                    const txItems = yield _instanceShim2.default.current.fetchKeyData(key);
                    const txset = _txSet2.default.fromArray(txItems);
                    success({
                        asset: asset.name,
                        txs: txset
                    });
                    if (asset.name === 'ethereum' || asset.isEthereumToken) setTimeout(tryFixEthereumLike, 10, asset);
                });
                return function(_x, _x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            })());
        }

    }, {
        "167": 167,
        "168": 168,
        "184": 184,
        "257": 257,
        "264": 264,
        "288": 288,
        "86": 86,
        "88": 88,
        "92": 92,
        "undefined": undefined
    }],
    71: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createTx = undefined;
        let createTx = exports.createTx = (() => {
            var _ref5 = _asyncToGenerator(function*(_ref4) {
                let {
                    asset,
                    utxos,
                    receiverAddress,
                    changeAddress,
                    amount,
                    fee,
                    privateKeys
                } = _ref4;
                if (asset.name === 'bitcoin') {
                    (0, _assert2.default)(fee.lt(_assets2.default.bitcoin.currency.BTC(_appConfig.BITCOIN_FEE_LIMIT)), `Bitcoin fee must be less than ${_appConfig.BITCOIN_FEE_LIMIT} BTC. Contact support@exodus.io`);
                }(0, _assert2.default)(utxos.value.gte(amount.add(fee)), 'Address doesn\'t contain enough money to send.');
                const inputs = utxos.toArray().map(function(utxo) {
                    return {
                        txId: utxo.txId,
                        vout: utxo.vout,
                        address: utxo.address.toString(),
                        value: parseInt(utxo.value.toBase().toString({
                            unit: false
                        }), 10)
                    };
                });
                const outputs = [
                    [receiverAddress, parseInt(amount.toBase().toString({
                        unit: false
                    }), 10)]
                ];
                const change = utxos.value.subtract(amount).subtract(fee);
                const dust = asset.currency.baseUnit(lodash.get(_appConfig.DUST_VALUES, asset.name, 1));
                const hasChange = change.gte(dust);
                if (hasChange) {
                    (0, _assert2.default)(changeAddress, 'We have change, but no change address.');
                    outputs.push([changeAddress, parseInt(change.toBase().toString({
                        unit: false
                    }), 10)]);
                }
                const {
                    rawTx,
                    txId
                } = yield _instanceShim2.default.current.createTx(asset.name, {
                    inputs,
                    outputs,
                    addressPathsMap: utxos.getAddressPathsMap(),
                    privateKeys
                });
                return {
                    rawTx,
                    txId,
                    hasChange
                };
            });
            return function createTx(_x4) {
                return _ref5.apply(this, arguments);
            };
        })();
        exports.default = function(_ref) {
            let {
                asset,
                receiver,
                shouldLog = true,
                memo
            } = _ref;
            const send = (0, _reduxAsyncAction2.default)('TX_SEND', (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                    let {
                        success,
                        update,
                        fail
                    } = _ref2;
                    const state = getState();
                    const changeAddress = (0, _getChangeAddress2.default)(state)(asset.name);
                    const getFiatValue = (0, _getValue2.default)(state);
                    const txOptions = {
                        asset,
                        receiverAddress: receiver.address,
                        changeAddress: String(changeAddress),
                        amount: receiver.amount
                    };
                    const feeEstimator = (0, _aureus.isNumberUnit)(receiver.fee) ? function() {
                        return receiver.fee;
                    } : (0, _feeEstimator2.default)(asset, {
                        defaultOptions: {
                            outputs: [txOptions.receiverAddress, txOptions.changeAddress]
                        }
                    });
                    const [selectedUtxos, remainingUtxos] = state.utxos[asset.name].select(txOptions.amount, feeEstimator);
                    if (selectedUtxos.empty) throw new Error('Not enough funds.');
                    console.log('SELECTED:');
                    console.dir(selectedUtxos);
                    console.log('REMAINING:');
                    console.dir(remainingUtxos);
                    Object.assign(txOptions, {
                        utxos: selectedUtxos,
                        fee: feeEstimator({
                            inputs: selectedUtxos
                        })
                    });
                    const [createTxErr, {
                        rawTx,
                        txId,
                        hasChange
                    }] = yield(0, _aw2.default)(createTx)(txOptions);
                    if (createTxErr) {
                        console.error('#tx-send: TX CREATION ERROR:');
                        console.error(createTxErr);
                        return fail(createTxErr);
                    }
                    try {
                        const broadcastTx = (0, _broadcastTx2.default)(state)(asset.name);
                        yield broadcastTx(rawTx.toString('hex'));
                    } catch (err) {
                        console.error(err);
                        throw new Error('Broadcast transaction error. If this persists, please contact support@exodus.io.');
                    }
                    update(txId);
                    yield(0, _delay2.default)(500);
                    const changeAddressSet = _addressSet2.default.fromArray([changeAddress]);
                    const changeUtxos = (0, _extractUtxosFromTx2.default)(rawTx, changeAddressSet, asset.name);
                    const newUtxos = remainingUtxos.union(changeUtxos);
                    const [writeErr] = yield(0, _utxos.writeUtxos)(asset.name, newUtxos);
                    if (writeErr) {
                        logger.error(writeErr);
                        console.dir(writeErr);
                    }
                    _flux.actions.utxos.update(asset.name, newUtxos);
                    if (shouldLog) {
                        const sentAmount = receiver.amount.abs().negate();
                        _flux.actions.txLog.write(asset, {
                            txId,
                            confirmations: 0,
                            coinAmount: sentAmount,
                            feeAmount: txOptions.fee.to(asset.displayUnit),
                            fiatAmount: getFiatValue(sentAmount),
                            to: receiver.address,
                            memo
                        });
                    }
                    success({
                        asset: asset.name,
                        changeAddressUsed: hasChange
                    });
                });
                return function(_x, _x2, _x3) {
                    return _ref3.apply(this, arguments);
                };
            })());
            return function() {
                return send(...arguments);
            };
        };
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _flux = require(257);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _extractUtxosFromTx = require(254);
        var _extractUtxosFromTx2 = _interopRequireDefault(_extractUtxosFromTx);
        var _getChangeAddress = require(90);
        var _getChangeAddress2 = _interopRequireDefault(_getChangeAddress);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _broadcastTx = require(131);
        var _broadcastTx2 = _interopRequireDefault(_broadcastTx);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _aureus = require(192);
        var _aureus2 = _interopRequireDefault(_aureus);
        var _aw = require(197);
        var _aw2 = _interopRequireDefault(_aw);
        var _utxos = require(79);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);
        var _appConfig = require(80);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const logger = (0, _logger2.default)('actions:tx-send');

    }, {
        "121": 121,
        "131": 131,
        "167": 167,
        "184": 184,
        "192": 192,
        "197": 197,
        "254": 254,
        "255": 255,
        "257": 257,
        "269": 269,
        "288": 288,
        "79": 79,
        "80": 80,
        "81": 81,
        "89": 89,
        "90": 90,
        "undefined": undefined
    }],
    72: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getNonce = exports.createTx = undefined;
        let createTx = exports.createTx = (() => {
            var _ref5 = _asyncToGenerator(function*(_ref4) {
                let {
                    baseAsset,
                    asset,
                    address,
                    amount,
                    nonce,
                    txInput,
                    gasLimit,
                    privateKey,
                    fromAddress
                } = _ref4;
                if (txInput && asset.isEthereumToken) throw new Error(`Additional data for Ethereum Token (${asset.name}) is not allowed`);
                txInput = asset.isEthereumToken ? asset.contract.transfer.build(address, amount) : ethUtil.toBuffer(txInput);
                const to = asset.isEthereumToken ? asset.contract.addresses.current : address;
                const value = (0, _util.currency2buffer)(asset.isEthereumToken ? _assets2.default.ethereum.currency.ZERO : amount);
                if (!asset.isEthereumToken && !gasLimit) {
                    const isContract = yield baseAsset.address.isContract(to);
                    if (!isContract) gasLimit = asset.gasTx;
                }
                if (!fromAddress) {
                    if (privateKey) fromAddress = ethUtil.bufferToHex(ethUtil.privateToAddress(privateKey));
                    else throw new Error('createTx: Must pass fromAddress or privateKey in options');
                }
                if (!gasLimit) {
                    const _estimateGas = baseAsset.name === 'ethereum' ? (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.estimateGas, etherscan.estimateGas) : (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.estimateGas, etcchain.estimateGas);
                    const estimatedGas = yield _estimateGas({
                        from: fromAddress,
                        to,
                        value: ethUtil.bufferToHex(value),
                        data: ethUtil.bufferToHex(txInput)
                    });
                    gasLimit = new _bn2.default(estimatedGas.slice(2), 16).imuln(6).idivn(5).toNumber();
                }
                console.log(`gasLimit: ${gasLimit}`);
                const {
                    rawTx,
                    txId
                } = yield _instanceShim2.default.current.createTx(baseAsset.name, {
                    nonce: ethUtil.intToBuffer(nonce),
                    gasPrice: (0, _util.currency2buffer)(baseAsset.gasPrice),
                    gasLimit: ethUtil.intToBuffer(gasLimit),
                    to,
                    value,
                    data: txInput,
                    chainId: {
                        ethereum: 1,
                        ethereumclassic: 61
                    }[baseAsset.name],
                    privateKey
                });
                const feeRaw = baseAsset.gasPrice.toNumber() * gasLimit;
                return {
                    rawTx,
                    txId,
                    fee: baseAsset.currency.baseUnit(feeRaw)
                };
            });
            return function createTx(_x4) {
                return _ref5.apply(this, arguments);
            };
        })();
        let getNonce = exports.getNonce = (() => {
            var _ref7 = _asyncToGenerator(function*(_ref6) {
                let {
                    asset,
                    address
                } = _ref6;
                if (!['ethereum', 'ethereumclassic'].includes(asset.name)) return;
                const _getNonce = asset.name === 'ethereum' ? (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.getTransactionCount, etherscan.getTransactionCount) : (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.getTransactionCount, etcchain.getTransactionCount);
                const nonce = yield _getNonce(address);
                return parseInt(nonce, 16);
            });
            return function getNonce(_x5) {
                return _ref7.apply(this, arguments);
            };
        })();
        exports.default = function(_ref) {
            let send = (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                    let {
                        success,
                        update
                    } = _ref2;
                    const {
                        address,
                        amount
                    } = receiver;
                    const state = getState();
                    let nonce = state.accountStates[baseAsset.name].nonce;
                    let txId, rawTx, fee;
                    const fromAddress = (0, _getReceiveAddress2.default)(state)(baseAsset.name).toString();
                    const broadcastTx = (0, _broadcastTx2.default)(state)(asset.name);
                    try {;
                        ({
                            rawTx,
                            txId,
                            fee
                        } = yield createTx({
                            baseAsset,
                            asset,
                            address,
                            amount,
                            nonce,
                            txInput,
                            gasLimit,
                            fromAddress
                        }));
                        yield broadcastTx(rawTx.toString('hex'));
                    } catch (err) {
                        const nonceTooLowErr = err.message.match(/Transaction nonce is too low/);
                        const internalServerErr = err.message.match(/Internal Server Error/);
                        if (!nonceTooLowErr && !internalServerErr) throw (0, _verror2.default)(err, `broadcastTx error: ${txId}`);
                        if (nonceTooLowErr) console.error('etherscan.io: Nonce is too low');
                        if (internalServerErr) console.error('etcchain.com: Internal Server Error');
                        nonce = yield getNonce({
                            asset: baseAsset,
                            address: fromAddress
                        });
                        try {
                            console.log('trying to send again...');
                            ({
                                rawTx,
                                txId,
                                fee
                            } = yield createTx({
                                baseAsset,
                                asset,
                                address,
                                amount,
                                nonce,
                                txInput,
                                gasLimit,
                                fromAddress
                            }));
                            yield broadcastTx(rawTx.toString('hex'));
                        } catch (err) {
                            console.error('caught another error');
                            console.error(err);
                            throw (0, _verror2.default)(err, `broadcastTx error: ${txId}`);
                        }
                    }
                    update((0, _normalizeEthTxid2.default)(txId));
                    if (shouldLog) {
                        const sentAmount = amount.abs().negate();
                        const fiatConversions = (0, _conversions2.default)(state);
                        _flux.actions.txLog.write(asset, {
                            txId: (0, _normalizeEthTxid2.default)(txId),
                            coinAmount: sentAmount,
                            feeAmount: fee.to(baseAsset.displayUnit),
                            fiatAmount: fiatConversions[asset.name](sentAmount),
                            to: address,
                            memo
                        });
                        if (asset.isEthereumToken) {
                            _flux.actions.txLog.write(_assets2.default.ethereum, {
                                txId: (0, _normalizeEthTxid2.default)(txId),
                                coinAmount: _assets2.default.ethereum.currency.ZERO,
                                feeAmount: fee.to(_assets2.default.ethereum.displayUnit),
                                fiatAmount: fiatConversions.ethereum(_assets2.default.ethereum.currency.ZERO),
                                to: address,
                                token: asset.name,
                                memo
                            });
                        }
                    }
                    yield _flux.actions.accountStates[baseAsset.name].update({
                        nonce: nonce + 1
                    });
                    success();
                });
                return function send(_x, _x2, _x3) {
                    return _ref3.apply(this, arguments);
                };
            })();
            let {
                asset,
                receiver,
                shouldLog = true,
                memo,
                txInput,
                gasLimit
            } = _ref;
            const baseAsset = asset.isEthereumToken ? _assets2.default.ethereum : asset;
            return (0, _reduxAsyncAction2.default)('TX_SEND', function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return AccountState[baseAsset.name].runWithLock(() => send(...args));
            });
        };
        var _verror = require('verror');
        var _verror2 = _interopRequireDefault(_verror);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _broadcastTx = require(131);
        var _broadcastTx2 = _interopRequireDefault(_broadcastTx);
        var _bn = require('bn.js');
        var _bn2 = _interopRequireDefault(_bn);
        var _ethereumjsUtil = require('ethereumjs-util');
        var ethUtil = _interopRequireWildcard(_ethereumjsUtil);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _exodusEthereumServer = require(229);
        var _flux = require(257);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _accountState = require(7);
        var AccountState = _interopRequireWildcard(_accountState);
        var _util = require(213);
        var _normalizeEthTxid = require(282);
        var _normalizeEthTxid2 = _interopRequireDefault(_normalizeEthTxid);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "119": 119,
        "131": 131,
        "167": 167,
        "184": 184,
        "213": 213,
        "221": 221,
        "223": 223,
        "229": 229,
        "257": 257,
        "282": 282,
        "288": 288,
        "7": 7,
        "92": 92,
        "undefined": undefined
    }],
    73: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let send = (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                    let {
                        success,
                        update
                    } = _ref2;
                    const state = getState();
                    const getReceveAddress = (0, _getReceiveAddress2.default)(state);
                    const accounts = state.accounts.factom;
                    const fromAddress = String(getReceveAddress('factom'));
                    const sk = accounts.hdkey.derive('m/0/0', 'tag-does-not-matter', {
                        spendable: true
                    });
                    const privateKey = sk.privateKey;
                    const publicKey = _factomjsLib2.default.crypto.publicKeyCreate(privateKey);
                    _assert2.default.strictEqual(fromAddress, _assets2.default.factom.keys.encodePublic(null, privateKey), 'verify addresses are the same');
                    const receiverAddress = receiver.address;
                    const amount = receiver.amount;
                    const rawAmount = amount.to('factoshis').toNumber();
                    const tx = _factomjsLib2.default.transaction.create();
                    _factomjsLib2.default.transaction.addInput(tx, publicKey, rawAmount + _assets2.default.factom.fee.toNumber());
                    _factomjsLib2.default.transaction.addOutput(tx, receiverAddress, rawAmount);
                    _factomjsLib2.default.transaction.signInput(tx, 0, privateKey);
                    const txHex = _factomjsLib2.default.encoding.Transaction.encode(tx).toString('hex');
                    yield(0, _broadcastTx2.default)(state)('factom')(txHex);
                    const txId = _factomjsLib2.default.transaction.getSigHash(tx).toString('hex');
                    update(txId);
                    if (shouldLog) {
                        const sentAmount = amount.abs().negate();
                        const fiatConversions = (0, _conversions2.default)(getState()).factom;
                        _flux.actions.txLog.write(_assets2.default.factom, {
                            txId,
                            coinAmount: sentAmount,
                            feeAmount: _assets2.default.factom.fee.to(_assets2.default.factom.displayUnit),
                            fiatAmount: fiatConversions(sentAmount),
                            to: receiverAddress,
                            memo
                        });
                    }
                    success();
                });
                return function send(_x, _x2, _x3) {
                    return _ref3.apply(this, arguments);
                };
            })();
            let {
                receiver,
                shouldLog = true,
                memo
            } = _ref;
            return (0, _reduxAsyncAction2.default)('TX_SEND', function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return _accountState.factom.runWithLock(() => send(...args));
            });
        };
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _broadcastTx = require(131);
        var _broadcastTx2 = _interopRequireDefault(_broadcastTx);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _accountState = require(7);
        var _flux = require(257);
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _factomjsLib = require('factomjs-lib');
        var _factomjsLib2 = _interopRequireDefault(_factomjsLib);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "119": 119,
        "131": 131,
        "184": 184,
        "257": 257,
        "288": 288,
        "7": 7,
        "92": 92,
        "undefined": undefined
    }],
    74: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = [
            ['TX_SEND_SUCCESS', (() => {
                var _ref3 = _asyncToGenerator(function*(_ref, _ref2) {
                    let {
                        type,
                        payload
                    } = _ref;
                    let {
                        dispatch,
                        preState,
                        postState
                    } = _ref2;
                    const {
                        asset
                    } = payload || {};
                    if (preState.accounts[asset] === postState.accounts[asset]) return;
                    const key = walletKeys.accountStateChain(asset, 'account0');
                    yield _instanceShim2.default.current.updateKeyData(key, postState.accounts[asset].chain);
                });
                return function(_x, _x2) {
                    return _ref3.apply(this, arguments);
                };
            })()]
        ];

    }, {
        "167": 167,
        "168": 168
    }],
    75: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.send = send;
        exports.ackSend = ackSend;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _bitcoinLike = require(71);
        var _bitcoinLike2 = _interopRequireDefault(_bitcoinLike);
        var _ethereum = require(72);
        var _ethereum2 = _interopRequireDefault(_ethereum);
        var _factom = require(73);
        var _factom2 = _interopRequireDefault(_factom);
        var _monero = require(76);
        var _monero2 = _interopRequireDefault(_monero);
        var _ripple = require(77);
        var _ripple2 = _interopRequireDefault(_ripple);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function send(_ref) {
            let {
                coin: asset
            } = _ref, options = _objectWithoutProperties(_ref, ['coin']);
            const baseAsset = asset.isEthereumToken ? _assets2.default.ethereum : asset;
            switch (baseAsset.name) {
                case 'bcash':
                case 'bcashclaim':
                case 'bitcoin':
                case 'dash':
                case 'decred':
                case 'litecoin':
                case 'zcash':
                    return (0, _bitcoinLike2.default)(Object.assign({
                        asset
                    }, options));
                case 'ethereum':
                case 'ethereumclassic':
                    return (0, _ethereum2.default)(Object.assign({
                        asset
                    }, options));
                case 'factom':
                    return (0, _factom2.default)(options);
                case 'monero':
                    return (0, _monero2.default)(options);
                case 'ripple':
                    return (0, _ripple2.default)(options);
                default:
                    throw new Error(`Can not find send function for ${asset.name}`);
            }
        }

        function ackSend() {
            return {
                type: 'TX_SEND_ACK'
            };
        }

    }, {
        "184": 184,
        "71": 71,
        "72": 72,
        "73": 73,
        "76": 76,
        "77": 77
    }],
    76: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let {
                receiver,
                shouldLog = false,
                memo
            } = _ref;
            return (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState) {
                    dispatch({
                        type: 'TX_SEND_INIT'
                    });
                    try {
                        const address = String(receiver.address);
                        const amount = receiver.amount.toString({
                            unit: false
                        });
                        const paymentId = receiver.paymentId;
                        const mixin = 3;
                        const payload = {
                            address,
                            amount,
                            paymentId,
                            mixin
                        };
                        (0, _electronIpcBroadcast2.default)('mm:send', payload);
                        _electron.ipcRenderer.on('mm:send:error', function(event, _ref3) {
                            let {
                                payload
                            } = _ref3;
                            dispatch({
                                type: 'TX_SEND_FAIL',
                                payload: new Error(payload.error)
                            });
                        });
                        _electron.ipcRenderer.on('mm:send:success', function(event, _ref4) {
                            let {
                                payload
                            } = _ref4;
                            dispatch({
                                type: 'TX_SEND_SUCCESS'
                            });
                        });
                    } catch (err) {
                        logger.error(err);
                        dispatch({
                            type: 'TX_SEND_FAIL',
                            payload: (0, _verror2.default)(err, 'tx-send: caught exception')
                        });
                    }
                });
                return function(_x, _x2) {
                    return _ref2.apply(this, arguments);
                };
            })();
        };
        var _verror = require('verror');
        var _verror2 = _interopRequireDefault(_verror);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);
        var _electron = require('electron');
        var _electronIpcBroadcast = require('electron-ipc-broadcast');
        var _electronIpcBroadcast2 = _interopRequireDefault(_electronIpcBroadcast);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const logger = (0, _logger2.default)('actions:tx-send');

    }, {
        "269": 269,
        "undefined": undefined
    }],
    77: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createTx = undefined;
        let createTx = exports.createTx = (() => {
            var _ref5 = _asyncToGenerator(function*(_ref4) {
                let {
                    to,
                    destTag,
                    amount,
                    sequence,
                    privateKey
                } = _ref4;
                const publicKey = secp256k1.publicKeyCreate(privateKey);
                const ledgerCurrentIndex = yield(0, _rippleApi.getLedgerCurrentIndex)();
                const tx = {
                    Account: _assets2.default.ripple.keys.encodePublic(publicKey),
                    Amount: amount.toBase().toString({
                        unit: false
                    }),
                    Destination: to,
                    DestinationTag: destTag,
                    Fee: _assets2.default.ripple.fee.toBase().toString({
                        unit: false
                    }),
                    Flags: 0x80000000,
                    LastLedgerSequence: ledgerCurrentIndex + 3,
                    Sequence: sequence,
                    TransactionType: 'Payment',
                    SigningPubKey: publicKey.toString('hex').toUpperCase()
                };
                tx.TxnSignature = keypairs.sign((0, _tx.toBuffer)(tx, {
                    sign: true
                }), privateKey);
                const serialized = (0, _tx.toBuffer)(tx);
                return {
                    hex: serialized.toString('hex'),
                    id: (0, _tx.getHash)(serialized)
                };
            });
            return function createTx(_x4) {
                return _ref5.apply(this, arguments);
            };
        })();
        exports.default = function(_ref) {
            let {
                receiver,
                shouldLog = true,
                memo
            } = _ref;
            const send = (0, _reduxAsyncAction2.default)('TX_SEND', (() => {
                var _ref3 = _asyncToGenerator(function*(dispatch, getState, _ref2) {
                    let {
                        success,
                        update
                    } = _ref2;
                    const state = getState();
                    const {
                        privateKey
                    } = state.accounts.ripple.hdkey.derive('m/0/0', 'tag-does-not-matter', {
                        spendable: true
                    });
                    const {
                        sequence
                    } = state.accountStates.ripple;
                    const tx = yield createTx({
                        to: receiver.address,
                        destTag: receiver.destTag,
                        amount: receiver.amount,
                        sequence,
                        privateKey
                    });
                    yield(0, _broadcastTx2.default)(state)('ripple')(tx.hex);
                    update(tx.id);
                    if (shouldLog) {
                        const sentAmount = receiver.amount.abs().negate();
                        const fiatConversions = (0, _conversions2.default)(getState()).ripple;
                        _flux.actions.txLog.write(_assets2.default.ripple, {
                            txId: tx.id,
                            coinAmount: sentAmount,
                            feeAmount: _assets2.default.ripple.fee.to(_assets2.default.ripple.displayUnit),
                            fiatAmount: fiatConversions(sentAmount),
                            to: receiver.address,
                            memo
                        });
                    }
                    yield _flux.actions.accountStates.ripple.update({
                        sequence: sequence + 1
                    });
                    success();
                });
                return function(_x, _x2, _x3) {
                    return _ref3.apply(this, arguments);
                };
            })());
            return function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return _accountState.ripple.runWithLock(() => send(...args));
            };
        };
        var _secp256k = require('secp256k1');
        var secp256k1 = _interopRequireWildcard(_secp256k);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _broadcastTx = require(131);
        var _broadcastTx2 = _interopRequireDefault(_broadcastTx);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _accountState = require(7);
        var _tx = require(294);
        var _keypairs = require(293);
        var keypairs = _interopRequireWildcard(_keypairs);
        var _rippleApi = require(290);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "119": 119,
        "131": 131,
        "184": 184,
        "257": 257,
        "288": 288,
        "290": 290,
        "293": 293,
        "294": 294,
        "7": 7,
        "undefined": undefined
    }],
    78: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = [];

    }, {}],
    79: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.writeUtxos = undefined;
        let loadUtxos = (() => {
            var _ref7 = _asyncToGenerator(function*(accountName) {
                accountName = 'account0';
                let coinUtxos = {};
                for (const coinName in _assets2.default) {
                    const asset = _assets2.default[coinName];
                    let key = walletKeys.accountStateMutations(coinName, accountName);
                    const utxoRaw = yield _instanceShim2.default.current.fetchKeyData(key);
                    let utxos = _utxoCollection2.default.createEmpty({
                        currency: asset.currency
                    });
                    if (!_assets2.default[coinName].isAccountBased && utxoRaw) {
                        utxos = _utxoCollection2.default.fromJSON(utxoRaw, {
                            currency: asset.currency
                        });
                    }
                    coinUtxos[coinName] = utxos;
                }
                return coinUtxos;
            });
            return function loadUtxos(_x10) {
                return _ref7.apply(this, arguments);
            };
        })();
        exports.load = load;
        exports.update = update;
        exports.updateConfirmations = updateConfirmations;
        exports.updateAllFromBlockchain = updateAllFromBlockchain;
        exports.updateFromBlockchain = updateFromBlockchain;
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _txLog = require(70);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _reduxAsyncAction = require(288);
        var _reduxAsyncAction2 = _interopRequireDefault(_reduxAsyncAction);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _util = require(264);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);
        var _getReceiveAddresses = require(93);
        var _getReceiveAddresses2 = _interopRequireDefault(_getReceiveAddresses);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getExchangeAddress = require(91);
        var _getExchangeAddress2 = _interopRequireDefault(_getExchangeAddress);
        var _utxoFetcher = require(132);
        var _utxoFetcher2 = _interopRequireDefault(_utxoFetcher);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function load() {
            return (0, _reduxAsyncAction2.default)('UTXOS_LOAD', (() => {
                var _ref2 = _asyncToGenerator(function*(dispatch, getState, _ref) {
                    let {
                        success,
                        fail
                    } = _ref;
                    const data = yield loadUtxos();
                    success(data);
                });
                return function(_x, _x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            })());
        }

        function update(asset, utxoCol) {
            return {
                type: 'UTXOS_UPDATE',
                payload: {
                    [asset]: utxoCol
                }
            };
        }

        function updateConfirmations(asset, txs) {
            return (0, _util.FSA)('UTXOS_UPDATE_CONFIRMATIONS', {
                asset,
                txs
            });
        }

        function updateAllFromBlockchain() {
            return (0, _reduxAsyncAction2.default)('UTXOS_LOAD_ALL', (() => {
                var _ref4 = _asyncToGenerator(function*(dispatch, getState, _ref3) {
                    let {
                        success
                    } = _ref3;
                    const state = getState();
                    const getReceiveAddress = (0, _getReceiveAddress2.default)(state);
                    const getReceiveAddresses = (0, _getReceiveAddresses2.default)(state);
                    const getExchangeAddress = (0, _getExchangeAddress2.default)(state);
                    for (const coin of Object.values(_assets2.default)) {
                        if (coin.available && coin.hasUTXO && coin.name !== 'monero') {
                            const addrs = coin.name === 'bitcoin' ? getReceiveAddresses(coin.name).add(getExchangeAddress(coin.name)) : _addressSet2.default.fromArray([getReceiveAddress(coin.name), getExchangeAddress(coin.name)]);
                            yield updateFromBlockchain(coin.name, addrs)(dispatch, getState);
                            yield(0, _delay2.default)((0, _ms2.default)('2s'));
                        }
                    }
                    success();
                });
                return function(_x4, _x5, _x6) {
                    return _ref4.apply(this, arguments);
                };
            })());
        }

        function updateFromBlockchain(coinName, addresses) {
            return (0, _reduxAsyncAction2.default)('UTXOS_LOAD', (() => {
                var _ref6 = _asyncToGenerator(function*(dispatch, getState, _ref5) {
                    let {
                        abort,
                        success,
                        fail
                    } = _ref5;
                    const state = getState();
                    if (state.txSend.isSending) return abort('TX sending in progress.');
                    let coin = _assets2.default[coinName];
                    let currentUtxos = state.utxos[coinName];
                    if (!currentUtxos) return abort(`${coinName} UTXOs not loaded from fs yet.`);
                    console.log(`${coinName} scan: ${addresses}`);
                    const utxoFetcher = (0, _utxoFetcher2.default)(state);
                    let [err, utxos] = yield(0, _aw2.default)(utxoFetcher)(coin.name, addresses);
                    if (err) {
                        console.error('UTXO FAIL: ' + coinName);
                        console.error(err);
                        return fail(err);
                    }
                    let newUtxos = currentUtxos.union(utxos);
                    let result = {
                        [coinName]: newUtxos
                    };
                    let diffUtxos = newUtxos.difference(currentUtxos);
                    if (diffUtxos.isEmpty()) success(result);
                    else {
                        dispatchReceived(dispatch, getState, coinName, diffUtxos);
                        let [writeErr] = yield writeUtxos(coinName, newUtxos);
                        if (writeErr) return fail(writeErr);
                        else success(result);
                    }
                });
                return function(_x7, _x8, _x9) {
                    return _ref6.apply(this, arguments);
                };
            })());
        }

        function dispatchReceived(dispatch, getState, coinName, diffUtxos) {
            const asset = _assets2.default[coinName];
            let fiatConversions = (0, _conversions2.default)(getState());
            const txs = diffUtxos.txIds.map(txId => {
                let utxos = diffUtxos.getTxIdUtxos(txId);
                const addresses = utxos.getAddressesForTxId(txId);
                console.log(`RECV: ${txId}: ${utxos.value.toString()}`);
                let confirmations = 0;
                try {
                    confirmations = utxos.toArray()[0].confirmations;
                } catch (_e) {}
                dispatch((0, _txLog.write)(asset, {
                    txId,
                    coinAmount: utxos.value,
                    fiatAmount: fiatConversions[coinName](utxos.value),
                    addresses,
                    confirmations
                }));
                return {
                    coinAmount: utxos.value,
                    confirmations
                };
            });
            if (txs.length > 0) dispatch((0, _util.FSA)('TX_RECEIVE', {
                asset,
                txs
            }));
        }
        const writeUtxos = exports.writeUtxos = (0, _aw2.default)((() => {
            var _ref8 = _asyncToGenerator(function*(coinName, utxos) {
                let {
                    accountName = 'account0'
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                accountName = 'account0';
                let key = walletKeys.accountStateMutations(coinName, accountName);
                yield _instanceShim2.default.current.updateKeyData(key, utxos.toJSON());
            });

            function writeUtxos(_x12, _x13) {
                return _ref8.apply(this, arguments);
            }
            return writeUtxos;
        })());

    }, {
        "119": 119,
        "132": 132,
        "167": 167,
        "168": 168,
        "184": 184,
        "264": 264,
        "288": 288,
        "70": 70,
        "81": 81,
        "89": 89,
        "91": 91,
        "92": 92,
        "93": 93,
        "undefined": undefined
    }],
    80: [function(require, module, exports) {
        'use strict';
        var _config = require(341);
        var config = _interopRequireWildcard(_config);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        module.exports = config;

    }, {
        "341": 341
    }],
    81: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.PATH_SORTER = exports.default = undefined;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let AddressSet = class AddressSet {
            constructor() {
                this._data = new Map();
            }
            static fromArray(arr) {
                arr = arr.map(addr => {
                    if (typeof addr === 'string') return _address2.default.create(addr);
                    else if (typeof addr === 'object') return _address2.default.fromJSON(addr);
                    else if (addr instanceof _address2.default) return addr;
                    else {
                        console.dir(addr);
                        throw new Error(`AddressSet#fromArray(): unknown type`);
                    }
                });
                const ac = new AddressSet();
                for (let addr of arr) {
                    ac._data.set(addr.address, addr);
                }
                return Object.freeze(ac);
            }
            add(address) {
                (0, _assert2.default)((0, _address.isAddress)(address), 'Must be an instance of an Address.');
                let ac = new AddressSet();
                ac._data = new Map(this._data);
                ac._data.set(address.address, address);
                return Object.freeze(ac);
            }
            delete(address) {
                return this.remove(address);
            }
            get(address) {
                return this._data.get(String(address));
            }
            has(address) {
                return !!this._data.get(String(address));
            }
            remove(address) {
                let addrObj = this.get(address);
                if (!addrObj) return this;
                let ac = new AddressSet();
                ac._data = new Map(this._data);
                ac._data.delete(addrObj.address);
                return Object.freeze(ac);
            }
            sort(fn) {
                let arr = Array.from(this);
                arr = arr.sort(fn);
                return AddressSet.fromArray(arr);
            }
            toArray() {
                return Array.from(this._data.values());
            }
            toAddressStrings() {
                return Array.from(this._data.keys());
            }
            toString() {
                return Array.from(this._data.keys()).join(', ');
            }
            union(otherSet) {
                let arr1 = Array.from(this);
                let arr2 = Array.from(otherSet);
                let both = [...arr1, ...arr2];
                return AddressSet.fromArray(both);
            }[Symbol.iterator]() {
                return this._data.values();
            }
            get size() {
                return this._data.size;
            }
        };
        exports.default = AddressSet;
        AddressSet.EMPTY = AddressSet.fromArray([]);
        const PATH_SORTER = exports.PATH_SORTER = (a1, a2) => {
            let p1 = a1.meta.path ? a1.meta.path.replace('m/', '').split('/') : ['0', '0'];
            let p2 = a2.meta.path ? a2.meta.path.replace('m/', '').split('/') : ['0', '0'];
            p1 = p1.map(i => parseInt(i, 10));
            p2 = p2.map(i => parseInt(i, 10));
            if (p1[0] < p2[0]) return -1;
            else if (p1[0] > p2[0]) return 1;
            else if (p1[0] === p2[0]) {
                if (p1[1] < p2[1]) return -1;
                else if (p1[1] > p2[1]) return 1;
                return 0;
            }
        };

    }, {
        "82": 82,
        "undefined": undefined
    }],
    82: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        exports.isAddress = isAddress;
        var _util = require('util');
        let Address = class Address {
            constructor(address, meta) {
                this.address = address;
                this.meta = meta || {};
            }
            static create(address, meta) {
                return Object.freeze(new Address(address, meta));
            }
            static fromJSON(json) {
                if (typeof json === 'string') json = JSON.parse(json);
                return Address.create(json.address, json.meta ? json.meta : json.path);
            }
            inspect() {
                return `<Address ${this.address}: ${(0,_util.inspect)(this.meta)}>`;
            }
            toJSON() {
                return Object.assign({}, this);
            }
            toString() {
                return this.address;
            }
        };
        exports.default = Address;

        function isAddress(address) {
            const val = typeof address === 'object' && (address instanceof Address || 'address' in address && 'meta' in address);
            return val;
        }

    }, {
        "undefined": undefined
    }],
    83: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isExchangeAddress = isExchangeAddress;
        exports.isChangeAddress = isChangeAddress;
        exports.isReceiveAddress = isReceiveAddress;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _ = require(82);
        var _2 = _interopRequireDefault(_);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function isExchangeAddress(addr) {
            return parsePath(addr.meta.path)[0] === 2;
        }

        function isChangeAddress(addr) {
            return parsePath(addr.meta.path)[0] === 1;
        }

        function isReceiveAddress(addr) {
            return parsePath(addr.meta.path)[0] === 0;
        }

        function parsePath(path) {
            _assert2.default.strictEqual(typeof path, 'string', 'Address.meta.path must be a string.');
            const data = path.split('/');
            _assert2.default.strictEqual(data[0], 'm', 'Address.meta.path not proper path format.');
            data.shift();
            for (let i = 0; i < data.length; i++) {
                _assert2.default.notStrictEqual(data[i].slice(-1), "'", 'Address.meta.path does not support hardened offsets.');
            }
            return data.map(c => parseInt(c, 10));
        }

    }, {
        "82": 82,
        "undefined": undefined
    }],
    84: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _order = require(85);
        var _order2 = _interopRequireDefault(_order);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let OrderSet = class OrderSet {
            constructor() {
                this._items = new Map();
                this._order = [];
            }
            static fromArray(arr) {
                if (arr == null) return OrderSet.EMPTY;
                arr = arr.map(isObjectOrConvert);
                arr.sort((a, b) => b.date - a.date);
                const set = new OrderSet();
                for (let item of arr) {
                    set._items.set(String(item), item);
                }
                set._order = Array.from(set._items.keys());
                return set;
            }
            add(item) {
                let arrItems = Array.from(this._items.values());
                arrItems.push(item);
                arrItems.sort((a, b) => b.date - a.date);
                let set = new OrderSet();
                set._items = new Map();
                for (let item of arrItems) {
                    set._items.set(String(item), item);
                }
                set._order = Array.from(set._items.keys());
                return set;
            }
            clone() {
                let set = new OrderSet();
                set._items = new Map(this._items);
                set._order = Array.from(set._items.keys());
                return set;
            }
            delete(item) {
                let itemObj = this.get(item);
                if (!itemObj) return this;
                let set = new OrderSet();
                set._items = new Map(this._items);
                set._items.delete(String(item));
                set._order = Array.from(set._items.keys());
                return set;
            }
            equals(otherSet) {
                if (this._order.length !== otherSet._order.length) return false;
                let len = this._order.length;
                for (let i = 0; i < len; ++i) {
                    if (this._order[i] !== otherSet._order[i]) return false;
                }
                return true;
            }
            get(item) {
                return this._items.get(String(item));
            }
            getAt(index) {
                return this.get(this._order[index]);
            }
            has(item) {
                return this._items.has(String(item));
            }
            toJSON() {
                return Array.from(this).map(item => item.toJSON());
            }
            union(otherSet) {
                let arr1 = Array.from(this);
                let arr2 = Array.from(otherSet);
                let both = [...arr1, ...arr2];
                return OrderSet.fromArray(both);
            }
            update(items) {
                const set = this.clone();
                for (const item of items) {
                    const thisItem = set._items.get(String(item));
                    if (thisItem === undefined) continue;
                    const newItem = thisItem.update(item);
                    set._items.set(String(newItem), newItem);
                }
                return set;
            }[Symbol.iterator]() {
                return this._items.values();
            }
            get size() {
                return this._items.size;
            }
        };
        exports.default = OrderSet;
        OrderSet.EMPTY = new OrderSet();

        function isObjectOrConvert(obj) {
            if (obj instanceof _order2.default) return obj;
            else return _order2.default.fromJSON(obj);
        }

    }, {
        "85": 85
    }],
    85: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _aureus = require(192);
        var _currencyFiat = require(208);
        var _currencyFiat2 = _interopRequireDefault(_currencyFiat);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const USD = _currencyFiat2.default.USD;
        const STATUS_SS_INPROGRESS = ['no_deposits', 'received', 'complete'];
        const STATUS_SS_FAILED = ['resolved', 'contact_support', 'failed', 'expired'];
        let Order = class Order {
            constructor() {
                let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this.orderId = props.orderId;
                _assert2.default.strictEqual(typeof this.orderId, 'string', `orderId must be a string, received: ${this.orderId}`);
                this.status = props.status || '';
                this.date = new Date();
                if (props.date) {
                    this.date = props.date instanceof Date ? props.date : new Date(props.date);
                }
                if (props.fromTxId) this.fromTxId = props.fromTxId;
                if (props.toTxId) this.toTxId = props.toTxId;
                if (props.fromAsset) {
                    this.fromAsset = props.fromAsset;
                    if (props.fromAmount) {
                        this.fromAmount = (0, _aureus.isNumberUnit)(props.fromAmount) ? props.fromAmount : _assets2.default[this.fromAsset].currency.parse(props.fromAmount);
                    }
                }
                if (props.toAsset) {
                    this.toAsset = props.toAsset;
                    if (props.toAmount) {
                        this.toAmount = (0, _aureus.isNumberUnit)(props.toAmount) ? props.toAmount : _assets2.default[this.toAsset].currency.parse(props.toAmount);
                    }
                }
                if (props.fromAmountUSD) {
                    this.fromAmountUSD = (0, _aureus.isNumberUnit)(props.fromAmountUSD) ? props.fromAmountUSD : USD.parse(props.fromAmountUSD);
                }
                if (props.toAmountUSD) {
                    this.toAmountUSD = (0, _aureus.isNumberUnit)(props.toAmountUSD) ? props.toAmountUSD : USD.parse(props.toAmountUSD);
                }
            }
            static fromJSON(json) {
                if (typeof json === 'string') json = JSON.parse(json);
                const ex = new Order(json);
                return ex;
            }
            inspect() {
                return `[Order ${this.orderId}]`;
            }
            toJSON() {
                let obj = Object.assign({}, this, {
                    date: this.date.toISOString()
                });
                if (obj.fromAmount) obj.fromAmount = obj.fromAmount.toString();
                if (obj.toAmount) obj.toAmount = obj.toAmount.toString();
                if (obj.fromAmountUSD) obj.fromAmountUSD = obj.fromAmountUSD.toString();
                if (obj.toAmountUSD) obj.toAmountUSD = obj.toAmountUSD.toString();
                return obj;
            }
            toString() {
                return String(this.orderId);
            }
            update(fields) {
                return Order.fromJSON(Object.assign({}, this, fields));
            }
            get exodusStatus() {
                if (this.status === 'complete-verified') return 'success';
                if (STATUS_SS_FAILED.includes(this.status)) return 'failed';
                if (STATUS_SS_INPROGRESS.includes(this.status)) return 'inprogress';
                console.warn(`Unknown order state: ${this.status}`);
                return 'inprogress';
            }
        };
        exports.default = Order;

    }, {
        "184": 184,
        "192": 192,
        "208": 208,
        "undefined": undefined
    }],
    86: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _tx = require(88);
        var _tx2 = _interopRequireDefault(_tx);
        var _lodash = require('lodash');
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _clone = require('clone');
        var _clone2 = _interopRequireDefault(_clone);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let TxSet = class TxSet {
            constructor() {
                this._txs = new Map();
                this._order = [];
                this.addresses = _addressSet2.default.EMPTY;
                this._balance = null;
            }
            static fromArray(arr) {
                if (arr == null) return TxSet.EMPTY;
                arr = arr.map(isTxOrConvert);
                arr.sort((a, b) => a.date - b.date);
                let addrs = [];
                arr.forEach(tx => {
                    addrs = addrs.concat(Array.from(tx.addresses));
                });
                const txset = new TxSet();
                txset.addresses = _addressSet2.default.fromArray(addrs);
                for (let tx of arr) {
                    txset._txs.set(tx.txId, tx);
                }
                txset._order = Array.from(txset._txs.keys());
                return txset;
            }
            add(tx) {
                let arrTxs = Array.from(this._txs.values());
                arrTxs.push(tx);
                arrTxs.sort((a, b) => a.date - b.date);
                let txset = new TxSet();
                txset._txs = new Map();
                for (let tx of arrTxs) {
                    txset._txs.set(tx.txId, tx);
                }
                txset._order = Array.from(txset._txs.keys());
                txset.addresses = this.addresses.union(tx.addresses);
                return txset;
            }
            clone() {
                let set = new TxSet();
                set._txs = new Map(this._txs);
                set._order = Array.from(set._txs.keys());
                set.addresses = this.addresses;
                return set;
            }
            delete(tx) {
                let txObj = this.get(tx);
                if (!txObj) return this;
                let txset = new TxSet();
                txset._txs = new Map(this._txs);
                txset._txs.delete(txObj.txId);
                txset._order = Array.from(txset._txs.keys());
                txset = TxSet.fromArray(Array.from(txset));
                return txset;
            }
            equals(otherSet) {
                if (this._order.length !== otherSet._order.length) return false;
                let len = this._order.length;
                for (let i = 0; i < len; ++i) {
                    if (this._order[i] !== otherSet._order[i]) return false;
                }
                return true;
            }
            get(tx) {
                return this._txs.get(String(tx));
            }
            getAt(order) {
                return this.get(this._order[order]);
            }
            getByOrder(order) {
                return this.get(this._order[order]);
            }
            has(tx) {
                return this._txs.has(String(tx));
            }
            toJSON() {
                return Array.from(this).map(tx => tx.toJSON());
            }
            union(otherSet) {
                let arr1 = Array.from(this);
                let arr2 = Array.from(otherSet);
                let both = [...arr1, ...arr2];
                return TxSet.fromArray(both);
            }
            update(otherSet) {
                let newArr = legacyMergeTxs(Array.from(this), Array.from(otherSet));
                return TxSet.fromArray(newArr);
            }
            updateTxsProperties(items) {
                const txset = this.clone();
                for (const item of items) {
                    const tx = txset._txs.get(item.txId);
                    if (tx === undefined) continue;
                    const newtx = _tx2.default.fromJSON(Object.assign({}, tx.toJSON(), item));
                    txset._txs.set(item.txId, newtx);
                }
                return txset;
            }
            getMutations() {
                let balance;
                return Array.from(this).map(tx => {
                    if (balance === undefined) balance = tx.coinAmount.unitType.ZERO;
                    balance = balance.add(tx.coinAmount);
                    if (tx.feeAmount && tx.feeAmount.unitType === tx.coinAmount.unitType) balance = balance.subtract(tx.feeAmount);
                    return {
                        tx,
                        balance
                    };
                });
            }[Symbol.iterator]() {
                return this._txs.values();
            }
            get size() {
                return this._txs.size;
            }
        };
        exports.default = TxSet;
        TxSet.EMPTY = new TxSet();

        function isTxOrConvert(tx) {
            if (tx instanceof _tx2.default) return tx;
            else return _tx2.default.fromJSON(tx);
        }

        function legacyMergeTxs(oldTxs, newTxs) {
            const oldTxObj = (0, _lodash.keyBy)(Array.from(oldTxs), 'txId');
            const newTxObj = (0, _lodash.keyBy)(Array.from(newTxs), 'txId');
            const txs = [];
            Object.keys(newTxObj).forEach(txId => {
                const tx = Object.assign({}, oldTxObj[txId], newTxObj[txId]);
                if (oldTxObj[txId]) {
                    if (Math.sign(tx.coinAmount.toNumber()) === Math.sign(oldTxObj[txId].coinAmount.toNumber())) {
                        if (!tx.feeAmount) tx.coinAmount = oldTxObj[txId].coinAmount;
                    }
                    if (oldTxObj[txId].meta) {
                        tx.meta = (0, _clone2.default)(oldTxObj[txId].meta);
                    }
                }
                txs.push(_tx2.default.fromJSON(tx));
            });
            return txs;
        }

    }, {
        "81": 81,
        "88": 88,
        "undefined": undefined
    }],
    87: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sortByAsc = sortByAsc;
        exports.sortByDesc = sortByDesc;
        var _ = require(86);
        var _2 = _interopRequireDefault(_);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function sortByAsc(txs) {
            return Array.from(txs).sort((a, b) => {
                if (!checkTypeDate(a.date, b.date)) throw new TypeError('TxSet.util.sortByAsc() objects must be Dates or numbers');
                return a.date - b.date;
            });
        }

        function sortByDesc(txs) {
            return Array.from(txs).sort((a, b) => {
                if (!checkTypeDate(a.date, b.date)) throw new TypeError('TxSet.util.sortByAsc() objects must be Dates or numbers');
                return b.date - a.date;
            });
        }

        function checkTypeDate(a, b) {
            return a instanceof Date && b instanceof Date || typeof a === 'number' && typeof b === 'number';
        }

    }, {
        "86": 86
    }],
    88: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _proxyFreeze = require('proxy-freeze');
        var _proxyFreeze2 = _interopRequireDefault(_proxyFreeze);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _isEqual = require('is-equal');
        var _isEqual2 = _interopRequireDefault(_isEqual);
        var _aureus = require(192);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let Tx = class Tx {
            constructor() {
                this.txId = null;
                this.error = null;
                this.date = null;
                this.confirmations = -1;
                this.memo = '';
                this.meta = {};
                this.token = null;
            }
            static fromJSON(json) {
                if (typeof json === 'string') json = JSON.parse(json);
                let tx = new Tx();
                tx.txId = json.txId;
                if (json.error) tx.error = json.error;
                tx.date = new Date(json.date);
                if (typeof json.confirmations === 'number') tx.confirmations = json.confirmations;
                if (json.coinAmount && json.coinName) {
                    tx.coinAmount = parseCurrency(json.coinAmount, json.coinName);
                    tx.coinName = json.coinName;
                } else if (json.coinAmount && !json.coinName && (0, _aureus.isNumberUnit)(json.coinAmount)) {
                    tx.coinAmount = json.coinAmount;
                }
                if (json.feeAmount && json.coinName) {
                    let coinName = json.coinName;
                    if (_assets2.default[json.coinName].isEthereumToken) coinName = 'ethereum';
                    if (_assets2.default[json.coinName].isOmniProperty) coinName = 'bitcoin';
                    tx.feeAmount = parseCurrency(json.feeAmount, coinName);
                } else if (json.feeAmount && !json.coinName && (0, _aureus.isNumberUnit)(json.feeAmount)) {
                    tx.feeAmount = json.feeAmount;
                }
                if (json.to) tx.to = json.to;
                if (json.spread) tx.spread = json.spread;
                if (json.duration) tx.duration = json.duration;
                if (json.memo) tx.memo = json.memo;
                if (json.token) tx.token = json.token;
                if (json.meta) tx.meta = Object.assign({}, json.meta);
                if (json.toCoin && _assets2.default[json.toCoin.coin]) tx.toCoin = convertOtherAsset(json.toCoin);
                if (json.fromCoin && _assets2.default[json.fromCoin.coin]) tx.fromCoin = convertOtherAsset(json.fromCoin);
                if (json.addresses) {
                    if (Array.isArray(json.addresses)) tx.addresses = _addressSet2.default.fromArray(json.addresses);
                    if (json.addresses instanceof _addressSet2.default) tx.addresses = json.addresses;
                    (0, _assert2.default)('Tx.toJSON(): unknown addresses type.');
                } else {
                    tx.addresses = _addressSet2.default.EMPTY;
                }
                if (json.height) tx.height = json.height;
                return (0, _proxyFreeze2.default)(tx);
            }
            clone() {
                return Tx.fromJSON(this);
            }
            equals(otherTx) {
                return (0, _isEqual2.default)(this.toJSON(), otherTx.toJSON());
            }
            inspect() {
                if (this.coinAmount) return `<Tx ${this.txId.slice(0,6)}... ${this.date.toISOString()} ${this.coinAmount.toString()} >`;
                else return `<Tx ${this.txId.slice(0,6)}... ${this.date.toISOString()} >`;
            }
            toJSON() {
                let obj = Object.assign({}, this);
                if (this.coinAmount) obj.coinAmount = this.coinAmount.toString();
                if (this.feeAmount) obj.feeAmount = this.feeAmount.toString();
                if (this.toCoin) {
                    obj.toCoin = Object.assign({}, this.toCoin);
                    obj.toCoin.coinAmount = obj.toCoin.coinAmount.toString();
                }
                if (this.fromCoin) {
                    obj.fromCoin = Object.assign({}, this.fromCoin);
                    obj.fromCoin.coinAmount = obj.fromCoin.coinAmount.toString();
                }
                obj.date = obj.date.toISOString();
                if (this.exchange) delete obj.memo;
                if (this.addresses) {
                    obj.addresses = Array.from(this.addresses);
                    if (obj.addresses.length === 0) delete obj.addresses;
                }
                if (!obj.memo) delete obj.memo;
                return obj;
            }
            toString() {
                return String(this.txId);
            }
            update(fields) {
                return Tx.fromJSON(Object.assign({}, this, fields));
            }
            get accepted() {
                return this.received || this.sent && this.confirmations >= 0;
            }
            get confirmed() {
                return this.confirmations > 0;
            }
            get exchange() {
                return !!(this.fromCoin || this.toCoin);
            }
            get sent() {
                return !!(this.coinAmount.isNegative || this.to);
            }
            get received() {
                return !this.sent;
            }
        };
        exports.default = Tx;

        function parseCurrency(val, currency) {
            if ((0, _aureus.isNumberUnit)(val)) return val.clone();
            let cur = typeof currency === 'string' ? _assets2.default[currency].currency : currency;
            if (typeof val === 'string') return cur.parse(val);
            else return cur.parse(val.value + ' ' + val.unit);
        }

        function convertOtherAsset(oad) {
            let oa = Object.assign({}, oad);
            oa.coinAmount = parseCurrency(oad.coinAmount, oad.coin);
            return oa;
        }

    }, {
        "184": 184,
        "192": 192,
        "81": 81,
        "undefined": undefined
    }],
    89: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _aureus = require(192);
        var _aureus2 = _interopRequireDefault(_aureus);
        var _lodash = require('lodash');
        var _isEqual = require('is-equal');
        var _isEqual2 = _interopRequireDefault(_isEqual);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }
        let UtxoCollection = class UtxoCollection {
            constructor() {
                let {
                    currency
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this[Symbol.iterator] = function* symbolIterator() {
                    let arr = this.toArray();
                    for (let val of arr) yield val;
                };
                this.currency = currency;
                this._data = null;
            }
            static createEmpty(options) {
                return UtxoCollection.fromArray([], options);
            }
            static fromArray(utxoArray) {
                let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    {
                        addressMap
                    } = _ref,
                    options = _objectWithoutProperties(_ref, ['addressMap']);
                let currency = options.currency || pickCurrencyFromArray(utxoArray);
                if (currency == null && utxoArray == null) console.warn('UtxoCollection.fromArray(): both currency and utxoArray are null.');
                if (currency == null && utxoArray.length === 0) {
                    console.warn('UtxoCollection.fromArray(): currency is null and utxoArray has zero items.');
                }
                utxoArray = (0, _lodash.uniqBy)(utxoArray, utxo => `${utxo.txId}:${utxo.vout}`);
                let utxos = utxoArray.map(utxo => {
                    if (!(utxo.address instanceof _address2.default) && !addressMap) throw new Error('Must pass addressMap if not of type Address');
                    utxo.address = utxo.address instanceof _address2.default ? utxo.address : addressMap[utxo.address];
                    return Object.assign({}, utxo, {
                        value: (0, _aureus.isNumberUnit)(utxo.value) ? utxo.value : currency.parse(utxo.value)
                    });
                });
                var col = new UtxoCollection({
                    currency
                });
                col._data = Object.freeze((0, _lodash.groupBy)(utxos, utxo => utxo.address.toString()));
                return col;
            }
            static fromJSON(json, _ref2) {
                let {
                    currency
                } = _ref2;
                if (typeof json === 'string') json = JSON.parse(json);
                let utxoData = {};
                Object.keys(json).forEach(address => {
                    let addr = new _address2.default(json[address].address, {
                        path: json[address].path
                    });
                    let sortedUtxos = (0, _lodash.sortBy)(json[address].utxos, utxo => utxo.value.valueOf());
                    utxoData[address] = sortedUtxos.map(utxo => Object.assign({}, utxo, {
                        address: addr,
                        value: currency.parse(utxo.value)
                    }));
                });
                let col = new UtxoCollection({
                    currency
                });
                col._data = Object.freeze(utxoData);
                return col;
            }
            clone() {
                return UtxoCollection.fromArray(this.toArray(), Object.assign({}, this));
            }
            equals(utxoCol) {
                return (0, _isEqual2.default)(this.toJSON(), utxoCol.toJSON());
            }
            difference(utxoCol) {
                const txMap = col => {
                    let map = {};
                    col.toArray().forEach(utxo => {
                        let key = `${utxo.txId}/${utxo.vout}`;
                        map[key] = utxo;
                    });
                    return map;
                };
                let thisMap = txMap(this);
                let otherMap = txMap(utxoCol);
                let retUtxos = [];
                Object.keys(thisMap).forEach(key => {
                    if (!otherMap[key]) retUtxos.push(thisMap[key]);
                });
                return UtxoCollection.fromArray(retUtxos, Object.assign({}, this));
            }
            getAddressUtxos(address) {
                (0, _assert2.default)(address.toString() in this._data, `${address} is not present in this UTXO collection`);
                return UtxoCollection.fromArray(this._data[address], Object.assign({}, this));
            }
            getTxIdUtxos(txId) {
                var arrUtxos = this.toArray().filter(utxo => utxo.txId === txId);
                return UtxoCollection.fromArray(arrUtxos, Object.assign({}, this));
            }
            getAddressesForTxId(txId) {
                let arrUtxos = this.toArray().filter(utxo => utxo.txId === txId);
                let arrAddrs = arrUtxos.map(utxo => utxo.address);
                return _addressSet2.default.fromArray(arrAddrs);
            }
            getWifMap(accountHDKey) {
                let map = {};
                this.addresses.forEach(function(addr) {
                    let privWif = accountHDKey.derive(addr.meta.path, 'spendable', {
                        spendable: true
                    }).privateEncoded;
                    map[addr.toString()] = privWif;
                });
                return map;
            }
            getAddressPathsMap() {
                return this.addresses.reduce((obj, addr) => {
                    return Object.assign(obj, {
                        [addr.toString()]: addr.meta.path
                    });
                }, {});
            }
            hasAddressUtxos(address) {
                return String(address) in this._data;
            }
            inspect() {
                return `<UtxoCollection size: ${this.size}, value: ${this.value.toString()}>`;
            }
            isEmpty() {
                return this._data == null || Object.keys(this._data).length === 0;
            }
            merge(utxoCol) {
                let currentUtxos = this;
                for (let address of utxoCol.addresses) {
                    currentUtxos = currentUtxos.setAddressUtxos(address, utxoCol.getAddressUtxos(address));
                }
                return currentUtxos;
            }
            removeAddressUtxos(address) {
                let newData = Object.assign({}, this._data);
                delete newData[address.toString()];
                let col = new UtxoCollection(Object.assign({}, this));
                col._data = Object.freeze(newData);
                return col;
            }
            select(amount, feeEstimator) {
                const emptyUtxoCol = UtxoCollection.createEmpty({
                    currency: this.currency
                });
                if (amount.gt(this.value)) return [emptyUtxoCol, this.clone()];
                const selectFromGroup = (utxos, minimumAmount) => {
                    let selected = emptyUtxoCol;
                    let remaining = emptyUtxoCol;
                    if (utxos.size === 0) return [selected, remaining];
                    let arrUtxos = minimumAmount.defaultUnit.unitName === 'BTC' ? (0, _lodash.sortBy)(utxos.toArray(), utxo => !utxo.confirmations, val => val.valueOf()) : (0, _lodash.sortBy)(utxos.toArray(), val => val.valueOf());
                    let selectedUtxos = [];
                    let currency = arrUtxos[0].value.unitType;
                    let sum = currency.ZERO;
                    for (let utxo of arrUtxos) {
                        selectedUtxos.push(utxo);
                        sum = sum.add(utxo.value);
                        if (sum.gte(minimumAmount)) {
                            selected = UtxoCollection.fromArray(selectedUtxos, Object.assign({}, this));
                            remaining = utxos.difference(selected);
                            return [selected, remaining];
                        }
                    }
                    selected = UtxoCollection.fromArray(selectedUtxos, Object.assign({}, this));
                    remaining = utxos.difference(selected);
                    return [selected, remaining];
                };
                let [selected, remaining] = selectFromGroup(this, amount);
                const fee = feeEstimator({
                    inputs: selected
                });
                const total = amount.add(fee);
                if (total.gt(selected.value)) {
                    if (total.lte(this.value)) {
                        const newFee = feeEstimator({
                            inputs: remaining
                        });
                        const newTotal = total.add(newFee);
                        if (newTotal.gte(this.value)) return [this, emptyUtxoCol];
                        const [feeSelected, feeRemaining] = selectFromGroup(remaining, fee.add(newFee));
                        remaining = feeRemaining;
                        selected = selected.union(feeSelected);
                    } else {
                        return [emptyUtxoCol, this];
                    }
                }
                return [selected, remaining];
            }
            updateConfirmations(txs) {
                return UtxoCollection.fromArray(this.toArray().map(utxo => {
                    const tx = txs.find(tx => tx.txId === utxo.txId);
                    if (tx) utxo.confirmations = tx.confirmations;
                    return utxo;
                }), Object.assign({}, this));
            }
            setAddressUtxos(address, utxos) {
                let {
                    addressMap
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                if (Array.isArray(utxos)) {
                    if (utxos.length === 0) return this.removeAddressUtxos(address);
                    else return UtxoCollection.fromArray(utxos, Object.assign({}, this, {
                        addressMap
                    }));
                }(0, _assert2.default)(utxos instanceof UtxoCollection, 'utxos must be an Array or UtxoCollection');
                if (utxos.size === 0) return this.removeAddressUtxos(address);
                let newUtxos = Object.assign({}, this._data, {
                    [address.toString()]: utxos.toArray()
                });
                let col = new UtxoCollection(Object.assign({}, this));
                col._data = Object.freeze(newUtxos);
                return col;
            }
            toArray() {
                return [].concat.apply([], Object.values(this._data));
            }
            toJSON() {
                let jsonMap = {};
                this.addresses.forEach(addr => {
                    let address = addr.toString();
                    let addrUtxoObj = {};
                    addrUtxoObj.address = address;
                    addrUtxoObj.path = addr.meta.path;
                    let sortedUtxos = (0, _lodash.sortBy)(this._data[address], utxo => utxo.value.valueOf());
                    addrUtxoObj.utxos = sortedUtxos.map(utxo => {
                        utxo = Object.assign({}, utxo, {
                            value: utxo.value.toString()
                        });
                        delete utxo.address;
                        return utxo;
                    });
                    jsonMap[address] = addrUtxoObj;
                });
                return jsonMap;
            }
            union(utxos) {
                let arr1 = this.toArray();
                let arr2 = utxos.toArray();
                return UtxoCollection.fromArray(arr1.concat(arr2), Object.assign({}, this));
            }
            get addresses() {
                return Object.keys(this._data).map(addr => this._data[addr][0].address);
            }
            get empty() {
                return this._data == null || Object.keys(this._data).length === 0;
            }
            get size() {
                return this.toArray().length;
            }
            get txIds() {
                return (0, _lodash.uniq)(this.toArray().map(utxo => utxo.txId));
            }
            get value() {
                return this.toArray().reduce((sum, utxo) => sum.add(utxo.value), this.currency.ZERO);
            }
        };
        exports.default = UtxoCollection;

        function pickCurrencyFromArray(utxos) {
            for (let utxo of utxos) {
                if (typeof utxo.value === 'object' && utxo.value.unitType) return utxo.value.unitType;
            }
        }

    }, {
        "192": 192,
        "81": 81,
        "82": 82,
        "undefined": undefined
    }],
    90: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _reselect = require('reselect');
        var _util = require(9);
        var _pairingData = require(140);
        var _pairingData2 = _interopRequireDefault(_pairingData);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.accounts, _pairingData2.default, (accounts, getPairingData) => {
            return function getChangeAddress(asset) {
                const acct = accounts[asset];
                const {
                    chain,
                    hdkey
                } = acct;
                const chainIndex = 1;
                const pairingData = getPairingData(asset);
                return (0, _util.addressFromChainParams)(asset, hdkey, pairingData, chainIndex, chain[chainIndex]);
            };
        });

    }, {
        "140": 140,
        "82": 82,
        "9": 9,
        "undefined": undefined
    }],
    91: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_getReceiveAddress2.default, getReceiveAddress => {
            return function getExchangeAddress(coinName) {
                return getReceiveAddress(coinName, 0);
            };
        });

    }, {
        "82": 82,
        "92": 92,
        "undefined": undefined
    }],
    92: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _reselect = require('reselect');
        var _util = require(9);
        var _pairingData = require(140);
        var _pairingData2 = _interopRequireDefault(_pairingData);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.accounts, _pairingData2.default, (accounts, getPairingData) => {
            return function getReceiveAddress(asset, i) {
                if (global.DEBUG_ETH_ADDRESS && (asset === 'ethereum' || _assets2.default[asset].isEthereumToken)) return global.DEBUG_ETH_ADDRESS;
                if (global.DEBUG_RIPPLE_ADDRESS && asset === 'ripple') return global.DEBUG_RIPPLE_ADDRESS;
                const acct = accounts[asset];
                const {
                    chain,
                    hdkey
                } = acct;
                let chainIndex = 0;
                let j = i === undefined ? chain[chainIndex] : i;
                const pairingData = getPairingData(asset);
                return (0, _util.addressFromChainParams)(asset, hdkey, pairingData, chainIndex, j);
            };
        });

    }, {
        "140": 140,
        "184": 184,
        "82": 82,
        "9": 9,
        "undefined": undefined
    }],
    93: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _reselect = require('reselect');
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getExchangeAddress = require(91);
        var _getExchangeAddress2 = _interopRequireDefault(_getExchangeAddress);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.txLog, _getReceiveAddress2.default, _getExchangeAddress2.default, (txLog, getReceiveAddress, getExchangeAddress) => {
            return function getReceiveAddresses(asset) {
                const txSet = txLog[asset];
                if (!txSet) return _addressSet2.default.EMPTY;
                const firstRecvAddr = getReceiveAddress(asset, 0);
                const exchAddr = getExchangeAddress(asset);
                let addressesUsed = txSet.addresses;
                if (String(firstRecvAddr) !== String(exchAddr)) addressesUsed = addressesUsed.delete(exchAddr);
                addressesUsed = addressesUsed.add(firstRecvAddr);
                const newAddress = getReceiveAddress(asset, addressesUsed.size);
                let ac = addressesUsed.add(newAddress);
                ac = ac.sort(_addressSet.PATH_SORTER);
                return ac;
            };
        });

    }, {
        "81": 81,
        "91": 91,
        "92": 92,
        "undefined": undefined
    }],
    94: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _reselect = require('reselect');
        var _getExchangeAddress = require(91);
        var _getExchangeAddress2 = _interopRequireDefault(_getExchangeAddress);
        var _getReceiveAddresses = require(93);
        var _getReceiveAddresses2 = _interopRequireDefault(_getReceiveAddresses);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.accounts, _getReceiveAddresses2.default, _getExchangeAddress2.default, (accounts, getReceiveAddresses, getExchangeAddress) => {
            return function getRecvExchAddresses(asset) {
                const acct = accounts[asset];
                if (!acct) return _addressSet2.default.EMPTY;
                const receiveAddrs = getReceiveAddresses(asset);
                const exchangeAddrs = _addressSet2.default.fromArray([getExchangeAddress(asset)]);
                return receiveAddrs.union(exchangeAddrs);
            };
        });

    }, {
        "81": 81,
        "91": 91,
        "93": 93,
        "undefined": undefined
    }],
    95: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const availableAssetsCount = Object.values(_assets2.default).filter(asset => asset.available).length;
        exports.default = (0, _reselect.createSelector)(_available2.default, availableAssets => Object.keys(availableAssets).length < availableAssetsCount);

    }, {
        "184": 184,
        "96": 96,
        "undefined": undefined
    }],
    96: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _assetsDisabled = require(103);
        var _assetsDisabled2 = _interopRequireDefault(_assetsDisabled);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_assetsDisabled2.default, configAssetsDisabled => {
            return lodash.pickBy(_assets2.default, asset => {
                const disabled = configAssetsDisabled[asset.name];
                return asset.available && (disabled === false || disabled === undefined && asset.defaultEnabled);
            });
        });

    }, {
        "103": 103,
        "184": 184,
        "undefined": undefined
    }],
    97: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _semver = require('semver');
        var _semver2 = _interopRequireDefault(_semver);
        var _appConfig = require(80);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(state => state.remoteConfig, remoteConfig => {
            const data = lodash.get(remoteConfig, 'assets.bitcoin.disabled');
            if (!data || !_semver2.default.satisfies(_appConfig.PACKAGE.version, data.semver)) return false;
            return data;
        });

    }, {
        "80": 80,
        "undefined": undefined
    }],
    98: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_available2.default, state => state.txLog, (assets, txLog) => {
            return lodash.mapValues(assets, asset => !!txLog[`${asset.name}Loaded`] || asset.name === 'monero');
        });

    }, {
        "96": 96,
        "undefined": undefined
    }],
    99: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _cryptoTotal = require(100);
        var _cryptoTotal2 = _interopRequireDefault(_cryptoTotal);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const XRP_THRESHOLD = _assets2.default.ripple.currency.XRP(50);
        exports.default = (0, _reselect.createSelector)(_cryptoTotal2.default, balances => {
            return balances.ripple.lt(XRP_THRESHOLD);
        });

    }, {
        "100": 100,
        "184": 184,
        "undefined": undefined
    }],
    100: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _reselect = require('reselect');
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const historyBasedAssets = Object.values(_assets2.default).filter(asset => {
            return asset.isAccountBased && asset.name !== 'monero' && !asset.isOmniProperty;
        });
        const historyBasedSelectorCache = {};
        const historyBasedSelector = (0, _reselect.createSelector)(state => state.txLog, state => state.accounts, _getReceiveAddress2.default, (txLogs, accounts, getReceiveAddress) => {
            function getBalance(asset) {
                const txset = txLogs[asset.name];
                const zero = asset.currency.ZERO;
                if (!(txset instanceof _txSet2.default)) return zero;
                const address = accounts[asset.name] ? getReceiveAddress(asset.name).toString().toLowerCase() : '';
                if (_lodash2.default.get(historyBasedSelectorCache, `${asset.name}.address`) !== address || _lodash2.default.get(historyBasedSelectorCache, `${asset.name}.txset`) !== txset) {
                    const total = Array.from(txset).reduce((total, tx) => {
                        let change = tx.coinAmount;
                        if (tx.error) change = zero;
                        if (tx.feeAmount && tx.feeAmount.unitType === change.unitType) change = change.subtract(tx.feeAmount);
                        return total.add(change);
                    }, zero);
                    historyBasedSelectorCache[asset.name] = {
                        address,
                        txset,
                        total
                    };
                }
                return historyBasedSelectorCache[asset.name].total;
            }
            return historyBasedAssets.reduce((obj, asset) => Object.assign(obj, {
                [asset.name]: getBalance(asset)
            }), {});
        });
        const accountBasedAssets = _lodash2.default.difference(Object.values(_assets2.default), historyBasedAssets).filter(asset => asset.isAccountBased);
        const accountBasedSelector = (0, _reselect.createSelector)(state => state.accountStates, accountStates => {
            return accountBasedAssets.reduce((obj, asset) => {
                const balance = _lodash2.default.get(accountStates, `${asset.name}.balance`, asset.currency.ZERO);
                return Object.assign(obj, {
                    [asset.name]: balance
                });
            }, {});
        });
        const utxoBasedAssets = _lodash2.default.difference(Object.values(_assets2.default), historyBasedAssets, accountBasedAssets);
        const utxoBasedSelector = (0, _reselect.createSelector)(state => state.utxos, utxoMap => {
            return utxoBasedAssets.reduce((obj, asset) => {
                const utxos = utxoMap[asset.name];
                const total = utxos ? utxos.value : asset.currency.ZERO;
                return Object.assign(obj, {
                    [asset.name]: total
                });
            }, {});
        });
        exports.default = (0, _reselect.createSelector)(historyBasedSelector, accountBasedSelector, utxoBasedSelector, function() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return Object.assign({}, ...args);
        });

    }, {
        "184": 184,
        "86": 86,
        "92": 92,
        "undefined": undefined
    }],
    101: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(state => state.utxos, _coinTotalAmounts2.default, (utxoMap, coinTotalAmounts) => {
            function getAmount(asset) {
                if (asset.isEthereumToken || asset.isOmniProperty) {
                    return coinTotalAmounts[asset.name];
                }
                if (asset.hasUTXO && asset.feePerKB) {
                    const utxos = utxoMap[asset.name] || _utxoCollection2.default.createEmpty({
                        currency: asset.currency
                    });
                    const fee = (0, _feeEstimator2.default)(asset)({
                        inputs: utxos,
                        outputs: ['P2PKH', 'P2PKH']
                    });
                    return coinTotalAmounts[asset.name].subtract(fee);
                }
                if (asset.accountReserve) {
                    return coinTotalAmounts.ripple.subtract(asset.fee).subtract(asset.accountReserve);
                }
                return coinTotalAmounts[asset.name].subtract(asset.fee);
            }
            return lodash.mapValues(_assets2.default, asset => getAmount(asset).clampLowerZero());
        });

    }, {
        "102": 102,
        "184": 184,
        "255": 255,
        "89": 89,
        "undefined": undefined
    }],
    102: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _cryptoTotal = require(100);
        var _cryptoTotal2 = _interopRequireDefault(_cryptoTotal);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = _cryptoTotal2.default;

    }, {
        "100": 100
    }],
    103: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _configKeys = require(206);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.config, config => {
            return Object.values(_assets2.default).reduce((obj, asset) => {
                const disabled = config.get(`${_configKeys.assets}.${asset.name}.disabled`);
                if (disabled !== undefined) obj[asset.name] = !!disabled;
                return obj;
            }, {});
        });

    }, {
        "184": 184,
        "206": 206,
        "undefined": undefined
    }],
    104: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _currencyFiat = require(208);
        var _currencyFiat2 = _interopRequireDefault(_currencyFiat);
        var _reselect = require('reselect');
        var _configKeys = require(206);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.config, config => {
            const fiat = config.get(_configKeys.fiatUnit);
            return Object.values(_currencyFiat2.default).find(currency => fiat in currency) || _currencyFiat2.default.USD;
        });

    }, {
        "206": 206,
        "208": 208,
        "undefined": undefined
    }],
    105: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _configKeys = require(206);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _configDefault = require(204);
        var _configDefault2 = _interopRequireDefault(_configDefault);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const MARKET_PRICES_DEFAULT = lodash.get(_configDefault2.default, _configKeys.marketPrices);
        exports.default = (0, _reselect.createSelector)(state => state.config, config => {
            const marketPrices = config.get(_configKeys.marketPrices);
            if (!Array.isArray(marketPrices)) return [...MARKET_PRICES_DEFAULT];
            if (marketPrices.length === MARKET_PRICES_DEFAULT.length) return marketPrices;
            else return [...MARKET_PRICES_DEFAULT];
        });

    }, {
        "204": 204,
        "206": 206,
        "undefined": undefined
    }],
    106: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.txReceivedEnabled = undefined;
        var _reselect = require('reselect');
        var _configKeys = require(206);
        const txReceivedEnabled = exports.txReceivedEnabled = (0, _reselect.createSelector)(state => state.config, config => config.get(_configKeys.notificationsTxReceivedEnabled));

    }, {
        "206": 206,
        "undefined": undefined
    }],
    107: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _configKeys = require(206);
        exports.default = (0, _reselect.createSelector)(state => state.config, config => config.get(_configKeys.themeName));

    }, {
        "206": 206,
        "undefined": undefined
    }],
    108: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.threshold = undefined;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _hasTokens = require(126);
        var _hasTokens2 = _interopRequireDefault(_hasTokens);
        var _reselect = require('reselect');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const threshold = exports.threshold = _assets2.default.ethereum.currency.ETH('0.005');
        exports.default = (0, _reselect.createSelector)(state => state.txLog, _coinTotalAmounts2.default, _hasTokens2.default, (txLog, coinTotalAmounts, hasTokens) => {
            if (!txLog.ethereumLoaded) return true;
            if (coinTotalAmounts.ethereum.gte(threshold)) return true;
            return !hasTokens;
        });

    }, {
        "102": 102,
        "126": 126,
        "184": 184,
        "undefined": undefined
    }],
    109: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _marketInfoKeys = require(113);
        var _marketInfoKeys2 = _interopRequireDefault(_marketInfoKeys);
        var _minimums = require(116);
        var _minimums2 = _interopRequireDefault(_minimums);
        var _maximums = require(115);
        var _maximums2 = _interopRequireDefault(_maximums);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_available2.default, _marketInfoKeys2.default, _minimums2.default, _maximums2.default, state => state.exchange.coinsOnline, (coinsInExodus, marketInfo, minimums, maximums, coinsOnline) => {
            return function getPairOnline(fromCoin, toCoin) {
                if (!coinsInExodus[fromCoin] || shapeShiftAvailability(coinsOnline, fromCoin) !== 'available') return false;
                if (!coinsInExodus[toCoin] || shapeShiftAvailability(coinsOnline, toCoin) !== 'available') return false;
                const pair = lodash.get(marketInfo, `${fromCoin}.${toCoin}`);
                const minmaxOK = minimums[fromCoin][toCoin] < maximums[fromCoin][toCoin];
                return pair && pair.limit > 0 && pair.maxLimit > 0 && minmaxOK;
            };
        });

        function shapeShiftAvailability(assetsOnline, asset) {
            if (typeof assetsOnline[asset] === 'string') return assetsOnline[asset];
            const assetObj = _assets2.default[asset];
            return assetsOnline[assetObj.properName.toLowerCase()];
        }

    }, {
        "113": 113,
        "115": 115,
        "116": 116,
        "184": 184,
        "96": 96,
        "undefined": undefined
    }],
    110: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getRate = require(111);
        var _getRate2 = _interopRequireDefault(_getRate);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_getRate2.default, getRate => {
            return function getRateString(fromAsset, toAsset, fromAmount) {
                const rate = getRate(fromAsset, toAsset, fromAmount);
                const rateStr = `${_assets2.default[fromAsset].currency.defaultUnit(1).toString()} = ${rate.toString()}`;
                return rateStr;
            };
        });

    }, {
        "111": 111,
        "184": 184,
        "undefined": undefined
    }],
    111: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _reselect = require('reselect');
        var _marketInfoConversions = require(112);
        var _marketInfoConversions2 = _interopRequireDefault(_marketInfoConversions);
        var _minimums = require(116);
        var _minimums2 = _interopRequireDefault(_minimums);
        var _maximums = require(115);
        var _maximums2 = _interopRequireDefault(_maximums);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_marketInfoConversions2.default, _minimums2.default, _maximums2.default, (marketInfoConversions, minimums, maximums) => {
            return function getRate(fromAsset, toAsset, fromAmount) {
                const zero = _assets2.default[toAsset].currency.ZERO;
                const min = minimums[fromAsset][toAsset];
                const max = maximums[fromAsset][toAsset];
                let conv;
                try {
                    conv = marketInfoConversions[fromAsset][toAsset];
                    (0, _assert2.default)(typeof conv === 'function');
                } catch (e) {
                    return zero;
                }
                let amt = fromAmount || max;
                if (amt.isZero()) amt = max;
                if (amt.lt(min)) amt = min;
                if (amt.gt(max)) amt = max;
                let toAmount;
                try {
                    toAmount = conv(amt, {
                        inclMinerFee: true
                    }).to(_assets2.default[toAsset].displayUnit);
                } catch (e) {
                    return zero;
                }
                const rate = (toAmount.toNumber() / amt.toNumber()).toFixed(8);
                return _assets2.default[toAsset].currency.defaultUnit(rate);
            };
        });

    }, {
        "112": 112,
        "115": 115,
        "116": 116,
        "184": 184,
        "undefined": undefined
    }],
    112: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _marketInfoNumbers = require(114);
        var _marketInfoNumbers2 = _interopRequireDefault(_marketInfoNumbers);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _aureus = require(192);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_marketInfoNumbers2.default, marketInfo => {
            let market = {};
            Object.keys(marketInfo).forEach(fromCoin => {
                Object.keys(marketInfo[fromCoin]).forEach(toCoin => {
                    if (!market[fromCoin]) market[fromCoin] = {};
                    let info = marketInfo[fromCoin][toCoin];

                    function convert(numberUnit) {
                        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                            inclMinerFee: true
                        };
                        let conversionFn = (0, _aureus.conversion)(_assets2.default[fromCoin].currency.defaultUnit(1), info.rate);
                        let minerFee = opts.inclMinerFee ? info.minerFee : info.minerFee.unitType.ZERO;
                        let result;
                        if (numberUnit.unitType === _assets2.default[fromCoin].currency) {
                            result = conversionFn(numberUnit).subtract(minerFee);
                        } else if (numberUnit.unitType === _assets2.default[toCoin].currency) {
                            result = conversionFn(numberUnit.add(minerFee));
                        }
                        result = result.toBase().round().toDefault().toFixed(8);
                        if (result.isNegative) result = result.unitType.ZERO.to(result.unit);
                        return result;
                    }
                    market[fromCoin][toCoin] = convert;
                });
            });
            return market;
        });

    }, {
        "114": 114,
        "184": 184,
        "192": 192,
        "undefined": undefined
    }],
    113: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _pairs = require(23);
        var pairs = _interopRequireWildcard(_pairs);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(state => state.exchange.marketInfo, marketInfo => {
            if (!Array.isArray(marketInfo) || marketInfo.length === 0) return {};
            return marketInfo.reduce((marketInfoKeys, info) => {
                if (pairs.isValid(info.pair)) {
                    const [fromCoin, toCoin] = pairs.toCoins(info.pair);
                    lodash.set(marketInfoKeys, `${fromCoin}.${toCoin}`, lodash.cloneDeep(info));
                }
                return marketInfoKeys;
            }, {});
        });

    }, {
        "23": 23,
        "undefined": undefined
    }],
    114: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _marketInfoKeys = require(113);
        var _marketInfoKeys2 = _interopRequireDefault(_marketInfoKeys);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_marketInfoKeys2.default, marketInfo => {
            let market = {};
            Object.keys(marketInfo).forEach(fromCoin => {
                Object.keys(marketInfo[fromCoin]).forEach(toCoin => {
                    if (!market[fromCoin]) market[fromCoin] = {};
                    let info = cleanNumbers(marketInfo[fromCoin][toCoin]);
                    let newInfo = Object.assign({}, info, {
                        rate: _assets2.default[toCoin].currency.defaultUnit(info.rate),
                        minerFee: _assets2.default[toCoin].currency.defaultUnit(info.minerFee),
                        limit: _assets2.default[fromCoin].currency.defaultUnit(info.limit),
                        maxLimit: _assets2.default[fromCoin].currency.defaultUnit(info.maxLimit),
                        minimum: _assets2.default[fromCoin].currency.defaultUnit(info.minimum || info.min)
                    });
                    delete newInfo.min;
                    market[fromCoin][toCoin] = newInfo;
                });
            });
            return market;
        });

        function cleanNumbers() {
            let info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            const cleanFloatForLimit = num => parseFloat((parseFloat(num) || 0).toPrecision(14));
            let newInfo = Object.assign({}, info);
            newInfo.rate = parseFloat(newInfo.rate) || 0;
            newInfo.minerFee = parseFloat(newInfo.minerFee) || 0;
            newInfo.limit = cleanFloatForLimit(info.limit);
            newInfo.maxLimit = cleanFloatForLimit(info.maxLimit);
            info.minimum = parseFloat(newInfo.minimum) || 0 || parseFloat(newInfo.min) || 0;
            return Object.assign({}, info, newInfo);
        }

    }, {
        "113": 113,
        "184": 184,
        "undefined": undefined
    }],
    115: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _marketInfoNumbers = require(114);
        var _marketInfoNumbers2 = _interopRequireDefault(_marketInfoNumbers);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const DECREASE = 0.95;
        exports.default = (0, _reselect.createSelector)(_marketInfoNumbers2.default, marketInfo => {
            let maximums = {};
            Object.keys(_assets2.default).forEach(fromCoin => {
                Object.keys(_assets2.default).forEach(toCoin => {
                    if (!maximums[fromCoin]) maximums[fromCoin] = {};
                    let ssMax;
                    try {
                        const {
                            limit,
                            maxLimit
                        } = marketInfo[fromCoin][toCoin];
                        ssMax = Math.max(maxLimit.toNumber(), limit.toNumber()) * DECREASE;
                    } catch (e) {
                        ssMax = 0;
                    }
                    const value = _assets2.default[fromCoin].currency.defaultUnit(ssMax).toBase().floor().toDefault().toFixed(8, 'floor');
                    maximums[fromCoin][toCoin] = value;
                });
            });
            return maximums;
        });

    }, {
        "114": 114,
        "184": 184,
        "undefined": undefined
    }],
    116: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getRandomDecreaseFactor = getRandomDecreaseFactor;
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _reselect = require('reselect');
        var _marketInfoNumbers = require(114);
        var _marketInfoNumbers2 = _interopRequireDefault(_marketInfoNumbers);
        var _conversionsUsd = require(118);
        var _conversionsUsd2 = _interopRequireDefault(_conversionsUsd);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _currencyFiat = require(208);
        var _currencyFiat2 = _interopRequireDefault(_currencyFiat);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const INCREASE = 1.05;
        const ASSET_MIN_BTC = 39.5;
        const ASSET_MIN_NOT_BTC = 18;
        exports.default = (0, _reselect.createSelector)(_marketInfoNumbers2.default, state => state.remoteConfig, _conversionsUsd2.default, (marketInfo, remoteConfig, fiatConversionsUSD) => {
            const minimums = _lodash2.default.mapValues(_assets2.default, () => ({}));
            Object.keys(_assets2.default).forEach(fromCoin => {
                const configMin = parseFloat(_lodash2.default.get(remoteConfig, `assets.${fromCoin}.min`, 0));
                Object.keys(_assets2.default).forEach(toCoin => {
                    let ssMin = 0;
                    try {
                        ssMin = marketInfo[fromCoin][toCoin].minimum.toNumber() * INCREASE;
                    } catch (e) {}
                    const minExchangeAmountRaw = toCoin === 'bitcoin' ? ASSET_MIN_BTC : ASSET_MIN_NOT_BTC;
                    const minExchangeAmountRaw2 = minExchangeAmountRaw * getRandomDecreaseFactor(fromCoin, toCoin);
                    const minExchangeAmount = _currencyFiat2.default.USD.defaultUnit(minExchangeAmountRaw2.toFixed(2));
                    const marketMin = fiatConversionsUSD[fromCoin](minExchangeAmount).toNumber();
                    const min = Math.max(configMin, marketMin, ssMin);
                    const value = _assets2.default[fromCoin].currency.defaultUnit(min).toBase().ceil().toDefault().toFixed(8, 'ceil');
                    minimums[fromCoin][toCoin] = value;
                });
            });
            return minimums;
        });
        const _randomDecreaseFactors = {};

        function getRandomDecreaseFactor(fromCoin, toCoin) {
            const key = `${fromCoin}_${toCoin}`;
            if (_randomDecreaseFactors[key] === undefined) {
                _randomDecreaseFactors[key] = _lodash2.default.random(0.95, 0.99);
            }
            return _randomDecreaseFactors[key];
        }

    }, {
        "114": 114,
        "118": 118,
        "184": 184,
        "208": 208,
        "undefined": undefined
    }],
    117: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        exports.default = (0, _reselect.createSelector)(state => state.exchange.status, status => {
            switch (status) {
                case 'waiting':
                    return 1;
                case 'received':
                case 'no_deposits':
                case 'complete':
                    return 2;
                case 'complete_tx':
                case 'error':
                    return 3;
                default:
                    return 0;
            }
        });

    }, {
        "undefined": undefined
    }],
    118: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _currencyFiat = require(208);
        var _currencyFiat2 = _interopRequireDefault(_currencyFiat);
        var _prices = require(130);
        var _prices2 = _interopRequireDefault(_prices);
        var _conversions = require(119);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_prices2.default, lodash.partial(_conversions.createConversions, _currencyFiat2.default.USD));

    }, {
        "119": 119,
        "130": 130,
        "208": 208,
        "undefined": undefined
    }],
    119: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createConversions = createConversions;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _prices = require(130);
        var _prices2 = _interopRequireDefault(_prices);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _aureus = require(192);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_fiat2.default, _prices2.default, createConversions);

        function createConversions(fiatCurrency, marketCoins) {
            return lodash.mapValues(_assets2.default, asset => {
                const marketValue = lodash.get(marketCoins, [asset.name, fiatCurrency.defaultUnit.unitName]);
                const fiat = marketValue ? fiatCurrency.defaultUnit(marketValue) : fiatCurrency.ZERO;
                const convFn = (0, _aureus.conversion)(asset.currency.defaultUnit(1), fiat);
                return numberUnit => {
                    if (fiat.isZero()) {
                        return numberUnit.unitType === fiatCurrency ? asset.currency.ZERO : fiatCurrency.ZERO;
                    }
                    return convFn(numberUnit);
                };
            });
        }

    }, {
        "104": 104,
        "130": 130,
        "184": 184,
        "192": 192,
        "undefined": undefined
    }],
    120: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _currencyFiat = require(208);
        var _currencyFiat2 = _interopRequireDefault(_currencyFiat);
        var _conversionsUsd = require(118);
        var _conversionsUsd2 = _interopRequireDefault(_conversionsUsd);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const USD = _currencyFiat2.default.USD;
        exports.default = (0, _reselect.createSelector)(_conversionsUsd2.default, USDConversions => {
            return cryptoCurrency => {
                if (cryptoCurrency.unitType.label === USD.label) return cryptoCurrency;
                const asset = cryptoCurrency.unitType.label;
                if (!(asset in USDConversions)) return USD.ZERO;
                return USDConversions[asset](cryptoCurrency);
            };
        });

    }, {
        "118": 118,
        "208": 208,
        "undefined": undefined
    }],
    121: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_fiat2.default, _conversions2.default, (fiat, fiatConversions) => {
            return cryptoCurrency => {
                if (cryptoCurrency.unitType.label === fiat.label) return cryptoCurrency;
                const asset = cryptoCurrency.unitType.label;
                if (!(asset in fiatConversions)) return fiat.ZERO;
                return fiatConversions[asset](cryptoCurrency);
            };
        });

    }, {
        "104": 104,
        "119": 119,
        "undefined": undefined
    }],
    122: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _reselect = require('reselect');
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _total = require(123);
        var _total2 = _interopRequireDefault(_total);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const totalSum = 100;
        exports.default = (0, _reselect.createSelector)(_available2.default, _coinTotalAmounts2.default, _total2.default, _getValue2.default, (availableAssets, coinTotalAmounts, fiatTotal, getFiatValue) => {
            const total = fiatTotal.toNumber();
            const percentageBase = _.mapValues(asset => {
                return getFiatValue(coinTotalAmounts[asset.name]).toNumber() * totalSum / total;
            }, availableAssets);
            const percentage = _.mapValues(value => Math.floor(value), percentageBase);
            const diff = totalSum - _.pipe([_.values, _.sum])(percentage);
            const sortfn = assetName => [1 - percentageBase[assetName] % 1, assetName];
            const assetNames = _.pipe(_.keys, _.sortBy(sortfn))(availableAssets).slice(0, diff);
            for (const assetName of assetNames) percentage[assetName] += 1;
            return percentage;
        });

    }, {
        "102": 102,
        "121": 121,
        "123": 123,
        "96": 96,
        "undefined": undefined
    }],
    123: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = (0, _reselect.createSelector)(_available2.default, _coinTotalAmounts2.default, _fiat2.default, _getValue2.default, (assetsAvailable, coinTotalAmounts, fiat, getFiatValue) => {
            return lodash.reduce(coinTotalAmounts, (total, amount, assetName) => {
                if (!assetsAvailable[assetName]) return total;
                return total.add(getFiatValue(amount));
            }, fiat.ZERO);
        });

    }, {
        "102": 102,
        "104": 104,
        "121": 121,
        "96": 96,
        "undefined": undefined
    }],
    124: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.utxos, utxoMap => {
            return function(assetname) {
                let {
                    amount,
                    gasLimit
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const asset = _assets2.default[assetname];
                if ((asset.hasUTXO || asset.isOmniProperty) && asset.feePerKB) {
                    if (asset.isOmniProperty) amount = _assets2.default.bitcoin.currency.baseUnit(2730);
                    if (!amount) return asset.feePerKB;
                    const baseAsset = asset.isOmniProperty ? _assets2.default.bitcoin : asset;
                    const utxos = utxoMap[baseAsset.name] || _utxoCollection2.default.createEmpty({
                        currency: baseAsset.currency
                    });
                    const feeEstimator = (0, _feeEstimator2.default)(asset, {
                        defaultOptions: {
                            outputs: ['P2PKH', 'P2PKH']
                        }
                    });
                    const [selected, remaining] = utxos.select(amount, feeEstimator);
                    return feeEstimator({
                        inputs: selected.size > 0 ? selected : remaining
                    });
                }
                if (['ethereum', 'ethereumclassic'].includes(asset.name) || asset.isEthereumToken) {
                    if (!gasLimit) return asset.fee;
                    const baseAsset = asset.name === 'ethereumclassic' ? _assets2.default.ethereumclassic : _assets2.default.ethereum;
                    return baseAsset.getFee(gasLimit);
                }
                return asset.fee;
            };
        });

    }, {
        "184": 184,
        "255": 255,
        "89": 89,
        "undefined": undefined
    }],
    125: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_coinTotalAmounts2.default, coinTotals => Object.values(coinTotals).some(total => !total.isZero()));

    }, {
        "102": 102,
        "undefined": undefined
    }],
    126: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _reselect = require('reselect');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const tokens = Object.values(_assets2.default).filter(asset => asset.isEthereumToken);
        exports.default = (0, _reselect.createSelector)(state => state.txLog, _coinTotalAmounts2.default, (txLog, coinTotalAmounts) => {
            return tokens.some(token => txLog[token.name + 'Loaded'] && !coinTotalAmounts[token.name].isZero());
        });

    }, {
        "102": 102,
        "184": 184,
        "undefined": undefined
    }],
    127: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _reselect = require('reselect');
        var _cryptocompareUtil = require(207);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const currencyToAssetMap = new Map();
        for (const asset of Object.values(_assets2.default)) currencyToAssetMap.set(asset.currency, asset.name);
        exports.default = (0, _reselect.createSelector)(state => state.marketHistory, _fiat2.default, (marketHistory, fiat) => {
            return function getHistoricalFiatValue(assetAmount, time) {
                const asset = currencyToAssetMap.get(assetAmount.unitType);
                const historicalPrices = lodash.get(marketHistory, `[${fiat.defaultUnit.unitName}][${asset}]`);
                if (!historicalPrices) return null;
                if (historicalPrices instanceof Error) return historicalPrices;
                const price = (0, _cryptocompareUtil.getPrice)(historicalPrices, time);
                if (price == null) return new Error(`no price for ${time}`);
                return fiat.defaultUnit((price * assetAmount.toNumber()).toFixed(8));
            };
        });

    }, {
        "104": 104,
        "184": 184,
        "207": 207,
        "undefined": undefined
    }],
    128: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _prices = require(130);
        var _prices2 = _interopRequireDefault(_prices);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_prices2.default, _fiat2.default, (marketPrices, configFiat) => {
            const {
                unitName
            } = configFiat.defaultUnit;
            return assetName => typeof _lodash2.default.get(marketPrices, [assetName, unitName]) === 'number';
        });

    }, {
        "104": 104,
        "130": 130,
        "undefined": undefined
    }],
    129: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _prices = require(130);
        var _prices2 = _interopRequireDefault(_prices);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_available2.default, _prices2.default, (assetsAvailable, marketPrices) => {
            return Object.keys(assetsAvailable).every(asset => marketPrices[asset] !== undefined);
        });

    }, {
        "130": 130,
        "96": 96,
        "undefined": undefined
    }],
    130: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _reselect = require('reselect');
        var _marketPrices = require(105);
        var _marketPrices2 = _interopRequireDefault(_marketPrices);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const cachedPrices = {};
        exports.default = (0, _reselect.createSelector)(_marketPrices2.default, _fiat2.default, state => state.market, (configMarketPrices, configFiat, market) => {
            const marketPrices = configMarketPrices.map(name => market[name]);
            lodash.merge(cachedPrices, ...marketPrices.reverse());
            return lodash.cloneDeep(cachedPrices);
        });

    }, {
        "104": 104,
        "105": 105,
        "undefined": undefined
    }],
    131: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _insightApiClient = require(265);
        var _insightApiClient2 = _interopRequireDefault(_insightApiClient);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _exodusEthereumServer = require(229);
        var _exodusFactomServer = require(231);
        var _exodusFactomServer2 = _interopRequireDefault(_exodusFactomServer);
        var _rippleApi = require(290);
        var rippleAPI = _interopRequireWildcard(_rippleApi);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.insightServers, insightServers => {
            return function(assetName) {
                const asset = _assets2.default[assetName];
                const baseAsset = asset.isEthereumToken ? _assets2.default.ethereum : asset;
                switch (baseAsset.name) {
                    case 'ethereum':
                        return (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.sendRawTransaction, etherscan.sendRawTransaction);
                    case 'ethereumclassic':
                        return (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.sendRawTransaction, etcchain.sendRawTransaction);
                    case 'factom':
                        return _exodusFactomServer2.default.sendRawTransaction;
                    case 'monero':
                        return () => {
                            return new Promise(() => {});
                        };
                    case 'ripple':
                        return rippleAPI.sendTx;
                    default:
                        const server = insightServers[asset.name].api;
                        const insightAPI = new _insightApiClient2.default(server);
                        return insightAPI.broadcastTx.bind(insightAPI);
                }
            };
        });

    }, {
        "184": 184,
        "221": 221,
        "223": 223,
        "229": 229,
        "231": 231,
        "265": 265,
        "290": 290,
        "undefined": undefined
    }],
    132: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _insightApiClient = require(265);
        var _insightApiClient2 = _interopRequireDefault(_insightApiClient);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.insightServers, insightServers => {
            return (() => {
                var _ref = _asyncToGenerator(function*(assetName, addresses) {
                    const asset = _assets2.default[assetName];
                    if (addresses instanceof _addressSet2.default) addresses = Array.from(addresses);
                    const addrMap = _.keyBy('address', addresses);
                    const server = insightServers[asset.name].api;
                    const insightAPI = new _insightApiClient2.default(server);
                    const utxos = yield insightAPI.fetchUTXOs(Object.keys(addrMap));
                    (0, _assert2.default)(Array.isArray(utxos), 'expected array from `InsightAPIClient#fetchUTXOs`');
                    for (const utxo of utxos) {
                        utxo.value = asset.currency.defaultUnit(utxo.value);
                        utxo.address = addrMap[utxo.address];
                    }
                    return _utxoCollection2.default.fromArray(utxos, {
                        currency: asset.currency
                    });
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        });

    }, {
        "184": 184,
        "265": 265,
        "81": 81,
        "89": 89,
        "undefined": undefined
    }],
    133: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const WATCH_LIST = [_assets2.default.bitcoin, _assets2.default.dash, _assets2.default.litecoin];
        exports.default = (0, _reselect.createSelector)(state => state.networks, networks => {
            return WATCH_LIST.filter(coin => {
                const network = networks[coin.name];
                return network && network.connected && network.peers.length === 0;
            }).map(coin => coin.properName);
        });

    }, {
        "184": 184,
        "undefined": undefined
    }],
    134: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _orderSet = require(84);
        var _orderSet2 = _interopRequireDefault(_orderSet);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.orders, orders => {
            return orders.data || _orderSet2.default.EMPTY;
        });

    }, {
        "84": 84,
        "undefined": undefined
    }],
    135: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _orderSet = require(84);
        var _orderSet2 = _interopRequireDefault(_orderSet);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => state.orders, orderState => {
            if (typeof orderState.isLoading === 'undefined') return false;
            if (orderState.data instanceof _orderSet2.default) return true;
        });

    }, {
        "84": 84,
        "undefined": undefined
    }],
    136: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _marketInfoConversions = require(112);
        var _marketInfoConversions2 = _interopRequireDefault(_marketInfoConversions);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _all = require(134);
        var _all2 = _interopRequireDefault(_all);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_all2.default, state => state.txLog, _marketInfoConversions2.default, (orders, txLog, marketInfoConversions) => {
            const orderTxs = new Map();
            try {
                for (let order of orders) {
                    const fromTx = txLog[order.fromAsset].get(order.fromTxId);
                    const toTx = txLog[order.toAsset].get(order.toTxId);
                    const fromAmount = order.fromAmount || (fromTx ? fromTx.coinAmount.abs() : null);
                    const toAmount = order.toAmount || (toTx ? toTx.coinAmount : null);
                    let gain;
                    if (fromAmount && toAmount) {
                        const conv = _lodash2.default.get(marketInfoConversions, [order.toAsset, order.fromAsset]);
                        if (conv) {
                            const newAmount = conv(toAmount, {
                                inclMinerFee: false
                            });
                            gain = (newAmount.toNumber() - fromAmount.toNumber()) / fromAmount.toNumber();
                        } else {
                            gain = 0;
                        }
                    }
                    if (!fromTx) continue;
                    orderTxs.set(order.orderId, {
                        order,
                        fromTx,
                        toTx,
                        fromAmount,
                        toAmount,
                        fromAsset: _assets2.default[order.fromAsset],
                        toAsset: _assets2.default[order.toAsset],
                        gain
                    });
                }
            } catch (err) {
                console.error('OrderTxs Error:');
                console.error(err);
                return null;
            }
            return orderTxs;
        });

    }, {
        "112": 112,
        "134": 134,
        "184": 184,
        "undefined": undefined
    }],
    137: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _getFee = require(124);
        var _getFee2 = _interopRequireDefault(_getFee);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(_coinTotalAmounts2.default, _getFee2.default, (coinTotalAmounts, coinFees) => {
            return function getRemainingBalance(coinName) {
                let feeExtraOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const balances = coinTotalAmounts[coinName];
                return {
                    receiving(amt) {
                        amt = amt.clampLowerZero();
                        return balances.add(amt);
                    },
                    sending(amt) {
                        amt = amt.clampLowerZero();
                        let crypto = balances.subtract(amt);
                        if (!_assets2.default[coinName].isEthereumToken && !_assets2.default[coinName].isOmniProperty) {
                            const fees = coinFees(coinName, Object.assign({}, feeExtraOpts, {
                                amount: amt
                            }));
                            crypto = crypto.subtract(fees);
                        }
                        if (coinName === 'ripple') crypto = crypto.subtract(_assets2.default.ripple.accountReserve);
                        return crypto;
                    }
                };
            };
        });

    }, {
        "102": 102,
        "124": 124,
        "184": 184,
        "undefined": undefined
    }],
    138: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        exports.default = (0, _reselect.createSelector)(state => state.status, status => {
            if (status.code == null) return 'normal';
            switch (status.code) {
                case 0:
                    return 'normal';
                case 1:
                    return 'info';
                case 2:
                    return 'caution';
                case 3:
                    return 'alert';
                default:
                    return 'normal';
            }
        });

    }, {
        "undefined": undefined
    }],
    139: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _reselect = require('reselect');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)(state => _lodash2.default.get(state, 'twoOfTwo.pair.status'), status => {
            return status === 'done';
        });

    }, {
        "undefined": undefined
    }],
    140: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _withTokens = require(316);
        var _withTokens2 = _interopRequireDefault(_withTokens);
        var _paired = require(139);
        var _paired2 = _interopRequireDefault(_paired);
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reselect.createSelector)([_paired2.default, state => _lodash2.default.get(state, 'twoOfTwo.pair.phonePairingData')], (paired, phonePairingData) => {
            return function getPairingData(assetName) {
                if (!paired) return;
                const asset = _withTokens2.default[assetName];
                if (asset && asset.isEthereumToken) return phonePairingData.ethereum;
                return phonePairingData[assetName];
            };
        });

    }, {
        "139": 139,
        "316": 316,
        "undefined": undefined
    }],
    141: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reselect = require('reselect');
        var _getFee = require(124);
        var _getFee2 = _interopRequireDefault(_getFee);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const minUtxoCount = 10;
        const maxFeePercentage = 0.3;
        exports.default = (0, _reselect.createSelector)(state => state.utxos.bitcoin, _getFee2.default, _getValue2.default, (utxos, getFee, getFiatValue) => {
            if (!utxos) return false;
            if (utxos.size < minUtxoCount) return false;
            const balance = utxos.value.toDefault();
            const fee = getFee('bitcoin', {
                amount: balance
            }).toDefault();
            if (fee.toNumber() > balance.toNumber() * maxFeePercentage) return getFiatValue(fee);
            return false;
        });

    }, {
        "121": 121,
        "124": 124,
        "undefined": undefined
    }],
    142: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _redux = require('redux');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function createReducer(coin) {
            const INITIAL_STATE = {
                loaded: false,
                error: null
            };
            const ACCOUNT_STATE_LOAD_INIT = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_INIT`;
            const ACCOUNT_STATE_LOAD_FAIL = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_FAIL`;
            const ACCOUNT_STATE_LOAD_SUCCESS = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_SUCCESS`;
            const ACCOUNT_STATE_UPDATE_INIT = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_INIT`;
            const ACCOUNT_STATE_UPDATE_FAIL = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_FAIL`;
            const ACCOUNT_STATE_UPDATE_SUCCESS = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_SUCCESS`;
            return function() {
                let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
                let _ref = arguments[1];
                let {
                    type,
                    payload
                } = _ref;
                switch (type) {
                    case ACCOUNT_STATE_LOAD_INIT:
                        return Object.assign({}, state, {
                            loaded: false,
                            error: null
                        });
                    case ACCOUNT_STATE_LOAD_FAIL:
                        return Object.assign({}, state, {
                            loaded: false,
                            error: payload
                        });
                    case ACCOUNT_STATE_LOAD_SUCCESS:
                        return Object.assign({}, state, {
                            loaded: true,
                            error: null
                        }, payload);
                    case ACCOUNT_STATE_UPDATE_INIT:
                        return Object.assign({}, state, {
                            error: null
                        });
                    case ACCOUNT_STATE_UPDATE_FAIL:
                        return Object.assign({}, state, {
                            error: payload
                        });
                    case ACCOUNT_STATE_UPDATE_SUCCESS:
                        return Object.assign({}, state, {
                            loaded: true,
                            error: null
                        }, payload);
                    default:
                        return state;
                }
            };
        }

        function createMoneroReducer() {
            const coin = _assets2.default.monero;
            const INITIAL_STATE = {
                loaded: false,
                error: null
            };
            const ACCOUNT_STATE_LOAD_INIT = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_INIT`;
            const ACCOUNT_STATE_LOAD_FAIL = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_FAIL`;
            const ACCOUNT_STATE_LOAD_SUCCESS = `ACCOUNT_STATES_${coin.name.toUpperCase()}_LOAD_SUCCESS`;
            const ACCOUNT_STATE_UPDATE_INIT = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_INIT`;
            const ACCOUNT_STATE_UPDATE_FAIL = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_FAIL`;
            const ACCOUNT_STATE_UPDATE_SUCCESS = `ACCOUNT_STATES_${coin.name.toUpperCase()}_UPDATE_SUCCESS`;
            return function() {
                let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
                let _ref2 = arguments[1];
                let {
                    type,
                    payload
                } = _ref2;
                switch (type) {
                    case ACCOUNT_STATE_LOAD_INIT:
                        return Object.assign({}, state, {
                            loaded: false,
                            error: null
                        });
                    case ACCOUNT_STATE_LOAD_FAIL:
                        return Object.assign({}, state, {
                            loaded: false,
                            error: payload
                        });
                    case ACCOUNT_STATE_LOAD_SUCCESS:
                        return Object.assign({}, state, {
                            loaded: true,
                            error: null
                        }, payload);
                    case ACCOUNT_STATE_UPDATE_INIT:
                        return Object.assign({}, state, {
                            error: null
                        });
                    case ACCOUNT_STATE_UPDATE_FAIL:
                        return Object.assign({}, state, {
                            error: payload
                        });
                    case ACCOUNT_STATE_UPDATE_SUCCESS:
                        return Object.assign({}, state, {
                            loaded: true,
                            error: null
                        }, payload);
                    case 'MONERO_MM_LOGIN_UPDATE':
                        return Object.assign({}, state, {
                            loaded: true,
                            error: null,
                            balance: coin.currency.baseUnit(payload.balance).to(coin.displayUnit)
                        });
                    default:
                        return state;
                }
            };
        }
        exports.default = (0, _redux.combineReducers)({
            ethereum: createReducer(_assets2.default.ethereum),
            ethereumclassic: createReducer(_assets2.default.ethereumclassic),
            factom: createReducer(_assets2.default.factom),
            monero: createMoneroReducer(),
            ripple: createReducer(_assets2.default.ripple),
            tether: createReducer(_assets2.default.tether)
        });

    }, {
        "184": 184,
        "undefined": undefined
    }],
    143: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = accountsReducer;
        const initialState = exports.initialState = {
            isActive: false,
            error: null
        };

        function accountsReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'ACCOUNTS_LOAD_INIT':
                    return Object.assign({}, state, {
                        isActive: true,
                        error: null
                    });
                case 'ACCOUNTS_LOAD_SUCCESS':
                    return Object.assign({}, payload, {
                        isActive: false,
                        error: null
                    });
                case 'ACCOUNTS_LOAD_FAIL':
                    return Object.assign({}, state, {
                        isActive: false,
                        error: payload
                    });
                case 'ACCOUNTS_UPDATE':
                    return Object.assign({}, state, {
                        isActive: false,
                        error: null
                    }, payload);
                case 'RESCAN_BLOCKCHAIN_SUCCESS':
                    {
                        const {
                            asset,
                            chain
                        } = payload;
                        if (!(state[asset] && chain)) return state;
                        return Object.assign({}, state, {
                            isLoading: false,
                            error: null,
                            [asset]: Object.assign({}, state[asset], {
                                chain
                            })
                        });
                    }
                case 'TX_SEND_SUCCESS':
                    {
                        const {
                            asset,
                            changeAddressUsed
                        } = payload || {};
                        if (!(state[asset] && changeAddressUsed)) return state;
                        const account = Object.assign({}, state[asset], {
                            chain: Array.from(state[asset].chain)
                        });account.chain[1] += 1;
                        return Object.assign({}, state, {
                            [asset]: account
                        });
                    }
                default:
                    return state;
            }
        }

    }, {}],
    144: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = configReducer;
        const initialState = exports.initialState = {
            error: null
        };

        function configReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'APP_FAIL':
                    return {
                        error: payload
                    };
                case 'APP_FAIL_ACK':
                    return {
                        error: null
                    };
                default:
                    return state;
            }
        }

    }, {}],
    145: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        exports.default = assetRefreshReducer;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = exports.initialState = {
            isScanningAll: false,
            error: null
        };
        Object.keys(_assets2.default).forEach(asset => {
            initialState[asset] = false;
        });

        function assetRefreshReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'RESCAN_BLOCKCHAIN_INIT':
                    return Object.assign({}, state, {
                        error: null,
                        [payload.asset]: true
                    });
                case 'RESCAN_BLOCKCHAIN_SUCCESS':
                    return Object.assign({}, state, {
                        error: null,
                        [payload.asset]: false
                    });
                case 'RESCAN_BLOCKCHAIN_FAIL':
                    return Object.assign({}, state, {
                        error: payload,
                        [state.isScanning]: false,
                        [payload.asset]: false
                    });
                case 'RESCAN_BLOCKCHAIN_FAIL_ACK':
                    return Object.assign({}, state, {
                        error: null
                    });
                case 'RESCAN_ALL_INIT':
                    return Object.assign({}, state, {
                        isScanningAll: true
                    });
                case 'RESCAN_ALL_SUCCESS':
                    return Object.assign({}, state, {
                        isScanningAll: false
                    });
                case 'RESCAN_ALL_FAIL':
                    return Object.assign({}, state, {
                        error: payload,
                        isScanningAll: false
                    });
                default:
                    return state;
            }
        }

    }, {
        "184": 184
    }],
    146: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = backupReducer;
        const initialState = exports.initialState = {};

        function backupReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload,
                meta
            } = _ref;
            switch (type) {
                case 'BACKUP_CREATE_ACCOUNT_INIT':
                    return {
                        progress: true
                    };
                case 'BACKUP_CREATE_ACCOUNT_FAIL':
                    return {
                        progress: false,
                        error: payload
                    };
                case 'BACKUP_CREATE_ACCOUNT_SUCCESS':
                    const {
                        auth,
                        status
                    } = payload;
                    return {
                        progress: false,
                        success: true,
                        auth,
                        status
                    };
                case 'BACKUP_LOAD_AUTH_SUCCESS':
                    return Object.assign({}, state, {
                        auth: payload
                    });
                case 'BACKUP_LOAD_STATUS_SUCCESS':
                    return Object.assign({}, state, {
                        status: payload
                    });
                case 'BACKUP_SET_STATUS':
                    {
                        let status = Object.assign({}, state.status, payload);
                        return Object.assign({}, state, {
                            status
                        });
                    }
                default:
                    return state;
            }
        }

    }, {}],
    147: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        exports.default = configReducer;
        var _configFile = require(205);
        var _configFile2 = _interopRequireDefault(_configFile);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = exports.initialState = _configFile2.default.createDefault();

        function configReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'CONFIG_LOAD':
                    if (!(payload instanceof _configFile2.default)) throw new Error('CONFIG_LOAD should have a Config payload.');
                    return payload;
                case 'CONFIG_UPDATE':
                    return state.set(payload.key, payload.value);
                default:
                    return state;
            }
        }

    }, {
        "205": 205
    }],
    148: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = configReducer;
        const initialState = exports.initialState = {
            visible: false
        };

        function configReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'DIALOG_INIT':
                    return {
                        visible: true
                    };
                case 'DIALOG_ACK':
                    return {
                        visible: false
                    };
                default:
                    return state;
            }
        }

    }, {}],
    149: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = exchangeReducer;
        const initialState = exports.initialState = {
            pair: '',
            status: 'none',
            error: null,
            shift: {},
            marketInterval: null,
            marketInfoIsLoading: false,
            marketInfoError: null,
            marketInfo: [],
            current: null,
            isExchanging: false,
            isShapeShiftMaintenance: false,
            coinsOnline: {},
            canCancel: false
        };

        function exchangeReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'EXCHANGE_MAINTENANCE_SUCCESS':
                    return Object.assign({}, state, {
                        isShapeShiftMaintenance: payload
                    });
                case 'EXCHANGE_MARKET_INFO_INIT':
                    return Object.assign({}, state, {
                        marketInfoIsLoading: true,
                        marketInfoError: null
                    });
                case 'EXCHANGE_MARKET_INFO_SUCCESS':
                    return Object.assign({}, state, {
                        marketInfoIsLoading: false,
                        marketInfoError: null,
                        marketInfo: payload
                    });
                case 'EXCHANGE_MARKET_INFO_FAIL':
                    return Object.assign({}, state, {
                        marketInfoIsLoading: false,
                        marketInfoError: payload
                    });
                case 'EXCHANGE_MARKET_INTERVAL':
                    return Object.assign({}, state, {
                        marketInterval: payload
                    });
                case 'EXCHANGE_SHIFT':
                    return Object.assign({}, state, {
                        shift: payload
                    });
                case 'EXCHANGE_INIT':
                    return Object.assign({}, state, {
                        status: 'waiting',
                        shift: {},
                        error: null,
                        isExchanging: true,
                        current: payload,
                        canCancel: true
                    });
                case 'EXCHANGE_STATUS':
                    return Object.assign({}, state, {
                        status: payload
                    });
                case 'EXCHANGE_FAIL':
                    return Object.assign({}, state, {
                        error: payload,
                        status: 'failed',
                        isExchanging: false,
                        canCancel: false
                    });
                case 'EXCHANGE_SUCCESS':
                    return Object.assign({}, state, {
                        error: null,
                        isExchanging: false,
                        canCancel: false
                    });
                case 'EXCHANGE_CANCEL':
                    return Object.assign({}, state, {
                        error: null,
                        status: 'none',
                        shift: {},
                        current: null,
                        ssOrder: null,
                        isExchanging: false,
                        canCancel: false,
                        canceled: true
                    });
                case 'EXCHANGE_ACK':
                    return Object.assign({}, state, {
                        error: null,
                        status: 'none',
                        shift: {},
                        current: null,
                        ssOrder: null,
                        isExchanging: false,
                        canCancel: false,
                        canceled: false
                    });
                case 'EXCHANGE_DISABLE_CANCEL':
                    return Object.assign({}, state, {
                        canCancel: false
                    });
                case 'EXCHANGE_START':
                    return Object.assign({}, state, {
                        error: null,
                        current: payload
                    });
                case 'EXCHANGE_COINS_ONLINE_SUCCESS':
                    return Object.assign({}, state, {
                        coinsOnline: payload
                    });
                case 'EXCHANGE_ORDERS_GET':
                    return Object.assign({}, state, {
                        orders: payload
                    });
                case 'EXCHANGE_START_SS':
                    return Object.assign({}, state, {
                        ssOrder: payload
                    });
                default:
                    return state;
            }
        }

    }, {}],
    150: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _redux = require('redux');
        var _reducer = require(143);
        var _reducer2 = _interopRequireDefault(_reducer);
        var _reducer3 = require(142);
        var _reducer4 = _interopRequireDefault(_reducer3);
        var _reducer5 = require(144);
        var _reducer6 = _interopRequireDefault(_reducer5);
        var _reducer7 = require(145);
        var _reducer8 = _interopRequireDefault(_reducer7);
        var _reducer9 = require(146);
        var _reducer10 = _interopRequireDefault(_reducer9);
        var _reducer11 = require(147);
        var _reducer12 = _interopRequireDefault(_reducer11);
        var _reducer13 = require(148);
        var _reducer14 = _interopRequireDefault(_reducer13);
        var _reducer15 = require(149);
        var _reducer16 = _interopRequireDefault(_reducer15);
        var _reducer17 = require(151);
        var _reducer18 = _interopRequireDefault(_reducer17);
        var _reducer19 = require(152);
        var _reducer20 = _interopRequireDefault(_reducer19);
        var _reducer21 = require(153);
        var _reducer22 = _interopRequireDefault(_reducer21);
        var _reducer23 = require(155);
        var _reducer24 = _interopRequireDefault(_reducer23);
        var _reducer25 = require(154);
        var _reducer26 = _interopRequireDefault(_reducer25);
        var _reducer27 = require(156);
        var _reducer28 = _interopRequireDefault(_reducer27);
        var _reducer29 = require(157);
        var _reducer30 = _interopRequireDefault(_reducer29);
        var _reducer31 = require(158);
        var _reducer32 = _interopRequireDefault(_reducer31);
        var _reducer33 = require(159);
        var _reducer34 = _interopRequireDefault(_reducer33);
        var _reducer35 = require(160);
        var _reducer36 = _interopRequireDefault(_reducer35);
        var _reducer37 = require(163);
        var _reducer38 = _interopRequireDefault(_reducer37);
        var _reducer39 = require(164);
        var _reducer40 = _interopRequireDefault(_reducer39);
        var _reducer41 = require(165);
        var _reducer42 = _interopRequireDefault(_reducer41);
        var _reducer43 = require(166);
        var _reducer44 = _interopRequireDefault(_reducer43);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _redux.combineReducers)({
            accounts: _reducer2.default,
            accountStates: _reducer4.default,
            app: _reducer6.default,
            assetsRefresh: _reducer8.default,
            backup: _reducer10.default,
            config: _reducer12.default,
            dialog: _reducer14.default,
            exchange: _reducer16.default,
            insightServers: _reducer18.default,
            localStorage: _reducer20.default,
            log: _reducer22.default,
            market: _reducer24.default,
            marketHistory: _reducer26.default,
            moneroSimplewallet: _reducer28.default,
            networks: _reducer30.default,
            orders: _reducer32.default,
            remoteConfig: _reducer34.default,
            status: _reducer36.default,
            twoOfTwo: _reducer38.default,
            txLog: _reducer40.default,
            txSend: _reducer42.default,
            utxos: _reducer44.default
        });

    }, {
        "142": 142,
        "143": 143,
        "144": 144,
        "145": 145,
        "146": 146,
        "147": 147,
        "148": 148,
        "149": 149,
        "151": 151,
        "152": 152,
        "153": 153,
        "154": 154,
        "155": 155,
        "156": 156,
        "157": 157,
        "158": 158,
        "159": 159,
        "160": 160,
        "163": 163,
        "164": 164,
        "165": 165,
        "166": 166,
        "undefined": undefined
    }],
    151: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        exports.default = statusReducer;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _insightServers = require(54);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const initialState = exports.initialState = lodash.mapValues(_insightServers.defaultServers, servers => servers[0]);
        logServers(initialState);

        function statusReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'INSIGHT_SERVERS_SET':
                    logServers(payload);
                    return Object.assign({}, state, payload);
                default:
                    return state;
            }
        }

        function logServers(servers) {
            for (const assetName of Object.keys(servers)) {
                console.log(`Set insight for ${assetName}: ${servers[assetName].api}`);
            }
        }

    }, {
        "54": 54,
        "undefined": undefined
    }],
    152: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = statusReducer;
        const initialState = {};

        function statusReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'LOCAL_STORAGE_LOAD':
                    return Object.assign({}, state, payload);
                case 'LOCAL_STORAGE_SET_ITEM':
                    return Object.assign({}, state, {
                        [payload.key]: payload.value
                    });
                default:
                    return state;
            }
        }

    }, {}],
    153: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = logReducer;

        function logReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'LOG_LOAD':
                    return [...payload.sort((a, b) => b.time - a.time)];
                case 'LOG_WRITE':
                    return [payload, ...state];
                default:
                    return state;
            }
        }

    }, {}],
    154: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = marketHistoryReducer;
        const initialState = exports.initialState = {};

        function marketHistoryReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            let asset;
            let fiat;
            switch (type) {
                case 'MARKET_HISTORY_LOAD_SUCCESS':
                    ({
                        asset,
                        fiat
                    } = payload);
                    if (!asset || !fiat) return state;
                    return Object.assign({}, state, {
                        [fiat]: Object.assign({}, state[fiat], {
                            [asset]: payload.prices
                        })
                    });
                case 'MARKET_HISTORY_LOAD_FAIL':
                    ({
                        asset,
                        fiat
                    } = payload);
                    return Object.assign({}, state, {
                        [fiat]: Object.assign({}, state[fiat], {
                            [asset]: payload
                        })
                    });
                default:
                    return state;
            }
        }

    }, {}],
    155: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = marketReducer;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function marketReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'MARKET_PRICES_UPDATE':
                    return Object.assign({}, state, {
                        [payload.provider]: payload.prices
                    });
                case 'MARKET_PRICES_PAIRS_UPDATE':
                    const prices = Object.assign({}, lodash.get(state, payload.provider, {}));
                    lodash.merge(prices, payload.prices);
                    return Object.assign({}, state, {
                        [payload.provider]: prices
                    });
                default:
                    return state;
            }
        }

    }, {
        "undefined": undefined
    }],
    156: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'MONERO_SIMPLEWALLET_INIT':
                    return Object.assign({}, state, initialState);
                case 'MONERO_SIMPLEWALLET_REFRESH_PROGRESS':
                    return Object.assign({}, state, initialState, {
                        progress: payload
                    });
                case 'MONERO_SIMPLEWALLET_STRATED':
                    return Object.assign({}, state, initialState, {
                        rpcNetworkOptions: payload
                    });
                case 'MONERO_SIMPLEWALLET_FAIL':
                    return Object.assign({}, state, initialState, {
                        error: payload
                    });
                default:
                    return state;
            }
        };
        const initialState = exports.initialState = {
            progress: null,
            rpcNetworkOptions: null,
            error: null
        };

    }, {}],
    157: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _redux = require('redux');
        var _lodash = require('lodash');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = {
            connected: false,
            peers: []
        };

        function createReducer(coinName) {
            const NETWORK_CONNECT = `NETWORK_${coinName.toUpperCase()}_CONNECT`;
            const NETWORK_PEER_CONNECT = `NETWORK_${coinName.toUpperCase()}_PEER_CONNECT`;
            const NETWORK_PEER_DISCONNECT = `NETWORK_${coinName.toUpperCase()}_PEER_DISCONNECT`;
            return function() {
                let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
                let _ref = arguments[1];
                let {
                    type,
                    payload
                } = _ref;
                switch (type) {
                    case NETWORK_CONNECT:
                        return Object.assign({}, state, {
                            connected: true
                        });
                    case NETWORK_PEER_CONNECT:
                        return Object.assign({}, state, {
                            peers: (0, _lodash.union)(state.peers, [payload])
                        });
                    case NETWORK_PEER_DISCONNECT:
                        return Object.assign({}, state, {
                            peers: (0, _lodash.without)(state.peers, payload)
                        });
                    default:
                        return state;
                }
            };
        }
        const networks = Object.values(_assets2.default).reduce((obj, asset) => {
            if (asset.available) obj[asset.name] = createReducer(asset.name);
            return obj;
        }, {});
        exports.default = (0, _redux.combineReducers)(networks);

    }, {
        "184": 184,
        "undefined": undefined
    }],
    158: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        exports.default = orderReducer;
        var _orderSet = require(84);
        var _orderSet2 = _interopRequireDefault(_orderSet);
        var _order = require(85);
        var _order2 = _interopRequireDefault(_order);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = exports.initialState = {
            data: _orderSet2.default.EMPTY
        };

        function orderReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'ORDERS_LOAD_INIT':
                    return Object.assign({}, state, {
                        isLoading: true,
                        error: null
                    });
                case 'ORDERS_LOAD_FAIL':
                    return Object.assign({}, state, {
                        isLoading: false,
                        error: payload
                    });
                case 'ORDERS_LOAD_SUCCESS':
                    return Object.assign({}, state, {
                        isLoading: false,
                        error: null,
                        data: payload
                    });
                case 'ORDERS_UPDATE':
                    if (!payload) {
                        console.warn('ORDERS_UPDATE: no payload.');
                        return state;
                    }
                    if (!(payload instanceof _order2.default)) {
                        console.warn('ORDERS_UPDATE: payload is not an Order.');
                        return state;
                    }
                    let orders = state.data;
                    if (orders.has(payload)) orders = orders.update([payload]);
                    else orders = orders.add(payload);
                    return Object.assign({}, state, {
                        isLoading: false,
                        data: orders
                    });
                default:
                    return state;
            }
        }

    }, {
        "84": 84,
        "85": 85
    }],
    159: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = remoteConfigReducer;
        const initialState = {};

        function remoteConfigReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'MONITOR_REMOTE_CONFIG_UPDATE':
                    return Object.assign({}, state, {
                        error: false
                    }, payload);
                case 'MONITOR_REMOTE_CONFIG_FAIL':
                    return Object.assign({}, state, {
                        error: payload
                    });
                default:
                    return state;
            }
        }

    }, {}],
    160: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = statusReducer;
        const initialState = {
            code: 0
        };

        function statusReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'MONITOR_STATUS_UPDATE':
                    return Object.assign({}, state, {
                        error: false
                    }, payload);
                case 'MONITOR_STATUS_FAIL':
                    return Object.assign({}, state, {
                        error: payload
                    });
                default:
                    return state;
            }
        }

    }, {}],
    161: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = connectionReducer;
        var _twoOfTwo = require(319);
        const initialState = {
            status: 'disconnected',
            presence: false
        };

        function connectionReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'TWO_OF_TWO_CONNECTION_CONNECT':
                    if (state.status === 'disconnected') return Object.assign({}, state, {
                        status: 'connecting'
                    });
                    return state;
                case 'TWO_OF_TWO_CONNECTION_DISCONNECT':
                    return Object.assign({}, state, {
                        status: 'disconnected',
                        presence: false
                    });
                case 'TWO_OF_TWO_CONNECTION_CONNECTING':
                    return Object.assign({}, state, {
                        status: 'connecting',
                        presence: false
                    });
                case 'TWO_OF_TWO_CONNECTION_CONNECTED':
                    return Object.assign({}, state, {
                        status: 'connected',
                        presence: false
                    });
                case 'TWO_OF_TWO_CONNECTION_RECEIVED_MESSAGE':
                    if (payload.message.type === _twoOfTwo.connection.MESSAGE_TYPES.PRESENCE) return Object.assign({}, state, {
                        presence: payload.message.payload.presence
                    });
                    return state;
            }
            return state;
        }

    }, {
        "319": 319
    }],
    162: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = pairReducer;
        const initialState = {
            status: 'loading'
        };

        function pairReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            switch (type) {
                case 'TWO_OF_TWO_PAIR_NOT_STARTED':
                    return Object.assign({}, initialState, {
                        status: 'not-started'
                    });
                case 'TWO_OF_TWO_PAIR_INIT':
                    return Object.assign({}, initialState, {
                        status: 'waiting-for-phone',
                        connectionCode: payload.connectionCode,
                        desktopCode: payload.desktopCode
                    });
                case 'TWO_OF_TWO_PAIR_GENERATING_DESKTOP_PAIRING_DATA':
                    return Object.assign({}, state, {
                        status: 'loading'
                    });
                case 'TWO_OF_TWO_PAIR_RECEIVED_PHONE_PAIRING_DATA':
                    return Object.assign({}, state, {
                        phonePairingData: payload.phonePairingData
                    });
                case 'TWO_OF_TWO_PAIR_SHOW_PHONE_CODE_INPUT':
                    return Object.assign({}, state, {
                        status: 'code-input',
                        phoneCodeError: payload
                    });
                case 'TWO_OF_TWO_PAIR_CONFIRMING_PHONE_CODE':
                    return Object.assign({}, state, {
                        status: 'loading',
                        phoneCodeError: undefined
                    });
                case 'TWO_OF_TWO_PAIR_DONE':
                    return {
                        status: 'done',
                        connectionCode: payload.connectionCode,
                        phonePairingData: payload.phonePairingData
                    };
                case 'TWO_OF_TWO_PAIR_FAIL':
                    return Object.assign({}, state, {
                        status: 'failed',
                        error: payload
                    });
            }
            return state;
        }

    }, {}],
    163: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _redux = require('redux');
        var _reducer = require(161);
        var _reducer2 = _interopRequireDefault(_reducer);
        var _reducer3 = require(162);
        var _reducer4 = _interopRequireDefault(_reducer3);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _redux.combineReducers)({
            connection: _reducer2.default,
            pair: _reducer4.default
        });

    }, {
        "161": 161,
        "162": 162,
        "undefined": undefined
    }],
    164: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        exports.default = txLogReducer;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);
        var _tx = require(88);
        var _tx2 = _interopRequireDefault(_tx);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = exports.initialState = {};
        Object.keys(_assets2.default).forEach(asset => {
            initialState[asset] = _txSet2.default.EMPTY;
            initialState[asset + 'Loaded'] = false;
        });

        function txLogReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            let asset;
            let tx;
            let txs;
            let newTxs;
            switch (type) {
                case 'TX_LOG_LOAD_INIT':
                    return Object.assign({}, state);
                case 'TX_LOG_LOAD_SUCCESS':
                    ;
                    ({
                        asset,
                        txs
                    } = payload);
                    return Object.assign({}, state, {
                        [asset]: txs,
                        [asset + 'Loaded']: true
                    });
                case 'TX_LOG_LOAD_FAIL':
                    console.log(`TX_LOG_LOAD_FAIL for ${asset}: ${payload.stack||payload}`);
                    return Object.assign({}, state);
                case 'TX_LOG_WRITE':
                    ;
                    ({
                        asset,
                        tx
                    } = payload);
                    txs = state[asset];
                    txs = txs.add(tx);
                    return Object.assign({}, state, {
                        [asset]: txs
                    });
                case 'TX_LOG_BULK_WRITE':
                    newTxs = payload.txs;
                    asset = payload.asset;
                    txs = state[asset];
                    return Object.assign({}, state, {
                        [payload.asset]: txs.union(newTxs)
                    });
                case 'TX_LOG_UPDATE_TXS_PROPERTIES':
                    asset = payload.asset;
                    const updatedTxLog = state[asset].updateTxsProperties(payload.items);
                    return Object.assign({}, state, {
                        [asset]: updatedTxLog
                    });
                case 'RESCAN_BLOCKCHAIN_SUCCESS':
                    {
                        const {
                            asset,
                            txs
                        } = payload;
                        if (!(state[asset] && txs)) return state;
                        return Object.assign({}, state, {
                            [asset]: state[asset].update(txs)
                        });
                    }
                case 'MONERO_MM_LOGIN_UPDATE':
                    if (!Array.isArray(payload.transactions)) return state;
                    if (payload.transactions.length === 0) return state;
                    return Object.assign({}, state, {
                        monero: txsetFromMyMonero(payload.transactions),
                        moneroLoaded: true
                    });
                default:
                    return state;
            }
        }

        function txsetFromMyMonero(txs) {
            let txSet = _txSet2.default.EMPTY;
            try {
                txSet = _txSet2.default.fromArray(txs.map(tx => _tx2.default.fromJSON(Object.assign({}, tx, {
                    txId: tx.hash,
                    coinName: 'monero',
                    coinAmount: _assets2.default.monero.currency.baseUnit(tx.amount).to(_assets2.default.monero.displayUnit),
                    date: new Date(tx.timestamp)
                }))));
            } catch (err) {
                console.error('MM PARSING ERROR');
                console.error(err);
            }
            return txSet;
        }

    }, {
        "184": 184,
        "86": 86,
        "88": 88
    }],
    165: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = txSendReducer;
        const initialState = exports.initialState = {
            isSending: false,
            error: null
        };

        function txSendReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let _ref = arguments[1];
            let {
                type,
                payload
            } = _ref;
            switch (type) {
                case 'TX_SEND_INIT':
                    return {
                        hasInit: true,
                        isSending: true,
                        error: null
                    };
                case 'TX_SEND_UPDATE':
                    return Object.assign({}, state, {
                        txId: payload
                    });
                case 'TX_SEND_SUCCESS':
                    return Object.assign({}, state, {
                        hasInit: true,
                        isSending: false,
                        error: null
                    });
                case 'TX_SEND_FAIL':
                    return Object.assign({}, state, {
                        hasInit: true,
                        isSending: false,
                        error: payload
                    });
                case 'TX_SEND_ACK':
                    return {
                        hasInit: false,
                        isSending: false,
                        error: null
                    };
                default:
                    return state;
            }
        }

    }, {}],
    166: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = utxosReducer;
        const initialState = exports.initialState = {
            isLoading: false,
            error: null
        };

        function utxosReducer() {
            let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            let {
                type,
                meta,
                payload
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            let currentUtxos;
            let asset;
            if (payload) asset = payload.coin || payload.asset;
            switch (type) {
                case 'UTXOS_LOAD_INIT':
                    return Object.assign({}, state, {
                        isLoading: true,
                        error: null
                    });
                case 'UTXOS_RESET_PARTIAL_SUCCESS':
                case 'UTXOS_LOAD_SUCCESS':
                    return Object.assign({}, state, payload, {
                        isLoading: false,
                        error: null
                    });
                case 'UTXOS_LOAD_FAIL':
                    return Object.assign({}, state, {
                        isLoading: false,
                        error: payload
                    });
                case 'UTXOS_UPDATE':
                    return Object.assign({}, state, {
                        isLoading: false,
                        error: null
                    }, payload);
                case 'UTXOS_UPDATE_CONFIRMATIONS':
                    asset = payload.asset;
                    const newUtxos = state[asset].updateConfirmations(payload.txs);
                    return Object.assign({}, state, {
                        [asset]: newUtxos
                    });
                case 'RESCAN_BLOCKCHAIN_SUCCESS':
                    {
                        const {
                            asset,
                            utxos
                        } = payload;
                        if (!(state[asset] && utxos)) return state;
                        return Object.assign({}, state, {
                            isLoading: false,
                            error: null,
                            [asset]: utxos
                        });
                    }
                case 'NETWORK_UTXOS_RECEIVE':
                    if (!payload.utxos) return state;
                    currentUtxos = state[asset];
                    return Object.assign({}, state, {
                        [asset]: currentUtxos.union(payload.utxos)
                    });
                default:
                    return state;
            }
        }

    }, {}],
    167: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let walletInstance = {
            backupOnChange: true,
            set current(val) {
                this.wallet = val;
            },
            get current() {
                return this.backupOnChange ? this.wallet : this._wallet;
            }
        };
        exports.default = walletInstance;

    }, {}],
    168: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _keys = require(407);
        Object.keys(_keys).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function() {
                    return _keys[key];
                }
            });
        });

    }, {
        "407": 407
    }],
    169: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WALLET_DIR = exports.walletDirFromExodusDir = undefined;
        var _paths = require(408);
        var _paths2 = _interopRequireDefault(_paths);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = _paths2.default;
        const walletDirFromExodusDir = exports.walletDirFromExodusDir = _paths.walletDirFromExodusDir;
        const WALLET_DIR = exports.WALLET_DIR = _paths.WALLET_DIR;

    }, {
        "408": 408
    }],
    170: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createWalletHelper;
        var _orderSet = require(84);
        var _orderSet2 = _interopRequireDefault(_orderSet);
        var _txSet = require(86);
        var _txSet2 = _interopRequireDefault(_txSet);
        var _keys = require(168);
        var keys = _interopRequireWildcard(_keys);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function createWalletHelper(walletCtx) {
            return {
                writeOrders(orders) {
                    var _arguments = arguments;
                    return _asyncToGenerator(function*() {
                        let account = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : 'account0';
                        const key = keys.accountOrders(account);
                        yield walletCtx.updateKeyData(key, orders.toJSON());
                    })();
                },
                writeTxs(asset, txs) {
                    var _arguments2 = arguments;
                    return _asyncToGenerator(function*() {
                        let account = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : 'account0';
                        const txKey = keys.accountTxs(asset, account);
                        yield walletCtx.updateKeyData(txKey, txs.toJSON());
                    })();
                }
            };
        }

    }, {
        "168": 168,
        "84": 84,
        "86": 86
    }],
    171: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.create = create;
        var _client = require(217);

        function create() {
            const wallet = {
                createTx: (0, _client.createClientMethod)('wallet', 'createTx'),
                fetchKeyData: (0, _client.createClientMethod)('wallet', 'fetchKeyData'),
                getHDKey: (0, _client.createClientMethod)('wallet', 'getHDKey'),
                getXPub: (0, _client.createClientMethod)('wallet', 'getXPub'),
                getEID: (0, _client.createClientMethod)('wallet', 'getEID'),
                getMnemonic: (0, _client.createClientMethod)('wallet', 'getMnemonic'),
                updateKeyData: (0, _client.createClientMethod)('wallet', 'updateKeyData')
            };
            console.dir(wallet);
            return wallet;
        }

    }, {
        "217": 217
    }],
    172: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.feeEvents = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.setFeePerKB = setFeePerKB;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _events = require('events');
        var _twoOfTwoMultisig = require(314);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'bcash';
        const properName = exports.properName = 'Bitcoin Cash';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = false;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            satoshis: 0,
            BCH: 8
        }, 'BCH');
        const displayUnit = exports.displayUnit = 'BCH';
        const shapeShiftUnit = exports.shapeShiftUnit = 'bch';
        const units = exports.units = ['BCH'];
        const feeEvents = exports.feeEvents = new _events.EventEmitter();

        function setFeePerKB(newFeerPerKB) {
            exports.feePerKB = feePerKB = currency.satoshis(newFeerPerKB);
            feeEvents.emit('new');
        }
        let feePerKB = exports.feePerKB = undefined;
        setFeePerKB(5000);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)('bitcoin').versions.public,
                p2sh: (0, _coininfo2.default)('bitcoin').versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && [address.versions.p2pkh, address.versions.p2sh].includes(payload[0]);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default['bitcoin-cash'];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)('bitcoin').versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.concat([Buffer.from([address.versions.p2pkh]), pubKeyHash]);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://blockdozer.com/insight/address/${address}`,
            txUrl: txId => `https://blockdozer.com/insight/tx/${txId}`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoMultisig.alice)({
            network: (0, _coininfo2.default)('bitcoin')
        });

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "314": 314,
        "undefined": undefined
    }],
    173: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.feeEvents = exports.units = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.setFeePerKB = setFeePerKB;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _events = require('events');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'bcashclaim';
        const properName = exports.properName = 'Bitcoin Cash Claim';
        const available = exports.available = false;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            satoshis: 0,
            BCH: 8
        }, 'BCH');
        const displayUnit = exports.displayUnit = 'BCH';
        const units = exports.units = ['BCH'];
        const feeEvents = exports.feeEvents = new _events.EventEmitter();

        function setFeePerKB(newFeerPerKB) {
            exports.feePerKB = feePerKB = currency.satoshis(newFeerPerKB);
            feeEvents.emit('new');
        }
        let feePerKB = exports.feePerKB = undefined;
        setFeePerKB(5000);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)('bitcoin').versions.public,
                p2sh: (0, _coininfo2.default)('bitcoin').versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && [address.versions.p2pkh, address.versions.p2sh].includes(payload[0]);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default['bitcoin'];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)('bitcoin').versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.concat([Buffer.from([address.versions.p2pkh]), pubKeyHash]);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://blockdozer.com/insight/address/${address}`,
            txUrl: txId => `https://blockdozer.com/insight/tx/${txId}`
        };

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "undefined": undefined
    }],
    174: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.feeEvents = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.setFeePerKB = setFeePerKB;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _events = require('events');
        var _twoOfTwoMultisig = require(314);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'bitcoin';
        const properName = exports.properName = 'Bitcoin';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            satoshis: 0,
            bits: 2,
            BTC: 8
        }, 'BTC');
        const displayUnit = exports.displayUnit = 'BTC';
        const shapeShiftUnit = exports.shapeShiftUnit = 'btc';
        const units = exports.units = ['BTC'];
        const feeEvents = exports.feeEvents = new _events.EventEmitter();

        function setFeePerKB(newFeerPerKB) {
            console.log(`bitcoin fee: ${newFeerPerKB/1000|0} sat/byte`);
            exports.feePerKB = feePerKB = currency.satoshis(newFeerPerKB);
            feeEvents.emit('new');
        }
        let feePerKB = exports.feePerKB = undefined;
        setFeePerKB(380000);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)(name).versions.public,
                p2sh: (0, _coininfo2.default)(name).versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && [address.versions.p2pkh, address.versions.p2sh].includes(payload[0]);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)(name).versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.concat([Buffer.from([address.versions.p2pkh]), pubKeyHash]);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://live.blockcypher.com/btc/address/${address}/`,
            txUrl: txId => `https://live.blockcypher.com/btc/tx/${txId}/`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoMultisig.alice)({
            network: (0, _coininfo2.default)(name)
        });

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "314": 314,
        "undefined": undefined
    }],
    175: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = undefined;
        exports._createSimpleSend = _createSimpleSend;
        var _bitcoreLib = require('bitcore-lib');
        var bitcore = _interopRequireWildcard(_bitcoreLib);
        var _ethereumjsUtil = require('ethereumjs-util');
        var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);
        var _util = require(213);
        var _ = require(174);
        var bitcoin = _interopRequireWildcard(_);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = false;
        const isAccountBased = exports.isAccountBased = true;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = true;

        function updateFee() {
            exports.feePerKB = feePerKB = bitcoin.feePerKB;
        }
        let feePerKB = exports.feePerKB = undefined;
        bitcoin.feeEvents.on('new', updateFee);
        updateFee();
        const address = exports.address = {
            validate: bitcoin.address.validate
        };
        const bip44 = exports.bip44 = bitcoin.bip44;
        const keys = exports.keys = {
            encodePrivate: bitcoin.keys.encodePrivate,
            encodePublic: bitcoin.keys.encodePublic
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://omniexplorer.info/lookupadd.aspx?address=${address}`,
            txUrl: txId => `https://omniexplorer.info/lookuptx.aspx?txid=${txId}`
        };

        function _createSimpleSend(omniPropertyId, currency) {
            const prefix = Buffer.concat([_ethereumjsUtil2.default.toBuffer('0x6f6d6e69'), _ethereumjsUtil2.default.toBuffer('0x0000'), _ethereumjsUtil2.default.toBuffer('0x0000'), _ethereumjsUtil2.default.zeros(4 - _ethereumjsUtil2.default.toBuffer(omniPropertyId).length), _ethereumjsUtil2.default.toBuffer(omniPropertyId)]);
            return {
                parseTx(rawTx) {
                    const tx = new bitcore.Transaction(rawTx);
                    for (const output of tx.outputs) {
                        const chunks = output.script.chunks;
                        if (chunks.length === 2 && chunks[0].opcodenum === bitcore.Opcode.OP_RETURN && chunks[1].buf && chunks[1].buf.length === 20 && chunks[1].buf.slice(0, 12).equals(prefix)) {
                            return currency.baseUnit(_ethereumjsUtil2.default.bufferToHex(chunks[1].buf.slice(12)));
                        }
                    }
                    return null;
                },
                buildOutputScript(amount) {
                    const bufAmount = (0, _util.currency2buffer)(amount);
                    return Buffer.concat([_ethereumjsUtil2.default.toBuffer('0x6a14'), prefix, _ethereumjsUtil2.default.zeros(8 - bufAmount.length), bufAmount]);
                }
            };
        }

    }, {
        "174": 174,
        "213": 213,
        "undefined": undefined
    }],
    176: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _aureus = require(192);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _twoOfTwoMultisig = require(314);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'dash';
        const properName = exports.properName = 'Dash';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            duffs: 0,
            DASH: 8
        }, 'DASH');
        const displayUnit = exports.displayUnit = 'DASH';
        const shapeShiftUnit = exports.shapeShiftUnit = 'dash';
        const units = exports.units = ['DASH'];
        const feePerKB = exports.feePerKB = currency.duffs(10000);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)(name).versions.public,
                p2sh: (0, _coininfo2.default)(name).versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && [address.versions.p2pkh, address.versions.p2sh].includes(payload[0]);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)(name).versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.concat([Buffer.from([address.versions.p2pkh]), pubKeyHash]);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://insight.dashevo.org/insight/address/${address}`,
            txUrl: txId => `https://insight.dashevo.org/insight/tx/${txId}`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoMultisig.alice)({
            network: (0, _coininfo2.default)(name)
        });

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "314": 314,
        "undefined": undefined
    }],
    177: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _aureus = require(192);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _blakeHash = require('blake-hash');
        var _blakeHash2 = _interopRequireDefault(_blakeHash);
        var _bs58checkBlake = require(203);
        var _bs58checkBlake2 = _interopRequireDefault(_bs58checkBlake);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'decred';
        const properName = exports.properName = 'Decred';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            atom: 0,
            DCR: 8
        }, 'DCR');
        const displayUnit = exports.displayUnit = 'DCR';
        const shapeShiftUnit = exports.shapeShiftUnit = 'dcr';
        const units = exports.units = ['DCR'];
        const feePerKB = exports.feePerKB = currency.DCR(0.001);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)(name).versions.public,
                p2sh: (0, _coininfo2.default)(name).versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58checkBlake2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && payload.readUInt16BE(0) === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58checkBlake2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && payload.readUInt16BE(0) === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58checkBlake2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && [address.versions.p2pkh, address.versions.p2sh].includes(payload.readUInt16BE(0));
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const version = Buffer.alloc(2);
                version.writeUInt16BE((0, _coininfo2.default)(name).versions.private);
                const buffer = Buffer.concat([version, Buffer.from([0x00]), privateKey, Buffer.from([0x01])]);
                return _bs58checkBlake2.default.encode(buffer);
            },
            encodePublic(publicKey) {
                const payload = Buffer.alloc(2 + 20);
                payload.writeUInt16BE((0, _coininfo2.default)(name).versions.public);
                const hash32 = (0, _blakeHash2.default)('blake256').update(publicKey).digest();
                const hash20 = _crypto2.default.createHash('ripemd160').update(hash32).digest();
                hash20.copy(payload, 2);
                return _bs58checkBlake2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://mainnet.decred.org/address/${address}`,
            txUrl: txId => `https://mainnet.decred.org/tx/${txId}`
        };

    }, {
        "192": 192,
        "201": 201,
        "203": 203,
        "212": 212,
        "undefined": undefined
    }],
    178: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.gasPriceEvents = exports.fee = exports.gasPrice = exports.gasContract = exports.gasTx = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.getFee = getFee;
        exports.setGasPrice = setGasPrice;
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _exodusEthereumServer = require(229);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _ethereumjsUtil = require('ethereumjs-util');
        var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);
        var _events = require('events');
        var _memoizeLruCache = require(273);
        var _memoizeLruCache2 = _interopRequireDefault(_memoizeLruCache);
        var _twoOfTwoEcdsaThreshold = require(310);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const name = exports.name = 'ethereum';
        const properName = exports.properName = 'Ethereum';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = false;
        const isAccountBased = exports.isAccountBased = true;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            wei: 0,
            Kwei: 3,
            Mwei: 6,
            shannon: 9,
            szabo: 12,
            finney: 15,
            ETH: 18
        }, 'ETH');
        const displayUnit = exports.displayUnit = 'ETH';
        const shapeShiftUnit = exports.shapeShiftUnit = 'eth';
        const units = exports.units = ['ETH'];
        const gasTx = exports.gasTx = 21e3;
        const gasContract = exports.gasContract = 1e6;
        let gasPrice = exports.gasPrice = undefined;
        let fee = exports.fee = undefined;

        function getFee(gasLimit) {
            return currency.wei(gasPrice.toNumber() * gasLimit);
        }
        const gasPriceEvents = exports.gasPriceEvents = new _events.EventEmitter();
        gasPriceEvents.setMaxListeners(0);

        function setGasPrice(newGasPrice) {
            if (gasPrice && gasPrice.toNumber() === newGasPrice) return;
            console.log(`ethereum gas: ${newGasPrice}`);
            exports.gasPrice = gasPrice = currency.wei(newGasPrice);
            exports.fee = fee = getFee(gasTx);
            gasPriceEvents.emit('new');
        }
        setGasPrice(200e9);
        const address = exports.address = {
            validate(address) {
                if (typeof address !== 'string') return false;
                if (address.slice(0, 2) !== '0x' || address.length !== 42) return false;
                if (/^0x[0-9A-F]{40}$/.test(address) || /^0x[0-9a-f]{40}$/.test(address)) return true;
                return _ethereumjsUtil2.default.isValidChecksumAddress(address);
            },
            isContract: (0, _memoizeLruCache2.default)((() => {
                var _ref = _asyncToGenerator(function*(address) {
                    const code = yield(0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.getCode, etherscan.getCode)(address);
                    return code.length > 2;
                });
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            })(), key => key, {
                max: 100
            })
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privKey) {
                return '0x' + privKey.toString('hex');
            },
            encodePublic(compressedPubKey) {
                const hash160bits = _ethereumjsUtil2.default.publicToAddress(compressedPubKey, true);
                return _ethereumjsUtil2.default.toChecksumAddress(hash160bits.toString('hex'));
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://etherscan.io/address/${address}`,
            txUrl: txId => `https://etherscan.io/tx/${txId}`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoEcdsaThreshold.alice)({
            publicKeyEncode: keys.encodePublic
        });

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "223": 223,
        "229": 229,
        "273": 273,
        "310": 310,
        "undefined": undefined
    }],
    179: [function(require, module, exports) {
        module.exports = [{
                "name": "aragon",
                "properName": "Aragon",
                "decimals": 18,
                "displayUnit": "ANT",
                "shapeShiftUnit": "ant",
                "blockExplorer": "Aragon",
                "addresses": {
                    "current": "0x960b236A07cf122663c4303350609A66A7B288C0"
                }
            },
            {
                "name": "augur",
                "properName": "Augur",
                "decimals": 18,
                "displayUnit": "REP",
                "shapeShiftUnit": "rep",
                "blockExplorer": "REP",
                "addresses": {
                    "current": "0xE94327D07Fc17907b4DB788E5aDf2ed424adDff6",
                    "previous": [
                        "0x48c80F1f4D53D5951e5D5438B54Cba84f29F32a5"
                    ]
                }
            },
            {
                "name": "bancor",
                "properName": "Bancor",
                "decimals": 18,
                "displayUnit": "BNT",
                "shapeShiftUnit": "bnt",
                "blockExplorer": "Bancor",
                "addresses": {
                    "current": "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C"
                }
            },
            {
                "name": "bat",
                "properName": "BAT",
                "decimals": 18,
                "displayUnit": "BAT",
                "shapeShiftUnit": "bat",
                "blockExplorer": "BAT",
                "addresses": {
                    "current": "0x0D8775F648430679A709E98d2b0Cb6250d2887EF"
                }
            },
            {
                "name": "civic",
                "properName": "Civic",
                "decimals": 8,
                "displayUnit": "CVC",
                "shapeShiftUnit": "cvc",
                "blockExplorer": "Civic",
                "addresses": {
                    "current": "0x41e5560054824eA6B0732E656E3Ad64E20e94E45"
                }
            },
            {
                "name": "digix",
                "properName": "DigixDAO",
                "decimals": 9,
                "displayUnit": "DGD",
                "shapeShiftUnit": "dgd",
                "blockExplorer": "DGD",
                "addresses": {
                    "current": "0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A"
                }
            },
            {
                "name": "district0x",
                "properName": "District0x",
                "decimals": 18,
                "displayUnit": "DNT",
                "shapeShiftUnit": "dnt",
                "blockExplorer": "district0x",
                "addresses": {
                    "current": "0x0AbdAce70D3790235af448C88547603b945604ea"
                }
            },
            {
                "name": "eos",
                "properName": "EOS",
                "decimals": 18,
                "displayUnit": "EOS",
                "shapeShiftUnit": "eos",
                "blockExplorer": "EOS",
                "addresses": {
                    "current": "0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0"
                }
            },
            {
                "name": "firstblood",
                "properName": "FirstBlood",
                "decimals": 18,
                "displayUnit": "1ST",
                "shapeShiftUnit": "1st",
                "blockExplorer": "FirstBlood",
                "addresses": {
                    "current": "0xAf30D2a7E90d7DC361c8C4585e9BB7D2F6f15bc7"
                }
            },
            {
                "name": "funfair",
                "properName": "FunFair",
                "decimals": 8,
                "displayUnit": "FUN",
                "shapeShiftUnit": "fun",
                "blockExplorer": "FunFair",
                "addresses": {
                    "current": "0x419D0d8BdD9aF5e606Ae2232ed285Aff190E711b"
                }
            },
            {
                "name": "gnosis",
                "properName": "Gnosis",
                "decimals": 18,
                "displayUnit": "GNO",
                "shapeShiftUnit": "gno",
                "blockExplorer": "Gnosis",
                "addresses": {
                    "current": "0x6810e776880C02933D47DB1b9fc05908e5386b96"
                }
            },
            {
                "name": "golem",
                "properName": "Golem",
                "decimals": 18,
                "displayUnit": "GNT",
                "shapeShiftUnit": "gnt",
                "blockExplorer": "Golem",
                "addresses": {
                    "current": "0xa74476443119A942dE498590Fe1f2454d7D4aC0d"
                }
            },
            {
                "name": "metal",
                "properName": "Metal",
                "decimals": 8,
                "displayUnit": "MTL",
                "shapeShiftUnit": "mtl",
                "blockExplorer": "Metal",
                "addresses": {
                    "current": "0xF433089366899D83a9f26A773D59ec7eCF30355e"
                }
            },
            {
                "name": "omisego",
                "properName": "OmiseGo",
                "decimals": 18,
                "displayUnit": "OMG",
                "shapeShiftUnit": "omg",
                "blockExplorer": "OmiseGo",
                "addresses": {
                    "current": "0xd26114cd6EE289AccF82350c8d8487fedB8A0C07"
                }
            },
            {
                "name": "qtum",
                "properName": "QTUM",
                "decimals": 18,
                "displayUnit": "QTUM",
                "shapeShiftUnit": "",
                "blockExplorer": "Qtum",
                "addresses": {
                    "current": "0x9a642d6b3368ddc662CA244bAdf32cDA716005BC"
                }
            },
            {
                "name": "salt",
                "properName": "SALT",
                "decimals": 8,
                "displayUnit": "SALT",
                "shapeShiftUnit": "salt",
                "blockExplorer": "0x4156D3342D5c385a87D264F90653733592000581",
                "addresses": {
                    "current": "0x4156D3342D5c385a87D264F90653733592000581"
                }
            },
            {
                "name": "status",
                "properName": "Status",
                "decimals": 18,
                "displayUnit": "SNT",
                "shapeShiftUnit": "snt",
                "blockExplorer": "StatusNetwork",
                "addresses": {
                    "current": "0x744d70FDBE2Ba4CF95131626614a1763DF805B9E"
                }
            },
            {
                "name": "storj",
                "properName": "Storj",
                "decimals": 8,
                "displayUnit": "STORJ",
                "shapeShiftUnit": "",
                "blockExplorer": "Storj",
                "addresses": {
                    "current": "0xB64ef51C888972c908CFacf59B47C1AfBC0Ab8aC"
                }
            },
            {
                "name": "wings",
                "properName": "Wings",
                "decimals": 18,
                "displayUnit": "WINGS",
                "shapeShiftUnit": "wings",
                "blockExplorer": "WINGS",
                "addresses": {
                    "current": "0x667088b212ce3d06a1b553a7221E1fD19000d9aF"
                }
            },
            {
                "name": "zerox",
                "properName": "0x",
                "decimals": 18,
                "displayUnit": "ZRX",
                "shapeShiftUnit": "zrx",
                "blockExplorer": "ZRX",
                "addresses": {
                    "current": "0xE41d2489571d322189246DaFA5ebDe1F4699F498"
                }
            }
        ]

    }, {}],
    180: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _appConfig = require(80);
        var _aureus = require(192);
        var _currencyUnits = require(212);
        var _util = require(213);
        var _ethereumjsUtil = require('ethereumjs-util');
        var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);
        var _ = require(178);
        var ethereum = _interopRequireWildcard(_);
        var _tokens = require(179);
        var _tokens2 = _interopRequireDefault(_tokens);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const listExodus = ['aragon', 'augur', 'bat', 'civic', 'district0x', 'eos', 'funfair', 'gnosis', 'golem', 'omisego', 'qtum', 'salt'];
        const listDefaultEnabled = ['aragon', 'augur', 'bat', 'civic', 'district0x', 'eos', 'funfair', 'gnosis', 'golem', 'omisego', 'salt'];
        const gasTx = 120e3;
        const tokenTemplate = {
            hasMultipleAddresses: false,
            hasUTXO: false,
            isAccountBased: true,
            isEthereumToken: true,
            isOmniProperty: false,
            gasTx,
            fee: ethereum.getFee(gasTx),
            address: {
                validate: ethereum.address.validate
            },
            bip44: ethereum.bip44,
            keys: {
                encodePrivate: ethereum.keys.encodePrivate,
                encodePublic: ethereum.keys.encodePublic
            }
        };

        function createContract(addresses, currency) {
            const TRANSFER_METHOD_ID = '0xa9059cbb';
            const TRANSFER_EVENT_ID = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';
            const transfer = {
                METHOD_ID: TRANSFER_METHOD_ID,
                EVENT_ID: TRANSFER_EVENT_ID,
                build(to, amount) {
                    const bufAmount = (0, _util.currency2buffer)(amount);
                    return Buffer.concat([_ethereumjsUtil2.default.toBuffer(TRANSFER_METHOD_ID), _ethereumjsUtil2.default.zeros(12), _ethereumjsUtil2.default.toBuffer(to), _ethereumjsUtil2.default.zeros(32 - bufAmount.length), bufAmount]);
                },
                test(data) {
                    return _ethereumjsUtil2.default.bufferToHex(data.slice(0, 4)) === TRANSFER_METHOD_ID;
                },
                parse(data) {
                    if (!transfer.test(data)) throw new Error('It is not transfer data');
                    return {
                        to: _ethereumjsUtil2.default.bufferToHex(data.slice(16, 36)),
                        amount: currency.baseUnit(_ethereumjsUtil2.default.bufferToHex(data.slice(36, 68)))
                    };
                }
            };
            return {
                addresses,
                transfer
            };
        }
        exports.default = _tokens2.default.map(fixture => {
            const currency = _aureus.UnitType.create(fixture.name, _currencyUnits.cryptoCurrency, {
                base: 0,
                [fixture.displayUnit]: fixture.decimals
            }, fixture.displayUnit);
            const token = Object.assign({}, tokenTemplate, {
                name: fixture.name,
                properName: fixture.properName,
                available: ethereum.available && (_appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN || _appConfig.ENV_BUILD_EXODUS && listExodus.includes(fixture.name)),
                defaultEnabled: listDefaultEnabled.includes(fixture.name),
                currency,
                displayUnit: fixture.displayUnit,
                shapeShiftUnit: fixture.shapeShiftUnit,
                units: [fixture.displayUnit],
                blockExplorer: {
                    addressUrl: address => `https://etherscan.io/token/${fixture.blockExplorer}?a=${address}`,
                    txUrl: txId => `https://etherscan.io/tx/${txId}`
                },
                contract: createContract(fixture.addresses, currency)
            });
            ethereum.gasPriceEvents.on('new', () => {
                token.fee = ethereum.getFee(gasTx);
            });
            return token;
        });

    }, {
        "178": 178,
        "179": 179,
        "192": 192,
        "212": 212,
        "213": 213,
        "80": 80,
        "undefined": undefined
    }],
    181: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.gasPriceEvents = exports.fee = exports.gasPrice = exports.gasContract = exports.gasTx = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.getFee = getFee;
        exports.setGasPrice = setGasPrice;
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _exodusEthereumServer = require(229);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _events = require('events');
        var _ethereum = require(178);
        var ethereum = _interopRequireWildcard(_ethereum);
        var _memoizeLruCache = require(273);
        var _memoizeLruCache2 = _interopRequireDefault(_memoizeLruCache);
        var _twoOfTwoEcdsaThreshold = require(310);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const name = exports.name = 'ethereumclassic';
        const properName = exports.properName = 'ETH Classic';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = ethereum.hasMultipleAddresses;
        const hasUTXO = exports.hasUTXO = ethereum.hasUTXO;
        const isAccountBased = exports.isAccountBased = ethereum.isAccountBased;
        const isEthereumToken = exports.isEthereumToken = ethereum.isEthereumToken;
        const isOmniProperty = exports.isOmniProperty = ethereum.isOmniProperty;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            wei: 0,
            Kwei: 3,
            Mwei: 6,
            shannon: 9,
            szabo: 12,
            finney: 15,
            ETC: 18
        }, 'ETC');
        const displayUnit = exports.displayUnit = 'ETC';
        const shapeShiftUnit = exports.shapeShiftUnit = 'etc';
        const units = exports.units = ['ETC'];
        const gasTx = exports.gasTx = 21e3;
        const gasContract = exports.gasContract = 1e6;
        let gasPrice = exports.gasPrice = undefined;
        let fee = exports.fee = undefined;

        function getFee(gasLimit) {
            return currency.wei(gasPrice.toNumber() * gasLimit);
        }
        const gasPriceEvents = exports.gasPriceEvents = new _events.EventEmitter();

        function setGasPrice(newGasPrice) {
            if (gasPrice && gasPrice.toNumber() === newGasPrice) return;
            console.log(`ethereumclassic gas: ${newGasPrice}`);
            exports.gasPrice = gasPrice = currency.wei(newGasPrice);
            exports.fee = fee = getFee(gasTx);
            gasPriceEvents.emit('new');
        }
        setGasPrice(50e9);
        const address = exports.address = {
            validate: ethereum.address.validate,
            isContract: (0, _memoizeLruCache2.default)((() => {
                var _ref = _asyncToGenerator(function*(address) {
                    const code = yield(0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.getCode, etcchain.getCode)(address);
                    return code.length > 2;
                });
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            })(), key => key, {
                max: 100
            })
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate: ethereum.keys.encodePrivate,
            encodePublic: ethereum.keys.encodePublic
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://gastracker.io/addr/${address}`,
            txUrl: txId => `https://gastracker.io/tx/${txId}`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoEcdsaThreshold.alice)({
            publicKeyEncode: keys.encodePublic
        });

    }, {
        "178": 178,
        "192": 192,
        "201": 201,
        "212": 212,
        "221": 221,
        "229": 229,
        "273": 273,
        "310": 310,
        "undefined": undefined
    }],
    182: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.fee = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.setNewECRate = setNewECRate;
        var _appConfig = require(80);
        var _aureus = require(192);
        var _currencyUnits = require(212);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _factomjsLib = require('factomjs-lib');
        var _factomjsLib2 = _interopRequireDefault(_factomjsLib);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'factom';
        const properName = exports.properName = 'Factom';
        const available = exports.available = _appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN;
        const defaultEnabled = exports.defaultEnabled = false;
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = false;
        const isAccountBased = exports.isAccountBased = true;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            factoshis: 0,
            FCT: 8
        }, 'FCT');
        const displayUnit = exports.displayUnit = 'FCT';
        const shapeShiftUnit = exports.shapeShiftUnit = 'fct';
        const units = exports.units = ['FCT'];

        function setNewECRate(newECRate) {
            exports.fee = fee = currency.factoshis(newECRate * 12);
        }
        let fee = exports.fee = undefined;
        setNewECRate(1e4);
        const address = exports.address = {
            validate: _factomjsLib2.default.address.fct.isValidHumanReadable
        };
        const bip44 = exports.bip44 = _bip44Constants2.default['factom-factoids'];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                return _factomjsLib2.default.privateKey.fct.toHumanReadable(privateKey);
            },
            encodePublic(publicKey, privateKey) {
                publicKey = _factomjsLib2.default.crypto.publicKeyCreate(privateKey);
                const rcd1 = _factomjsLib2.default.rcd.createRCD1(publicKey);
                const rcdHash = _factomjsLib2.default.rcd.getHash(rcd1);
                return _factomjsLib2.default.address.fct.toHumanReadable(rcdHash);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://explorer.factom.org/address/${address}`,
            txUrl: txId => `https://explorer.factom.org/tx/${txId}`
        };

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "80": 80,
        "undefined": undefined
    }],
    183: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(name) {
            if (!cache[name]) {
                const item = document.querySelector('#exodus-window');
                if (!item) return '#000000';
                cache[name] = window.getComputedStyle(item).getPropertyValue(`--color-${name}`);
            }
            return cache[name];
        };
        const cache = {};

    }, {}],
    184: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _bcash = require(172);
        var bcash = _interopRequireWildcard(_bcash);
        var _bcashclaim = require(173);
        var bcashclaim = _interopRequireWildcard(_bcashclaim);
        var _bitcoin = require(174);
        var bitcoin = _interopRequireWildcard(_bitcoin);
        var _dash = require(176);
        var dash = _interopRequireWildcard(_dash);
        var _decred = require(177);
        var decred = _interopRequireWildcard(_decred);
        var _ethereum = require(178);
        var ethereum = _interopRequireWildcard(_ethereum);
        var _ethereumclassic = require(181);
        var ethereumclassic = _interopRequireWildcard(_ethereumclassic);
        var _factom = require(182);
        var factom = _interopRequireWildcard(_factom);
        var _litecoin = require(185);
        var litecoin = _interopRequireWildcard(_litecoin);
        var _monero = require(186);
        var monero = _interopRequireWildcard(_monero);
        var _ripple = require(187);
        var ripple = _interopRequireWildcard(_ripple);
        var _zcash = require(189);
        var zcash = _interopRequireWildcard(_zcash);
        var _tokens = require(180);
        var _tokens2 = _interopRequireDefault(_tokens);
        var _tether = require(188);
        var tether = _interopRequireWildcard(_tether);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const assets = [bcash, bcashclaim, bitcoin, dash, decred, ethereum, ethereumclassic, factom, litecoin, monero, ripple, zcash];
        assets.push(..._tokens2.default);
        assets.push(tether);
        exports.default = lodash.sortBy(assets, 'properName').reduce((obj, asset) => {
            return Object.assign(obj, {
                [asset.name]: asset
            });
        }, {});

    }, {
        "172": 172,
        "173": 173,
        "174": 174,
        "176": 176,
        "177": 177,
        "178": 178,
        "180": 180,
        "181": 181,
        "182": 182,
        "185": 185,
        "186": 186,
        "187": 187,
        "188": 188,
        "189": 189,
        "undefined": undefined
    }],
    185: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.twoOfTwo = exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _twoOfTwoMultisig = require(314);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'litecoin';
        const properName = exports.properName = 'Litecoin';
        const available = exports.available = true;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = true;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            latoshis: 0,
            LTC: 8
        }, 'LTC');
        const displayUnit = exports.displayUnit = 'LTC';
        const shapeShiftUnit = exports.shapeShiftUnit = 'ltc';
        const units = exports.units = ['LTC'];
        const feePerKB = exports.feePerKB = currency.latoshis(950000);
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)(name).versions.public,
                p2sh: (0, _coininfo2.default)(name).versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && payload[0] === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 21 && [address.versions.p2pkh, address.versions.p2sh].includes(payload[0]);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)(name).versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.concat([Buffer.from([address.versions.p2pkh]), pubKeyHash]);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://live.blockcypher.com/ltc/address/${address}/`,
            txUrl: txId => `https://live.blockcypher.com/ltc/tx/${txId}/`
        };
        const twoOfTwo = exports.twoOfTwo = (0, _twoOfTwoMultisig.alice)({
            network: (0, _coininfo2.default)(name)
        });

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "314": 314,
        "undefined": undefined
    }],
    186: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.fee = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        var _appConfig = require(80);
        var _aureus = require(192);
        var _currencyUnits = require(212);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _monerojsUtil = require(281);
        var moneroUtil = _interopRequireWildcard(_monerojsUtil);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'monero';
        const properName = exports.properName = 'Monero';
        const available = exports.available = _appConfig.ENV_DEV;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = true;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            atomic: 0,
            XMR: 12
        }, 'XMR');
        const displayUnit = exports.displayUnit = 'XMR';
        const shapeShiftUnit = exports.shapeShiftUnit = 'xmr';
        const units = exports.units = ['XMR'];
        const fee = exports.fee = currency.XMR('0.026');
        const address = exports.address = {
            validate(address) {
                return moneroUtil.address.isValid(address);
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                return Buffer.from(privateKey).reverse().toString('hex');
            },
            encodePublic(publicKey, privateKey) {
                let spendPrivateKey = moneroUtil.crypto.reduceECKey(Buffer.from(privateKey));
                let spendPublicKey = moneroUtil.crypto.createECPublicKey(spendPrivateKey);
                let viewPrivateKey = moneroUtil.crypto.createECPrivateKey(spendPrivateKey);
                let viewPublicKey = moneroUtil.crypto.createECPublicKey(viewPrivateKey);
                let addr = moneroUtil.address.create(spendPublicKey, viewPublicKey);
                return addr;
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => '',
            txUrl: txId => `https://moneroblocks.info/tx/${txId}`
        };

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "281": 281,
        "80": 80
    }],
    187: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.accountReserve = exports.fee = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        exports.setFee = setFee;
        var _appConfig = require(80);
        var _rippleAddressCodec = require('ripple-address-codec');
        var _rippleAddressCodec2 = _interopRequireDefault(_rippleAddressCodec);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _address = require(291);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'ripple';
        const properName = exports.properName = 'Ripple';
        const available = exports.available = _appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN;
        const defaultEnabled = exports.defaultEnabled = false;
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = false;
        const isAccountBased = exports.isAccountBased = true;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            drop: 0,
            XRP: 6
        }, 'XRP');
        const displayUnit = exports.displayUnit = 'XRP';
        const shapeShiftUnit = exports.shapeShiftUnit = 'xrp';
        const units = exports.units = ['XRP'];

        function setFee(value) {
            if (fee && fee.toNumber() === value) return;
            console.log(`set ripple fee: ${value} drops`);
            exports.fee = fee = currency.baseUnit(value);
        }
        let fee = exports.fee = undefined;
        setFee(10);
        const accountReserve = exports.accountReserve = currency.XRP(20);
        const address = exports.address = {
            validate: _rippleAddressCodec2.default.isValidAccountID
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                return '00' + privateKey.toString('hex').toUpperCase();
            },
            encodePublic: _address.derive
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://bithomp.com/explorer/${address}`,
            txUrl: txId => `https://xrpcharts.ripple.com/#/transactions/${txId}`
        };

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "291": 291,
        "80": 80,
        "undefined": undefined
    }],
    188: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.simpleSend = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.defaultEnabled = exports.available = exports.omniPropertyId = exports.properName = exports.name = undefined;
        var _omni = require(175);
        Object.keys(_omni).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function() {
                    return _omni[key];
                }
            });
        });
        var _aureus = require(192);
        var _currencyUnits = require(212);
        const name = exports.name = 'tether';
        const properName = exports.properName = 'Tether';
        const omniPropertyId = exports.omniPropertyId = 31;
        const available = exports.available = false;
        const defaultEnabled = exports.defaultEnabled = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            atomic: 0,
            USDT: 8
        }, 'USDT');
        const displayUnit = exports.displayUnit = 'USDT';
        const shapeShiftUnit = exports.shapeShiftUnit = 'usdt';
        const units = exports.units = ['USDT'];
        const simpleSend = exports.simpleSend = (0, _omni._createSimpleSend)(omniPropertyId, currency);

    }, {
        "175": 175,
        "192": 192,
        "212": 212
    }],
    189: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.blockExplorer = exports.keys = exports.bip44 = exports.address = exports.feePerKB = exports.units = exports.shapeShiftUnit = exports.displayUnit = exports.currency = exports.isOmniProperty = exports.isEthereumToken = exports.isAccountBased = exports.hasUTXO = exports.hasMultipleAddresses = exports.defaultEnabled = exports.available = exports.properName = exports.name = undefined;
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _appConfig = require(80);
        var _currencyUnits = require(212);
        var _aureus = require(192);
        var _bip44Constants = require(201);
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const name = exports.name = 'zcash';
        const properName = exports.properName = 'Zcash';
        const available = exports.available = _appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN;
        const defaultEnabled = exports.defaultEnabled = true;
        const hasMultipleAddresses = exports.hasMultipleAddresses = false;
        const hasUTXO = exports.hasUTXO = true;
        const isAccountBased = exports.isAccountBased = false;
        const isEthereumToken = exports.isEthereumToken = false;
        const isOmniProperty = exports.isOmniProperty = false;
        const currency = exports.currency = _aureus.UnitType.create(name, _currencyUnits.cryptoCurrency, {
            satoshis: 0,
            ZEC: 8
        }, 'ZEC');
        const displayUnit = exports.displayUnit = 'ZEC';
        const shapeShiftUnit = exports.shapeShiftUnit = 'zec';
        const units = exports.units = ['ZEC'];
        const feePerKB = exports.feePerKB = currency.ZEC('0.0001');
        const address = exports.address = {
            versions: {
                p2pkh: (0, _coininfo2.default)(name).versions.public,
                p2sh: (0, _coininfo2.default)(name).versions.scripthash
            },
            isP2PKH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && payload.readUInt16BE(0) === address.versions.p2pkh;
            },
            isP2SH(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && payload.readUInt16BE(0) === address.versions.p2sh;
            },
            validate(string) {
                const payload = _bs58check2.default.decodeUnsafe(string);
                return payload && payload.length === 22 && [address.versions.p2pkh, address.versions.p2sh].includes(payload.readUInt16BE(0));
            }
        };
        const bip44 = exports.bip44 = _bip44Constants2.default[name];
        const keys = exports.keys = {
            encodePrivate(privateKey) {
                const versions = (0, _coininfo2.default)(name).versions;
                return _wif2.default.encode(versions.private, privateKey, true);
            },
            encodePublic(publicKey) {
                const sha = _crypto2.default.createHash('sha256').update(publicKey).digest();
                const pubKeyHash = _crypto2.default.createHash('rmd160').update(sha).digest();
                const payload = Buffer.allocUnsafe(22);
                payload.writeUInt16BE(address.versions.p2pkh);
                pubKeyHash.copy(payload, 2);
                return _bs58check2.default.encode(payload);
            }
        };
        const blockExplorer = exports.blockExplorer = {
            addressUrl: address => `https://zchain.online/address/${address}/`,
            txUrl: txId => `https://zchain.online/tx/${txId}/`
        };

    }, {
        "192": 192,
        "201": 201,
        "212": 212,
        "80": 80,
        "undefined": undefined
    }],
    190: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.playAudio = playAudio;

        function playAudio(audioFile) {
            let audio = new window.Audio(audioFile);
            audio.play();
        }

    }, {}],
    191: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = conversion;
        var _assert = require('assert');
        var _isNumberUnit = require(193);
        var _isNumberUnit2 = _interopRequireDefault(_isNumberUnit);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function conversion(numberUnit1, numberUnit2) {
            (0, _assert.ok)((0, _isNumberUnit2.default)(numberUnit1) && (0, _isNumberUnit2.default)(numberUnit2), 'Must pass in an instance of NumberUnit for both parameters.');
            const ut1 = numberUnit1.unitType;
            const ut2 = numberUnit2.unitType;
            let converter = function converter(someNumberUnit) {
                (0, _assert.ok)((0, _isNumberUnit2.default)(someNumberUnit), 'Must pass in an instance of a NumberUnit to convert.');
                const ut = someNumberUnit.unitType;
                (0, _assert.ok)(ut === ut1 || ut === ut2, `${ut.path} should be either ${ut1.path} or ${ut2.path}`);
                if (ut === ut1) {
                    let normalizeNum = someNumberUnit.to(numberUnit1.unitName);
                    let newNumber = normalizeNum._number.times(numberUnit2._number).div(numberUnit1._number);
                    return ut2[numberUnit2.unitName](newNumber).toBase().round().to(numberUnit2.unitName);
                } else if (ut === ut2) {
                    let normalizeNum = someNumberUnit.to(numberUnit2.unitName);
                    let newNumber = normalizeNum._number.times(numberUnit1._number).div(numberUnit2._number);
                    return ut1[numberUnit1.unitName](newNumber).toBase().round().to(numberUnit1.unitName);
                }
            };
            return converter;
        }

    }, {
        "193": 193,
        "undefined": undefined
    }],
    192: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.UnitType = exports.conversion = exports.isNumberUnit = undefined;
        var _numberUnit = require(194);
        var _numberUnit2 = _interopRequireDefault(_numberUnit);
        var _isNumberUnit2 = require(193);
        var _isNumberUnit3 = _interopRequireDefault(_isNumberUnit2);
        var _conversion2 = require(191);
        var _conversion3 = _interopRequireDefault(_conversion2);
        var _unitType = require(195);
        var _unitType2 = _interopRequireDefault(_unitType);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = _numberUnit2.default;
        const isNumberUnit = exports.isNumberUnit = _isNumberUnit3.default;
        const conversion = exports.conversion = _conversion3.default;
        const UnitType = exports.UnitType = _unitType2.default;

    }, {
        "191": 191,
        "193": 193,
        "194": 194,
        "195": 195
    }],
    193: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = isNumberUnit;

        function isNumberUnit(obj) {
            if (typeof obj !== 'object') return false;
            return '_number' in obj && 'unit' in obj && 'unitType' in obj && 'baseUnit' in obj && 'rootUnitType' in obj;
        }

    }, {}],
    194: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _assert = require('assert');
        var _bignumber = require('bignumber.js');
        var _bignumber2 = _interopRequireDefault(_bignumber);
        var _isNumberUnit2 = require(193);
        var _isNumberUnit3 = _interopRequireDefault(_isNumberUnit2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _bignumber2.default.config({
            ERRORS: false,
            DECIMAL_PLACES: 20,
            precision: 20
        });
        let NumberUnit = (_temp = _class = class NumberUnit {
            static create(number, unit, options) {
                return new NumberUnit(number, unit, options);
            }
            constructor(number, unit) {
                let {
                    strict
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this._number = new _bignumber2.default(number);
                this.unit = unit;
                this.unitType = unit.unitType;
                this.baseUnit = unit.unitType.baseUnit;
                this.defaultUnit = unit.unitType.defaultUnit;
                this.rootUnitType = unit.unitType.rootUnitType;
                this.unitName = this.unit.unitName;
                this.strict = strict == null ? NumberUnit.strict : strict;
            }
            abs() {
                return new NumberUnit(this._number.abs(), this.unit, {
                    strict: this.strict
                });
            }
            add(number) {
                number = this._coerceToNumberUnit(number);
                let base = number.toBase();
                let thisBase = this.toBase();
                let sumBase = base._number.plus(thisBase._number);
                return new NumberUnit(sumBase, this.baseUnit).to(this.unit);
            }
            clampLowerZero() {
                const zero = new NumberUnit(0, this.unit);
                if (this.gte(zero)) return this;
                else return zero;
            }
            clone() {
                return new NumberUnit(this._number, this.unit);
            }
            equals(number) {
                let base = number.toBase();
                let thisBase = this.toBase();
                return base._number.equals(thisBase._number);
            }
            gt(number) {
                let base = number.toBase();
                let thisBase = this.toBase();
                return thisBase._number.gt(base._number);
            }
            gte(number) {
                let base = number.toBase();
                let thisBase = this.toBase();
                return thisBase._number.gte(base._number);
            }
            inspect() {
                return `<NumberUnit: ${this.toString()} >`;
            }
            isZero() {
                return this.toNumber() === 0;
            }
            lt(number) {
                let base = number.toBase();
                let thisBase = this.toBase();
                return thisBase._number.lt(base._number);
            }
            lte(number) {
                let base = number.toBase();
                let thisBase = this.toBase();
                return thisBase._number.lte(base._number);
            }
            mul(num) {
                const base = this.toBase();
                base._number = base._number.mul(num).round();
                return base.to(this.unit);
            }
            floor() {
                return new NumberUnit(this._number.floor(), this.unit, {
                    strict: this.strict
                });
            }
            round() {
                return new NumberUnit(this._number.round(), this.unit, {
                    strict: this.strict
                });
            }
            ceil() {
                return new NumberUnit(this._number.ceil(), this.unit, {
                    strict: this.strict
                });
            }
            toFixed(x, rm) {
                if (rm === 'floor') rm = 3;
                if (rm === 'ceil') rm = 2;
                return new NumberUnit(this._number.toFixed(x, rm), this.unit, {
                    strict: this.strict
                });
            }
            negate() {
                return new NumberUnit(this._number.neg(), this.unit, {
                    strict: this.strict
                });
            }
            subtract(number) {
                number = this._coerceToNumberUnit(number);
                let base = number.toBase();
                let thisBase = this.toBase();
                let sumBase = thisBase._number.minus(base._number);
                return new NumberUnit(sumBase, this.baseUnit).to(this.unit);
            }
            toBase() {
                if (this.unit.multiplier === 1) {
                    return this.clone();
                }
                let newNumber = this._number.times(this.unit.multiplier);
                return new NumberUnit(newNumber, this.baseUnit);
            }
            toDefault() {
                return this.to(this.defaultUnit);
            }
            to(unit, conversionUnit) {
                if (typeof unit === 'string') {
                    unit = this.unitType.units[unit];
                }(0, _assert.ok)(typeof unit === 'string' || typeof unit === 'function', 'Unit must be either a string or a function from UnitType.');
                (0, _assert.strictEqual)(this.rootUnitType, unit.rootUnitType, `Incompatible root unit types: ${this.rootUnitType.label} and ${unit.rootUnitType.label}`);
                if (this.unit.unitType !== unit.unitType) {
                    if (!conversionUnit) throw new Error('Incompatible unit types. Must specify a conversion.');
                    if (typeof conversionUnit !== 'function') {
                        if (this.unitType !== conversionUnit.from.unitType) throw new Error('Conversion unit from is of different type.');
                        let normalizeNum = this.to(this.unitType[conversionUnit.fromUnit]);
                        let newNumber = normalizeNum._number.times(conversionUnit.toValue).div(conversionUnit.fromValue);
                        return new NumberUnit(newNumber, conversionUnit.to.unitType[conversionUnit.toUnit]);
                    } else {
                        return conversionUnit(this);
                    }
                } else {
                    var base = this.toBase();
                    let newNumber = base._number.div(unit.multiplier);
                    return new NumberUnit(newNumber, unit);
                }
            }
            toJSON() {
                return {
                    value: this._number.toString(),
                    unit: this.unitName,
                    unitType: this.unitType.path,
                    type: 'NumberUnit'
                };
            }
            toNumber() {
                return this._number.toNumber();
            }
            toString() {
                let {
                    unit = true, format = undefined
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                if (!format) {
                    return this._number.toString() + (unit ? ' ' + this.unitName : '');
                } else {
                    return format(this._number, this.unit);
                }
            }
            valueOf() {
                return this.toDefault().toNumber();
            }
            get value() {
                return this.toString();
            }
            get isNegative() {
                return this._number.isNegative();
            }
            _coerceToNumberUnit(number) {
                let isNU = NumberUnit.isNumberUnit(number);
                if (!isNU && this.strict) throw new Error("Strict mode: can't perform operation on anything other than instance of NumberUnit");
                if (isNU) return number;
                else return new NumberUnit(number, this.unit);
            }
        }, _class.isNumberUnit = _isNumberUnit3.default, _class.strict = false, _temp);
        exports.default = NumberUnit;

    }, {
        "193": 193,
        "undefined": undefined
    }],
    195: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _unit = require(196);
        var Unit = _interopRequireWildcard(_unit);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let UnitType = class UnitType {
            static create(label, parent, definitions, defaultUnit) {
                return new UnitType(label, parent, definitions, defaultUnit);
            }
            constructor(label, parent, definitions, defaultUnit) {
                (0, _assert2.default)(label, 'UnitType:constructor(): Must specify a unit type label.');
                (0, _assert2.default)(parent ? parent instanceof UnitType : true, 'UnitType:constructor(): Parent unit must be of type Unit or null.');
                this.label = label;
                this.path = parent ? parent.path + '/' + label : label;
                this.rootUnitType = parent ? parent.rootUnitType : this;
                if (definitions) {
                    (0, _assert2.default)(defaultUnit, 'if unit definitions are defined, a defaultUnit must be defined');
                    this._applyDefinitions(definitions, defaultUnit);
                }
            }
            _applyDefinitions(definitions, defaultUnit) {
                this.units = {};
                Object.keys(definitions).forEach(key => {
                    this.units[key] = Unit.create(this, key, definitions[key]);
                    this[key] = this.units[key];
                });
                let baseUnits = Object.keys(this.units).filter(unit => this.units[unit].multiplier === 1);
                this.baseUnit = baseUnits ? baseUnits[0] : null;
                (0, _assert2.default)(this.baseUnit, `UnitType.create(${this.label}): At least one unit must have a multiplier of 1 (power of 0).`);
                this.baseUnit = this.units[this.baseUnit];
                this.defaultUnit = this.units[defaultUnit];
                (0, _assert2.default)(this.defaultUnit, 'Incorrect default unit key set. Mispelling on default unit?');
            }
            inspect() {
                return this.toString();
            }
            parse(str) {
                _assert2.default.strictEqual(typeof str, 'string');
                let [amount, unit] = str.split(' ');
                (0, _assert2.default)(unit, 'Number unit string not proper format. Should be number and unit.');
                (0, _assert2.default)(this.units[unit], 'Unit not found.');
                return this.units[unit](amount);
            }
            toString() {
                return this.path;
            }
            get ZERO() {
                return this.defaultUnit(0);
            }
        };
        exports.default = UnitType;

    }, {
        "196": 196,
        "undefined": undefined
    }],
    196: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.create = create;
        var _numberUnit = require(194);
        var _numberUnit2 = _interopRequireDefault(_numberUnit);
        var _isNumberUnit = require(193);
        var _isNumberUnit2 = _interopRequireDefault(_isNumberUnit);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function create(unitType, name, power) {
            let numberUnitCreator = val => {
                if ((0, _isNumberUnit2.default)(val)) {
                    return val.to(numberUnitCreator);
                } else {
                    return _numberUnit2.default.create(val, numberUnitCreator);
                }
            };
            numberUnitCreator.unitName = name;
            numberUnitCreator.power = power;
            numberUnitCreator.multiplier = Math.pow(10, power);
            numberUnitCreator.unitType = unitType;
            numberUnitCreator.rootUnitType = unitType.rootUnitType;
            numberUnitCreator.toJSON = function() {
                return {
                    unitName: numberUnitCreator.unitName,
                    multiplier: numberUnitCreator.multiplier,
                    unitType: numberUnitCreator.unitType.path,
                    rootUnitType: numberUnitCreator.rootUnitType
                };
            };
            numberUnitCreator.inspect = function() {
                return numberUnitCreator.toJSON();
            };
            numberUnitCreator.toString = function() {
                return numberUnitCreator.unitName;
            };
            return numberUnitCreator;
        }

    }, {
        "193": 193,
        "194": 194
    }],
    197: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(fn) {
            _assert2.default.equal(typeof fn, 'function');
            return _asyncToGenerator(function*() {
                try {
                    return [null, yield fn(...arguments)];
                } catch (err) {
                    return [err];
                }
            });
        };
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "undefined": undefined
    }],
    198: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _lodash = require('lodash');
        var _window = require(336);
        var _window2 = _interopRequireDefault(_window);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const KEY = 'exodus:auth';
        exports.default = {
            setCurrent(auth) {
                (0, _assert2.default)(allBuffers(auth), 'auth must contain only buffers');
                _window2.default.localStorage.setItem(KEY, serialize(auth));
            },
            set current(auth) {
                (0, _assert2.default)(allBuffers(auth), 'auth must contain only buffers');
                _window2.default.localStorage.setItem(KEY, serialize(auth));
            },
            get current() {
                let item = _window2.default.localStorage.getItem(KEY);
                if (item == null) return null;
                return deserialize(item);
            },
            clear() {
                _window2.default.localStorage.removeItem(KEY);
            }
        };

        function allBuffers(auth) {
            return Object.keys(auth).every(key => Buffer.isBuffer(auth[key]));
        }

        function serialize(auth) {
            return JSON.stringify((0, _lodash.mapValues)(auth, val => val.toString('base64')));
        }

        function deserialize(auth) {
            return (0, _lodash.mapValues)(JSON.parse(auth), val => Buffer.from(val, 'base64'));
        }

    }, {
        "336": 336,
        "undefined": undefined
    }],
    199: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.decode = decode;
        var _querystring = require('querystring');
        var _querystring2 = _interopRequireDefault(_querystring);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function decode(uri) {
            if (uri.includes(':')) {
                let colPos = uri.indexOf(':');
                let coin = uri.slice(0, colPos);
                let qPos = uri.indexOf('?');
                let address = uri.slice(colPos + 1, qPos > 0 ? qPos : undefined);
                let amount;
                if (qPos > 0) {
                    amount = _querystring2.default.parse(uri.slice(qPos + 1)).amount;
                }
                return {
                    coin,
                    address,
                    amount
                };
            } else {
                return {
                    address: uri
                };
            }
        }

    }, {
        "undefined": undefined
    }],
    200: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = exports.HARDENED_OFFSET = undefined;
        exports.fromMasterSeed = fromMasterSeed;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _hdkey = require('hdkey');
        var _hdkey2 = _interopRequireDefault(_hdkey);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const HARDENED_OFFSET = exports.HARDENED_OFFSET = _hdkey2.default.HARDENED_OFFSET;

        function fromMasterSeed() {
            return BIP32.create(_hdkey2.default.fromMasterSeed.apply(_hdkey2.default, arguments), 'master');
        }
        let BIP32 = class BIP32 {
            constructor(hdkey) {
                let tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                let {
                    spendable = false, coin
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this._hdkey = hdkey;
                this.coin = coin;
                this.tag = tag;
                if (coin)(0, _assert2.default)(typeof coin === 'string', `coin must be a string, not ${typeof coin}`);
                if (spendable) {
                    (0, _assert2.default)(coin, 'if spendable is set to true, then coin must be set');
                }
                this.isSpendable = spendable;
            }
            static create(hdkey, tag) {
                let {
                    spendable = false, coin
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                return new BIP32(hdkey, tag, {
                    spendable,
                    coin
                });
            }
            static fromJSON(jsonStrOrObj) {
                if (typeof strOrObj === 'string') jsonStrOrObj = JSON.parse(jsonStrOrObj);
                let hdkey = _hdkey2.default.fromJSON(jsonStrOrObj);
                let {
                    isSpendable,
                    tag,
                    coin
                } = jsonStrOrObj;
                return new BIP32(hdkey, tag, {
                    spendable: isSpendable,
                    coin
                });
            }
            static fromXPub(base58xpub) {
                let opts = {};
                let tag = 'tag-does-not-matter';
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 1) opts = arguments.length <= 1 ? undefined : arguments[1];
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 2) {
                    tag = arguments.length <= 1 ? undefined : arguments[1];
                    opts = arguments.length <= 2 ? undefined : arguments[2];
                }
                const hdkey = _hdkey2.default.fromExtendedKey(base58xpub);
                return new BIP32(hdkey, tag, opts);
            }
            derive(numOrPath, newTag) {
                let {
                    spendable = false, coin = this.coin
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                _assert2.default.strictEqual(typeof newTag, 'string', 'tag should be a string');
                if (typeof numOrPath === 'number') {
                    (0, _assert2.default)(!Number.isNaN(numOrPath), 'derive(): is passing number, verify not NaN');
                    return BIP32.create(this._hdkey.deriveChild(numOrPath), newTag, {
                        spendable,
                        coin
                    });
                } else if (typeof numOrPath === 'string') {
                    return BIP32.create(this._hdkey.derive(numOrPath), newTag, {
                        spendable,
                        coin
                    });
                } else {
                    throw new Error('derive(): Unknown type.');
                }
            }
            inspect() {
                let ret = this.toJSON();
                if (this.isSpendable) {
                    ret = Object.assign({}, ret, {
                        wif: this.privateEncoded,
                        address: this.publicAddress
                    });
                }
                return ret;
            }
            toJSON() {
                let json = this._hdkey.toJSON();
                json.tag = this.tag;
                json.coin = this.coin;
                json.isSpendable = this.isSpendable;
                return json;
            }
            toString() {
                return JSON.stringify(this.inspect(), null, 2);
            }
            get privateEncoded() {
                if (this.isSpendable && typeof this.coin === 'string') {
                    return _assets2.default[this.coin].keys.encodePrivate(this.privateKey);
                } else {
                    throw new Error('bip32.privateEncoded: not spendable');
                }
            }
            get privateKey() {
                return this._hdkey.privateKey;
            }
            get publicEncoded() {
                if (this.isSpendable && typeof this.coin === 'string') {
                    return _assets2.default[this.coin].keys.encodePublic(this.publicKey, this.privateKey);
                } else {
                    throw new Error('bip32.publicEncoded: not spendable');
                }
            }
            get publicKey() {
                return this._hdkey.publicKey;
            }
            get xPub() {
                return this._hdkey.publicExtendedKey;
            }
        };
        exports.default = BIP32;

    }, {
        "184": 184,
        "undefined": undefined
    }],
    201: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _bip44Constants = require('bip44-constants');
        var _bip44Constants2 = _interopRequireDefault(_bip44Constants);
        var _fp = require('lodash/fp');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const transformFn = (0, _fp.flow)((0, _fp.mapKeys)(_fp.kebabCase), (0, _fp.mapValues)(parseInt));
        let _constants = transformFn(_bip44Constants2.default);
        _constants.ethereum = _constants.ether;
        _constants.ethereumclassic = _constants['ether-classic'];
        exports.default = _constants;

    }, {
        "undefined": undefined
    }],
    202: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(address) {
            try {
                const buffer = _bs58check2.default.decode(address);
                switch (buffer[0]) {
                    case BITPAY_P2PKH:
                        buffer[0] = NORMAL_P2PKH;
                        break;
                    case BITPAY_P2SH:
                        buffer[0] = NORMAL_P2SH;
                        break;
                }
                return _bs58check2.default.encode(buffer);
            } catch (e) {
                return address;
            }
        };
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const NORMAL_P2PKH = (0, _coininfo2.default)('bitcoin').versions.public;
        const NORMAL_P2SH = (0, _coininfo2.default)('bitcoin').versions.scripthash;
        const BITPAY_P2PKH = 28;
        const BITPAY_P2SH = 40;

    }, {
        "undefined": undefined
    }],
    203: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _base = require('bs58check/base');
        var _base2 = _interopRequireDefault(_base);
        var _blakeHash = require('blake-hash');
        var _blakeHash2 = _interopRequireDefault(_blakeHash);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function blake256x2(buffer) {
            buffer = (0, _blakeHash2.default)('blake256').update(buffer).digest();
            return (0, _blakeHash2.default)('blake256').update(buffer).digest();
        }
        exports.default = (0, _base2.default)(blake256x2);

    }, {
        "undefined": undefined
    }],
    204: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _crypto = require('crypto');
        var _lodash = require('lodash');
        var _appConfig = require(80);
        var _configKeys = require(206);
        var configKeys = _interopRequireWildcard(_configKeys);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        let defaultConfig = {};
        (0, _lodash.set)(defaultConfig, configKeys.fiatUnit, 'USD');
        (0, _lodash.set)(defaultConfig, configKeys.themeName, 'origin');
        (0, _lodash.set)(defaultConfig, configKeys.p2pEthereumNodeKey, (0, _crypto.randomBytes)(32).toString('hex'));
        (0, _lodash.set)(defaultConfig, configKeys.marketPrices, ['cryptocompare', 'coinmarketcap']);
        (0, _lodash.set)(defaultConfig, configKeys.notificationsTxReceivedEnabled, _appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN);
        exports.default = defaultConfig;

    }, {
        "206": 206,
        "80": 80,
        "undefined": undefined
    }],
    205: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.writeConfig = exports.readConfig = exports.default = exports.getConfigFile = exports.FILE = undefined;
        let readConfig = exports.readConfig = (() => {
            var _ref = _asyncToGenerator(function*() {
                const cfgFile = getConfigFile();
                try {
                    const cfgData = yield _fsExtra2.default.readJson(cfgFile);
                    const c = new Config();
                    c._data = cfgData;
                    return c;
                } catch (err) {
                    console.error(err);
                    return Config.createDefault();
                }
            });
            return function readConfig() {
                return _ref.apply(this, arguments);
            };
        })();
        let writeConfig = exports.writeConfig = (() => {
            var _ref2 = _asyncToGenerator(function*(config) {
                (0, _assert2.default)(config._data, 'Config object only.');
                const cfgFile = getConfigFile();
                yield _fsExtra2.default.writeJson(cfgFile, config._data, {
                    spaces: 2
                });
            });
            return function writeConfig(_x2) {
                return _ref2.apply(this, arguments);
            };
        })();
        exports.readConfigSync = readConfigSync;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _lodash = require('lodash');
        var _env = require(219);
        var _appConfig = require(80);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _configDefault = require(204);
        var _configDefault2 = _interopRequireDefault(_configDefault);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const FILE = exports.FILE = 'exodus.conf.json';
        const getConfigFile = exports.getConfigFile = () => _path2.default.join((0, _env.dataDir)(), FILE);
        let Config = class Config {
            constructor() {
                let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this._data = {
                    meta: {
                        configVersion: '1.0.0',
                        exodusVersionCreated: _appConfig.PACKAGE.version,
                        exodusVersionUpdated: _appConfig.PACKAGE.version,
                        createdAt: Date(),
                        updatedAt: Date()
                    },
                    data: (0, _lodash.cloneDeep)(data)
                };
            }
            static createDefault() {
                return new Config(_configDefault2.default);
            }
            get(fieldPath) {
                let value = (0, _lodash.get)(this._data.data, fieldPath);
                if (value === undefined) value = (0, _lodash.get)(_configDefault2.default, fieldPath);
                return value;
            }
            set(fieldPath, value) {
                let c = new Config();
                c._data = (0, _lodash.cloneDeep)(this._data);
                (0, _lodash.set)(c._data.data, fieldPath, value);
                updateMeta(c);
                return c;
            }
        };
        exports.default = Config;

        function readConfigSync() {
            const cfgFile = getConfigFile();
            try {
                const cfgData = _fsExtra2.default.readJsonSync(cfgFile);
                const c = new Config();
                c._data = cfgData;
                return c;
            } catch (err) {
                console.error(err);
                return Config.createDefault();
            }
        }

        function updateMeta(configObj) {
            configObj._data.meta.exodusVersionUpdated = _appConfig.PACKAGE.version;
            configObj._data.meta.updatedAt = Date();
        }

    }, {
        "204": 204,
        "219": 219,
        "80": 80,
        "undefined": undefined
    }],
    206: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const assets = exports.assets = 'assets';
        const fiatUnit = exports.fiatUnit = 'fiat.unit';
        const themeName = exports.themeName = 'theme.name';
        const p2pEthereumNodeKey = exports.p2pEthereumNodeKey = 'p2p.ethereum.nodekey';
        const marketPrices = exports.marketPrices = 'market.prices';
        const notificationsTxReceivedEnabled = exports.notificationsTxReceivedEnabled = 'notifications.tx.received.enabled';

    }, {}],
    207: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPrice = getPrice;
        exports.getPriceFromOHLC = getPriceFromOHLC;
        var _dateUtil = require(214);

        function getPrice(prices, time) {
            const priceData = prices.get((0, _dateUtil.startOfDay)(time).valueOf());
            if (!priceData) return null;
            return getPriceFromOHLC(priceData, time);
        }

        function getPriceFromOHLC(priceData, time) {
            const {
                open,
                close
            } = priceData;
            const startTime = (0, _dateUtil.startOfDay)(time);
            const diffSecs = (time - startTime) / 1000;
            const diffPrice = close - open;
            const price = diffPrice * diffSecs / _dateUtil.SECS_IN_DAY + open;
            return price;
        }

    }, {
        "214": 214
    }],
    208: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _aureus = require(192);
        var _currencyUnits = require(212);
        var _units = require(210);
        var _units2 = _interopRequireDefault(_units);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.default = lodash.mapValues(_units2.default, (unit, key) => {
            return _aureus.UnitType.create(key, _currencyUnits.fiatCurrency, {
                cents: 0,
                [key]: 2
            }, key);
        });

    }, {
        "192": 192,
        "210": 210,
        "212": 212,
        "undefined": undefined
    }],
    209: [function(require, module, exports) {
        module.exports = {
            "AUD": {
                "label": "AUD - Australian dollar",
                "symbol": "$"
            },
            "BRL": {
                "label": "BRL - Brazilian real",
                "symbol": "R$"
            },
            "CAD": {
                "label": "CAD - Canadian dollar",
                "symbol": "$"
            },
            "CHF": {
                "label": "CHF - Swiss franc",
                "symbol": "Fr"
            },
            "CLP": {
                "label": "CLP - Chilean peso",
                "symbol": "$"
            },
            "CNY": {
                "label": "CNY - Chinese yuan",
                "symbol": "¥"
            },
            "CZK": {
                "label": "CZK - Czech koruna",
                "symbol": "Kč"
            },
            "DKK": {
                "label": "DKK - Danish krone",
                "symbol": "kr"
            },
            "EUR": {
                "label": "EUR - Euro",
                "symbol": "€"
            },
            "GBP": {
                "label": "GBP - British pound",
                "symbol": "£"
            },
            "HKD": {
                "label": "HKD - Hong Kong dollar",
                "symbol": "$"
            },
            "HUF": {
                "label": "HUF - Hungarian forint",
                "symbol": "Ft"
            },
            "IDR": {
                "label": "IDR - Indonesian rupiah",
                "symbol": "Rp"
            },
            "ILS": {
                "label": "ILS - Israeli new shekel",
                "symbol": "₪"
            },
            "INR": {
                "label": "INR - Indian rupee",
                "symbol": "₹"
            },
            "JPY": {
                "label": "JPY - Japanese Yen",
                "symbol": "¥"
            },
            "KRW": {
                "label": "KRW - South Korean won",
                "symbol": "₩"
            },
            "MXN": {
                "label": "MXN - Mexican peso",
                "symbol": "$"
            },
            "MYR": {
                "label": "MYR - Malaysian ringgit",
                "symbol": "RM"
            },
            "NOK": {
                "label": "NOK - Norwegian krone",
                "symbol": "kr"
            },
            "NZD": {
                "label": "NZD - New Zealand dollar",
                "symbol": "$"
            },
            "PHP": {
                "label": "PHP - Philippine peso",
                "symbol": "₱"
            },
            "PKR": {
                "label": "PKR - Pakistani rupee",
                "symbol": "₨"
            },
            "PLN": {
                "label": "PLN - Polish złoty",
                "symbol": "zł"
            },
            "RUB": {
                "label": "RUB - Russian ruble",
                "symbol": "₽"
            },
            "SEK": {
                "label": "SEK - Swedish krona",
                "symbol": "kr"
            },
            "SGD": {
                "label": "SGD - Singapore dollar",
                "symbol": "$"
            },
            "THB": {
                "label": "THB - Thai baht",
                "symbol": "฿"
            },
            "TRY": {
                "label": "TRY - Turkish lira",
                "symbol": "₺"
            },
            "TWD": {
                "label": "TWD - New Taiwan dollar",
                "symbol": "$"
            },
            "USD": {
                "label": "USD - United States dollar",
                "symbol": "$"
            },
            "ZAR": {
                "label": "ZAR - South African rand",
                "symbol": "R"
            }
        }

    }, {}],
    210: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _units = require(209);
        var _units2 = _interopRequireDefault(_units);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const allowedUnits = [];
        const disabledUnits = ['CNY'];
        exports.default = lodash.pickBy(_units2.default, (unit, key) => {
            if (disabledUnits.includes(key)) return false;
            if (allowedUnits.length === 0) return true;
            return allowedUnits.includes(key);
        });

    }, {
        "209": 209,
        "undefined": undefined
    }],
    211: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.formatStr = formatStr;
        exports.formatObj = formatObj;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _aureus = require(192);
        var _formatCurrency = require('format-currency');
        var _formatCurrency2 = _interopRequireDefault(_formatCurrency);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _units = require(210);
        var _units2 = _interopRequireDefault(_units);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function createCryptoLookup(minFraction, maxFraction) {
            return (amount, unit, options) => {
                return (0, _formatCurrency2.default)(amount, Object.assign({
                    code: unit,
                    minFraction,
                    maxFraction,
                    format: '%v %c'
                }, options));
            };
        }

        function createFiatLookup(name) {
            return (amount, unit, options) => {
                options = Object.assign({
                    symbol: fiatSymbols[name],
                    code: unit,
                    minFraction: 2,
                    maxFraction: 2,
                    format: '%s%v %c'
                }, options);
                let prefix = '';
                if (parseInt(amount * 100, 10) < 1) {
                    prefix = '';
                }
                return prefix + (0, _formatCurrency2.default)(amount, options);
            };
        }
        const fiatSymbols = lodash.mapValues(_units2.default, 'symbol');
        const lookupFiat = Object.keys(fiatSymbols).reduce((obj, symbol) => {
            return Object.assign(obj, {
                [symbol]: createFiatLookup(symbol)
            });
        }, {});
        const lookupCrypto = Object.values(_assets2.default).reduce((obj, asset) => {
            const multiplier = Math.log10(Math.max(...Object.values(asset.currency.units).map(x => x.multiplier)));
            return Object.assign(obj, {
                [asset.displayUnit]: createCryptoLookup(2, multiplier)
            });
        }, {});
        const lookup = Object.assign(lookupFiat, lookupCrypto, {
            bits: createCryptoLookup(2, 2)
        });
        exports.default = lookup;

        function formatStr(amount, options) {
            (0, _assert2.default)((0, _aureus.isNumberUnit)(amount), 'NumberUnits only.');
            let unit = amount.unit.unitName;
            (0, _assert2.default)(unit in lookup, `${unit} does not have a corresponding formatter.`);
            return lookup[unit](amount.toNumber(), unit, options);
        }

        function formatObj(amount, options) {
            (0, _assert2.default)((0, _aureus.isNumberUnit)(amount), 'NumberUnits only.');
            let unit = amount.unit.unitName;
            (0, _assert2.default)(unit in lookup, `${unit} does not have a corresponding formatter.`);
            let decimalSep = '.';
            let groupSep = ',';
            let opts = Object.assign({}, options, {
                format: '%v'
            });
            let currency = formatStr(amount, opts);
            let parts = currency.split(decimalSep);
            let whole = parts[0];
            let prefix = '';
            if (whole.includes(' ')) {
                let wholeParts = whole.split(' ');
                whole = wholeParts[1];
                prefix = wholeParts[0];
            }
            let ret = {
                code: unit,
                whole,
                fraction: parts[1],
                decimalSep,
                groupSep
            };
            if (fiatSymbols[unit]) ret.symbol = fiatSymbols[unit];
            if (prefix) ret.prefix = prefix;
            return ret;
        }

    }, {
        "184": 184,
        "192": 192,
        "210": 210,
        "undefined": undefined
    }],
    212: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fiatCurrency = exports.cryptoCurrency = exports.currency = undefined;
        var _aureus = require(192);
        const currency = exports.currency = _aureus.UnitType.create('currency');
        const cryptoCurrency = exports.cryptoCurrency = _aureus.UnitType.create('crypto-currency', currency);
        const fiatCurrency = exports.fiatCurrency = _aureus.UnitType.create('fiat', currency);

    }, {
        "192": 192
    }],
    213: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.currency2buffer = currency2buffer;
        var _ethereumjsUtil = require('ethereumjs-util');

        function currency2buffer(value) {
            const hexValue = value.toBase()._number.toString(16);
            if (hexValue.includes('.')) {
                throw new RangeError(`${value.toBase().toString()} can not be converted to Buffer`);
            }
            return Buffer.from((0, _ethereumjsUtil.padToEven)(hexValue), 'hex');
        }

    }, {
        "undefined": undefined
    }],
    214: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getSecTZOffset = getSecTZOffset;
        exports.cloneDate = cloneDate;
        exports.secsToDate = secsToDate;
        exports.startOfDay = startOfDay;
        exports.endOfDay = endOfDay;
        exports.rangeMatcher = rangeMatcher;
        exports.startOfMonth = startOfMonth;
        exports.trimMillis = trimMillis;
        const SECS_IN_DAY = exports.SECS_IN_DAY = 86400;

        function getSecTZOffset() {
            return new Date().getTimezoneOffset() * 60;
        }

        function cloneDate(date) {
            return new Date(date.getTime());
        }

        function secsToDate(secs) {
            return new Date(secs * 1000);
        }

        function startOfDay(date) {
            let cd = cloneDate(date);
            cd.setUTCHours(0, 0, 0, 0);
            return cd;
        }

        function endOfDay(date) {
            let cd = cloneDate(date);
            cd.setUTCHours(23, 59, 59, 999);
            return cd;
        }

        function rangeMatcher(start, end) {
            return date => date >= start && date <= end;
        }

        function startOfMonth(date) {
            let cd = cloneDate(date);
            cd.setUTCDate(1);
            cd.setUTCHours(0, 0, 0, 0);
            return cd;
        }

        function trimMillis(date) {
            let cd = cloneDate(date);
            cd.setUTCMilliseconds(0);
            return cd;
        }

    }, {}],
    215: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = {
            showMessageBox: function() {
                if (process.type === 'renderer') {
                    require('electron').remote.dialog.showMessageBox.apply(require('electron').remote.dialog, arguments);
                } else {
                    require('electron').dialog.showMessageBox.apply(require('electron').dialog, arguments);
                }
            },
            showErrorBox: function() {
                if (process.type === 'renderer') {
                    require('electron').remote.dialog.showErrorBox.apply(require('electron').remote.dialog, arguments);
                } else {
                    require('electron').dialog.showErroBox.apply(require('electron').dialog, arguments);
                }
            }
        };

    }, {
        "undefined": undefined
    }],
    216: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.addQuitListener = addQuitListener;
        exports.quit = quit;
        var _electron = require('electron');
        var _isPromise = require('is-promise');
        var _isPromise2 = _interopRequireDefault(_isPromise);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const IPC_CHANNEL_QUIT = '__remote:electron-exit:quit';
        const IPC_CHANNEL_QL_REG = '__remote:electron-exit:ql-reg';
        const IPC_CHANNEL_QL_EXEC = '__remote:electron-exit:ql-exec';
        const IPC_CHANNEL_QL_EXEC_DONE = '__remote:electron-exit:ql-exec';
        const QUIT_LISTENERS = {};
        if (process.type === 'browser') {
            const QUIT_LISTENERS_FAILED = {};
            const removeListener = description => {
                delete QUIT_LISTENERS[description];
                if (Object.keys(QUIT_LISTENERS).length === 0) {
                    _electron.BrowserWindow.getAllWindows().forEach(bw => bw.destroy());
                    setImmediate(_electron.app.exit.bind(_electron.app));
                }
            };
            _electron.app.on('quit', () => {
                console.timeEnd('quitting');
            });
            _electron.app.on('browser-window-created', (event, browserWindow) => {
                browserWindow.on('close', event => {
                    if (Object.keys(QUIT_LISTENERS).length > 0) {
                        event.preventDefault();
                        setTimeout(browserWindow.hide.bind(browserWindow), 250);
                    }
                });
            });
            _electron.app.on('before-quit', event => {
                console.time('quitting');
                const listeners = Object.keys(QUIT_LISTENERS);
                if (listeners.length === 0) return;
                event.preventDefault();
                listeners.forEach(qlDesc => {
                    let val = QUIT_LISTENERS[qlDesc];
                    if (typeof val === 'object') {
                        val.send(IPC_CHANNEL_QL_EXEC, {
                            description: qlDesc
                        });
                    } else if (typeof val === 'function') {
                        tryExecMaybePromise(qlDesc, val, () => {
                            QUIT_LISTENERS_FAILED[qlDesc] = false;
                            removeListener(qlDesc);
                        }, err => {
                            QUIT_LISTENERS_FAILED[qlDesc] = err || true;
                            removeListener(qlDesc);
                        });
                    }
                });
                const listenerChecker = setInterval(() => {
                    const keys = Object.keys(QUIT_LISTENERS);
                    console.log(`waiting on: ${keys.join('\n')}`);
                    if (keys.length === 0) clearInterval(listenerChecker);
                }, 2500);
            });
            _electron.ipcMain.on(IPC_CHANNEL_QUIT, _electron.app.quit.bind(_electron.app));
            _electron.ipcMain.on(IPC_CHANNEL_QL_REG, (event, payload) => {
                const {
                    description
                } = payload;
                QUIT_LISTENERS[description] = event.sender;
            });
            _electron.ipcMain.on(IPC_CHANNEL_QL_EXEC_DONE, (event, payload) => {
                const {
                    description,
                    failed
                } = payload;
                QUIT_LISTENERS_FAILED[description] = failed;
                setImmediate(() => removeListener(description));
            });
        }

        function addQuitListener(description, fn) {
            if (QUIT_LISTENERS[description]) process.emitWarning(`Overwriting ${description} quit listener.`, 'electron-quit');
            QUIT_LISTENERS[description] = fn;
            if (process.type === 'renderer') {
                _electron.ipcRenderer.send(IPC_CHANNEL_QL_REG, {
                    description
                });
                _electron.ipcRenderer.on(IPC_CHANNEL_QL_EXEC, (event, payload) => {
                    const desc = payload.description;
                    if (desc !== description) return;
                    tryExecMaybePromise(description, fn, () => _electron.ipcRenderer.send(IPC_CHANNEL_QL_EXEC_DONE, {
                        description,
                        failed: false
                    }), err => _electron.ipcRenderer.send(IPC_CHANNEL_QL_EXEC_DONE, {
                        description,
                        failed: err || true
                    }));
                });
            }
        }

        function quit() {
            if (process.type === 'renderer') _electron.ipcRenderer.send(IPC_CHANNEL_QUIT);
            else _electron.app.quit();
        }

        function tryExecMaybePromise(desc, fn, _resolveFn, _catchFn) {
            let ret;
            let err;
            const resolveFn = () => setImmediate(_resolveFn);
            const catchFn = err => {
                process.emitWarning(`ERROR QUIT HANDLER: ${desc}`);
                process.emitWarning(err);
                setImmediate(_catchFn);
            };
            try {
                ret = fn();
            } catch (e) {
                err = e;
            }
            if ((0, _isPromise2.default)(ret)) {
                ret.then(resolveFn).catch(catchFn);
            } else {
                if (err) catchFn(err);
                else resolveFn();
            }
        }

    }, {
        "undefined": undefined
    }],
    217: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createClient = createClient;
        exports.createClientMethod = createClientMethod;
        var _electronIpcBroadcast = require('electron-ipc-broadcast');
        var _electronIpcBroadcast2 = _interopRequireDefault(_electronIpcBroadcast);
        var _errorToObject = require(220);
        var _shared = require(218);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const ipc = process.type === 'renderer' ? require('electron').ipcRenderer : require('electron').ipcMain;

        function createClient(name) {
            const objPropHandler = {
                get(target, prop, receiver) {
                    if (typeof prop === 'string') return createClientMethod(name, prop);
                    else return undefined;
                }
            };
            const fauxObj = {};
            return new Proxy(fauxObj, objPropHandler);
        }

        function createClientMethod(remoteName, fnName) {
            return function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                const token = randToken();
                const listenChannel = `${_shared.CHANNEL_PREFIX}:${remoteName}:response:${token}`;
                return new Promise((resolve, reject) => {
                    const broadcastChannel = `${_shared.CHANNEL_PREFIX}:${remoteName}:call`;
                    const payload = {
                        func: fnName,
                        args,
                        token
                    };
                    ipc.once(listenChannel, (event, _ref) => {
                        let {
                            payload
                        } = _ref;
                        const [serr, res] = payload;
                        if (serr) reject((0, _errorToObject.fromObject)(serr));
                        else resolve(res);
                    });
                    setImmediate(() => (0, _electronIpcBroadcast2.default)(broadcastChannel, payload));
                });
            };
        }

        function randToken() {
            return require('crypto').randomBytes(6).toString('hex');
        }

    }, {
        "218": 218,
        "220": 220,
        "undefined": undefined
    }],
    218: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const CHANNEL_PREFIX = exports.CHANNEL_PREFIX = 'electron-rpc-broadcast';

    }, {}],
    219: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.backupDir = backupDir;
        exports.dataDir = dataDir;
        exports.desktopDir = desktopDir;
        exports.exportsDir = exportsDir;
        exports.walletDir = walletDir;
        exports.walletBackupDir = walletBackupDir;
        var _isElectronRenderer = require('is-electron-renderer');
        var _isElectronRenderer2 = _interopRequireDefault(_isElectronRenderer);
        var _ospath = require('ospath');
        var _ospath2 = _interopRequireDefault(_ospath);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _paths = require(169);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function backupDir() {
            return _path2.default.join(dataDir(), 'backups');
        }

        function dataDir() {
            if (typeof process.type === 'undefined') {
                return _path2.default.join(_ospath2.default.data(), 'exodus');
            }
            const {
                app,
                remote
            } = require('electron');
            if (_isElectronRenderer2.default) {
                return remote.app.getPath('userData');
            } else {
                return app.getPath('userData');
            }
        }

        function desktopDir() {
            const {
                app,
                remote
            } = require('electron');
            if (_isElectronRenderer2.default) {
                return remote.app.getPath('desktop');
            } else {
                return app.getPath('desktop');
            }
        }

        function exportsDir() {
            const dir = global.EXPORTS_DIR || _path2.default.join(desktopDir(), 'exodus-exports');
            return dir;
        }

        function walletDir() {
            return _path2.default.join(dataDir(), _paths.WALLET_DIR);
        }

        function walletBackupDir() {
            return _path2.default.join(backupDir(), 'wallet');
        }

    }, {
        "169": 169,
        "undefined": undefined
    }],
    220: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.toObject = toObject;
        exports.fromObject = fromObject;
        var _fp = require('lodash/fp');
        var _ = _interopRequireWildcard(_fp);
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function toObject(err) {
            (0, _assert2.default)(err instanceof Error, 'Argument for `toJSON` should be Error instance');
            const obj = {
                name: err.name
            };
            for (const key of Object.getOwnPropertyNames(err)) obj[key] = err[key];
            return obj;
        }
        const getErrorProps = _.omit(['name', 'message']);

        function fromObject(obj) {
            const CError = global[obj.name];
            (0, _assert2.default)(CError === Error || CError.prototype instanceof Error, `Unknow error type: ${obj.name}`);
            const err = new CError(obj.message);
            Object.assign(err, getErrorProps(obj));
            return err;
        }

    }, {
        "undefined": undefined
    }],
    221: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.estimateGas = exports.sendRawTransaction = exports.getCode = exports.getTransactionCount = exports.gasPrice = exports.getTransactionReceipt = exports.fetchTxlist = exports.fetchBalance = undefined;
        let request = (() => {
            var _ref = _asyncToGenerator(function*(url) {
                let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                let responseAs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text';
                const query = Object.keys(params).map(function(key) {
                    return `${key}=${params[key]}`;
                }).join('&');
                const response = yield(0, _nodeFetch2.default)(url + '?' + query, {
                    timeout: (0, _ms2.default)('15s')
                });
                if (response.status >= 200 && response.status < 300) {
                    if (response.status === 204) return null;
                    return response[responseAs]();
                }
                throw new Error(response.statusText);
            });
            return function request(_x3) {
                return _ref.apply(this, arguments);
            };
        })();
        let requestProxy = (() => {
            var _ref2 = _asyncToGenerator(function*(method, data) {
                return request(`https://etcchain.com/gethProxy/` + method, data, 'json');
            });
            return function requestProxy(_x4, _x5) {
                return _ref2.apply(this, arguments);
            };
        })();
        let fetchBalance = exports.fetchBalance = (() => {
            var _ref3 = _asyncToGenerator(function*(address) {
                const data = yield request('https://etcchain.com/api/v1/getAddressBalance', {
                    address
                });
                _assert2.default.equal(JSON.parse(data).address, address, 'Address should be same');
                const match = /balance":(\d+)\.(\d+)/.exec(data);
                if (match === null) throw new Error('Balance not found');
                while (match[2].length < 18) match[2] = match[2] + '0';
                let balance = match[1] + match[2];
                while (balance[0] === '0') balance = balance.slice(1);
                return balance;
            });
            return function fetchBalance(_x6) {
                return _ref3.apply(this, arguments);
            };
        })();
        let fetchTxlist = exports.fetchTxlist = (() => {
            var _ref4 = _asyncToGenerator(function*(address, page) {
                const params = {
                    address,
                    sort: 'asc',
                    page: '0x' + page.toString(16),
                    offset: '0x64'
                };
                return request('https://etcchain.com/api/v1/getTransactionsByAddress', params, 'json');
            });
            return function fetchTxlist(_x7, _x8) {
                return _ref4.apply(this, arguments);
            };
        })();
        let gasPrice = exports.gasPrice = (() => {
            var _ref6 = _asyncToGenerator(function*() {
                return requestProxy('eth_gasPrice', {});
            });
            return function gasPrice() {
                return _ref6.apply(this, arguments);
            };
        })();
        let getTransactionCount = exports.getTransactionCount = (() => {
            var _ref7 = _asyncToGenerator(function*(address) {
                return requestProxy('eth_getTransactionCount', {
                    address,
                    tag: 'latest'
                });
            });
            return function getTransactionCount(_x10) {
                return _ref7.apply(this, arguments);
            };
        })();
        let getCode = exports.getCode = (() => {
            var _ref8 = _asyncToGenerator(function*(address) {
                return requestProxy('eth_getCode', {
                    address,
                    tag: 'latest'
                });
            });
            return function getCode(_x11) {
                return _ref8.apply(this, arguments);
            };
        })();
        let sendRawTransaction = exports.sendRawTransaction = (() => {
            var _ref9 = _asyncToGenerator(function*(data) {
                return requestProxy('eth_sendRawTransaction', {
                    hex: '0x' + data
                });
            });
            return function sendRawTransaction(_x12) {
                return _ref9.apply(this, arguments);
            };
        })();
        let estimateGas = exports.estimateGas = (() => {
            var _ref10 = _asyncToGenerator(function*(data) {
                throw new Error('Not supported right now!');
            });
            return function estimateGas(_x13) {
                return _ref10.apply(this, arguments);
            };
        })();
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _memoizeLruCache = require(273);
        var _memoizeLruCache2 = _interopRequireDefault(_memoizeLruCache);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const getTransactionReceipt = exports.getTransactionReceipt = (0, _memoizeLruCache2.default)((() => {
            var _ref5 = _asyncToGenerator(function*(hash) {
                return request('https://etcchain.com/gethProxy/eth_getTransactionReceipt', {
                    hex: hash
                }, 'json');
            });
            return function(_x9) {
                return _ref5.apply(this, arguments);
            };
        })(), key => key, {
            max: 1000
        });

    }, {
        "273": 273,
        "undefined": undefined
    }],
    222: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.tokenBalance = exports.fetchTxlistinternal = exports.fetchTxlist = exports.fetchBalance = undefined;
        let fetchBalance = exports.fetchBalance = (() => {
            var _ref2 = _asyncToGenerator(function*(address) {
                const balance = yield _request('balance', {
                    address
                });
                const isValid = /^[0-9]+$/.test(balance);
                if (!isValid) throw new RangeError(`Invalid balance: ${balance}`);
                return balance;
            });
            return function fetchBalance(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        let fetchTxlist = exports.fetchTxlist = (() => {
            var _ref3 = _asyncToGenerator(function*(address, options) {
                const params = Object.assign({
                    startblock: 0,
                    endblock: 'latest'
                }, options, {
                    address
                });
                const txlist = yield _request('txlist', params);
                (0, _assert2.default)(Array.isArray(txlist), `Invalid transactions: ${txlist}`);
                return txlist;
            });
            return function fetchTxlist(_x2, _x3) {
                return _ref3.apply(this, arguments);
            };
        })();
        let fetchTxlistinternal = exports.fetchTxlistinternal = (() => {
            var _ref4 = _asyncToGenerator(function*(address, options) {
                const params = Object.assign({
                    startblock: 0,
                    endblock: 'latest'
                }, options, {
                    address
                });
                const txlist = yield _request('txlistinternal', params);
                (0, _assert2.default)(Array.isArray(txlist), `Invalid transactions: ${txlist}`);
                return txlist;
            });
            return function fetchTxlistinternal(_x4, _x5) {
                return _ref4.apply(this, arguments);
            };
        })();
        let tokenBalance = exports.tokenBalance = (() => {
            var _ref5 = _asyncToGenerator(function*(token, address) {
                const params = {
                    [token.length === 42 ? 'contractaddress' : 'tokenname']: token,
                    address,
                    tag: 'latest'
                };
                const balance = yield _request('tokenbalance', params);
                const isValid = /^[0-9]+$/.test(balance);
                if (!isValid) throw new RangeError(`Invalid balance: ${balance}`);
                return balance;
            });
            return function tokenBalance(_x6, _x7) {
                return _ref5.apply(this, arguments);
            };
        })();
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _request2 = require(226);
        var _request3 = _interopRequireDefault(_request2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const isValidResponseCheck = x => x.status === '1' && x.message === 'OK' || x.message === 'No transactions found';
        const _request = (() => {
            var _ref = _asyncToGenerator(function*() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return (0, _request3.default)(isValidResponseCheck, 'account', ...args);
            });
            return function _request() {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "226": 226,
        "undefined": undefined
    }],
    223: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ws = exports.getLogs = exports.gasPrice = exports.getCode = exports.estimateGas = exports.getTransactionCount = exports.sendRawTransaction = exports.tokenBalance = exports.fetchTxlistinternal = exports.fetchTxlist = exports.fetchBalance = undefined;
        exports.filterTxsSent = filterTxsSent;
        exports.filterTxsReceived = filterTxsReceived;
        var _account = require(222);
        var _proxy = require(225);
        var _logs = require(224);
        var _ws2 = require(227);
        var _ws3 = _interopRequireDefault(_ws2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const fetchBalance = exports.fetchBalance = _account.fetchBalance;
        const fetchTxlist = exports.fetchTxlist = _account.fetchTxlist;
        const fetchTxlistinternal = exports.fetchTxlistinternal = _account.fetchTxlistinternal;
        const tokenBalance = exports.tokenBalance = _account.tokenBalance;
        const sendRawTransaction = exports.sendRawTransaction = _proxy.sendRawTransaction;
        const getTransactionCount = exports.getTransactionCount = _proxy.getTransactionCount;
        const estimateGas = exports.estimateGas = _proxy.estimateGas;
        const getCode = exports.getCode = _proxy.getCode;
        const gasPrice = exports.gasPrice = _proxy.gasPrice;
        const getLogs = exports.getLogs = _logs.getLogs;
        const ws = exports.ws = _ws3.default;

        function filterTxsSent(addr, etherscanTxs) {
            return etherscanTxs.filter(tx => tx.from.toLowerCase() === addr.toLowerCase());
        }

        function filterTxsReceived(addr, etherscanTxs) {
            return etherscanTxs.filter(tx => tx.to.toLowerCase() === addr.toLowerCase());
        }

    }, {
        "222": 222,
        "224": 224,
        "225": 225,
        "227": 227
    }],
    224: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getLogs = undefined;
        let getLogs = exports.getLogs = (() => {
            var _ref2 = _asyncToGenerator(function*(address, fromBlock, toBlock, options) {
                const params = Object.assign({}, options, {
                    address,
                    fromBlock,
                    toBlock
                });
                const events = yield _request('getLogs', params);
                (0, _assert2.default)(Array.isArray(events), `Invalid transactions: ${events}`);
                return events;
            });
            return function getLogs(_x, _x2, _x3, _x4) {
                return _ref2.apply(this, arguments);
            };
        })();
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _request2 = require(226);
        var _request3 = _interopRequireDefault(_request2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const isValidResponseCheck = x => x.status === '1' && x.message === 'OK' || x.message === 'No records found';
        const _request = (() => {
            var _ref = _asyncToGenerator(function*() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return (0, _request3.default)(isValidResponseCheck, 'logs', ...args);
            });
            return function _request() {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "226": 226,
        "undefined": undefined
    }],
    225: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.gasPrice = exports.getCode = exports.estimateGas = exports.getTransactionCount = exports.sendRawTransaction = undefined;
        let sendRawTransaction = exports.sendRawTransaction = (() => {
            var _ref2 = _asyncToGenerator(function*(data) {
                const txhash = yield _request('eth_sendRawTransaction', {
                    hex: '0x' + data
                });
                const isValidTxHash = /^0x[0-9a-fA-F]{64}$/.test(txhash);
                if (!isValidTxHash) throw new Error(`Invalid tx hash: ${txhash}`);
                return txhash.slice(2);
            });
            return function sendRawTransaction(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        let getTransactionCount = exports.getTransactionCount = (() => {
            var _ref3 = _asyncToGenerator(function*(address) {
                return _request('eth_getTransactionCount', {
                    address
                });
            });
            return function getTransactionCount(_x2) {
                return _ref3.apply(this, arguments);
            };
        })();
        let estimateGas = exports.estimateGas = (() => {
            var _ref4 = _asyncToGenerator(function*(data) {
                return _request('eth_estimateGas', data);
            });
            return function estimateGas(_x3) {
                return _ref4.apply(this, arguments);
            };
        })();
        let getCode = exports.getCode = (() => {
            var _ref5 = _asyncToGenerator(function*(address) {
                const code = yield _request('eth_getCode', {
                    address
                });
                const isValidCode = /^0x[0-9a-fA-F]*$/.test(code) && code.length % 2 === 0;
                if (!isValidCode) throw new Error(`Invalid address code: ${code}`);
                return code;
            });
            return function getCode(_x4) {
                return _ref5.apply(this, arguments);
            };
        })();
        let gasPrice = exports.gasPrice = (() => {
            var _ref6 = _asyncToGenerator(function*() {
                const price = yield _request('eth_gasPrice');
                const isValidPrice = /^0x[0-9a-fA-F]+$/.test(price);
                if (!isValidPrice) throw new Error(`Invalid price: ${price}`);
                return price;
            });
            return function gasPrice() {
                return _ref6.apply(this, arguments);
            };
        })();
        var _request2 = require(226);
        var _request3 = _interopRequireDefault(_request2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const isValidResponseCheck = x => x.result !== undefined;
        const _request = (() => {
            var _ref = _asyncToGenerator(function*() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return (0, _request3.default)(isValidResponseCheck, 'proxy', ...args);
            });
            return function _request() {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "226": 226
    }],
    226: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _appConfig = require(80);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        _fetchival2.default.fetch = _nodeFetch2.default;
        const ETHERSCAN_API_URL = 'https://api.etherscan.io/api';
        const ETHERSCAN_API_KEY = (() => {
            if (_appConfig.ENV_BUILD_EXODUS) return 'XM3VGRSNW1TMSIR14I9MVFP15X74GNHTRI';
            if (_appConfig.ENV_BUILD_EDEN) return 'ZZXQ5MQF9H1Q6NMBPKICFUHEIJI3V9ZBIF';
            return '';
        })();
        exports.default = (0, _makeConcurrent2.default)((() => {
            var _ref = _asyncToGenerator(function*(isValidResponseCheck, module, action) {
                let params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                const queryParams = Object.assign({}, params, {
                    module,
                    action,
                    apiKey: ETHERSCAN_API_KEY
                });
                const data = yield(0, _fetchival2.default)(ETHERSCAN_API_URL, {
                    timeout: (0, _ms2.default)('15s')
                }).get(queryParams);
                if (!isValidResponseCheck(data)) throw new Error(`Invalid response: ${JSON.stringify(data)}`);
                return data.result;
            });
            return function(_x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            };
        })(), {
            concurrency: 3
        });

    }, {
        "80": 80,
        "undefined": undefined
    }],
    227: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require('events');
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _ws = require('ws');
        var _ws2 = _interopRequireDefault(_ws);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const RECONNECT_INTERVAL = (0, _ms2.default)('10s');

        function createWebSocket(url) {
            const addresses = new Set();
            const events = new _events.EventEmitter().setMaxListeners(20);
            const pingMessage = JSON.stringify({
                event: 'ping'
            });
            let ws;
            let wsOpened = false;
            let opened = false;
            let openTimeoutId;
            let pingIntervalId;

            function subscribeAddress(address) {
                const data = JSON.stringify({
                    event: 'txlist',
                    address
                });
                ws.send(data);
            }

            function onMessage(data) {
                data = JSON.parse(data);
                switch (data.event) {
                    case 'txlist':
                        for (const tx of data.result) events.emit(`address-${data.address}`, tx);
                        break;
                    case 'subscribe-txlist':
                        const match = data.message.toLowerCase().match(/0x[0-9a-f]{40}/);
                        if (match && data.status === '1') events.emit(`address-${match[0]}-subscribed`);
                        else ws.close();
                        break;
                }
            }

            function isOpened() {
                return wsOpened;
            }

            function open() {
                opened = true;
                clearTimeout(openTimeoutId);
                if (ws) return;
                ws = new _ws2.default(url);
                ws.on('message', data => {
                    try {
                        onMessage(data);
                    } catch (err) {}
                });
                ws.once('open', () => {
                    for (const address of addresses.values()) subscribeAddress(address);
                    pingIntervalId = setInterval(() => ws.send(pingMessage), (0, _ms2.default)('20s'));
                    wsOpened = true;
                    events.emit('open');
                });
                ws.once('close', () => {
                    ws = null;
                    clearInterval(pingIntervalId);
                    if (opened) openTimeoutId = setTimeout(open, RECONNECT_INTERVAL);
                    wsOpened = false;
                    events.emit('close');
                });
            }

            function close() {
                opened = false;
                clearTimeout(openTimeoutId);
                if (!ws) return;
                ws.close();
                ws = null;
            }

            function watch(address) {
                address = address.toLowerCase();
                if (addresses.has(address)) return;
                addresses.add(address);
                if (wsOpened) subscribeAddress(address);
            }
            return {
                events,
                isOpened,
                open,
                close,
                watch
            };
        }
        exports.default = createWebSocket('wss://socket.etherscan.io/wshandler');

    }, {
        "undefined": undefined
    }],
    228: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.marketInfo = undefined;
        let marketInfo = exports.marketInfo = (() => {
            var _ref = _asyncToGenerator(function*(pairs) {
                console.log('Calling MI...');
                const url = (0, _urlJoin2.default)(_appConfig.EXODUS_SERVER, 'v1/market');
                const resp = yield(0, _fetchival2.default)(url).get(pairs ? {
                    pairs
                } : undefined);
                if (resp && resp.status !== 'success') throw new Error(resp.message ? resp.message : `Error on ${url}.`);
                return resp.data;
            });
            return function marketInfo(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.logRescan = logRescan;
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _appConfig = require(80);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const RESCAN_URL = (0, _urlJoin2.default)(_appConfig.EXODUS_SERVER, 'v1/rescan');

        function logRescan(asset) {
            (0, _fetchival2.default)(RESCAN_URL).put({
                symbol: asset.displayUnit
            });
        }

    }, {
        "80": 80,
        "undefined": undefined
    }],
    229: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.etc = exports.eth = undefined;
        exports.withFallback = withFallback;
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _url = require('url');
        var _url2 = _interopRequireDefault(_url);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _ws = require(230);
        var _ws2 = _interopRequireDefault(_ws);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        _fetchival2.default.fetch = _nodeFetch2.default;

        function create(API_URL) {
            let request = (() => {
                var _ref = _asyncToGenerator(function*(module) {
                    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    const url = (0, _urlJoin2.default)(API_URL, module);
                    try {
                        return yield(0, _fetchival2.default)(url, {
                            timeout: (0, _ms2.default)('15s')
                        }).get(params);
                    } catch (err) {
                        let nerr = err;
                        if (err.response && err.response.status === 500) {
                            try {
                                const data = yield err.response.json();
                                const msg = data.error.replace(/^RPC error \(code: -\d+\): /, '');
                                nerr = new Error(msg);
                            } catch (err) {}
                        }
                        throw nerr;
                    }
                });
                return function request(_x2) {
                    return _ref.apply(this, arguments);
                };
            })();
            return {
                ws: (0, _ws2.default)(() => {
                    const obj = _url2.default.parse(API_URL);
                    obj.protocol = 'wss:';
                    return _url2.default.format(obj);
                }),
                getBalance(address, opts) {
                    return _asyncToGenerator(function*() {
                        opts = Object.assign({
                            startblock: 'earliest',
                            endblock: 'pending'
                        }, opts);
                        return request('balance', {
                            address,
                            from: opts.startblock,
                            to: opts.endblock
                        });
                    })();
                },
                getHistory(address, opts) {
                    return _asyncToGenerator(function*() {
                        opts = Object.assign({
                            startblock: 'earliest',
                            endblock: 'pending',
                            limit: 1000
                        }, opts);
                        return request('history', {
                            address,
                            from: opts.startblock,
                            to: opts.endblock,
                            limit: opts.limit
                        });
                    })();
                },
                gasPrice() {
                    return _asyncToGenerator(function*() {
                        return request('proxy', {
                            method: 'eth_gasPrice'
                        });
                    })();
                },
                getTransactionCount(address) {
                    var _arguments = arguments;
                    return _asyncToGenerator(function*() {
                        let tag = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : 'latest';
                        return request('proxy', {
                            method: 'eth_getTransactionCount',
                            address,
                            tag
                        });
                    })();
                },
                getCode(address) {
                    var _arguments2 = arguments;
                    return _asyncToGenerator(function*() {
                        let tag = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : 'latest';
                        return request('proxy', {
                            method: 'eth_getCode',
                            address,
                            tag
                        });
                    })();
                },
                sendRawTransaction(data) {
                    return _asyncToGenerator(function*() {
                        return request('proxy', {
                            method: 'eth_sendRawTransaction',
                            hex: '0x' + data
                        });
                    })();
                },
                estimateGas(data) {
                    var _arguments3 = arguments;
                    return _asyncToGenerator(function*() {
                        let tag = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : 'latest';
                        return request('proxy', Object.assign({
                            method: 'eth_estimateGas'
                        }, data, {
                            tag
                        }));
                    })();
                }
            };
        }
        const eth = exports.eth = create('https://ethereum.exodus.io/v1/');
        const etc = exports.etc = create('https://ethereumclassic.exodus.io/v1/');

        function withFallback(fn, fn2) {
            return _asyncToGenerator(function*() {
                try {
                    return yield fn(...arguments);
                } catch (err1) {
                    try {
                        return yield fn2(...arguments);
                    } catch (err2) {
                        const err = new Error(`${err1.message} | ${err2.message}`);
                        throw Object.assign(err, {
                            err1,
                            err2
                        });
                    }
                }
            });
        }

    }, {
        "230": 230,
        "undefined": undefined
    }],
    230: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createWebSocket;
        var _events = require('events');
        var _ws = require('ws');
        var _ws2 = _interopRequireDefault(_ws);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const RECONNECT_INTERVAL = (0, _ms2.default)('10s');

        function createWebSocket(getURL) {
            const addresses = new Set();
            const events = new _events.EventEmitter();
            let ws;
            let pingIntervalId = null;
            let opened = false;
            let openTimeoutId;

            function subscribeAddress(address) {
                const data = JSON.stringify({
                    type: 'subscribe-address',
                    address
                });
                ws.send(data);
            }

            function subscribeGasPrice() {
                const data = JSON.stringify({
                    type: 'subscribe-gasprice'
                });
                ws.send(data);
            }

            function onMessage(data) {
                data = JSON.parse(data);
                switch (data.type) {
                    case 'address':
                        events.emit(`address-${data.address}`);
                        break;
                    case 'gasprice':
                        events.emit('gasprice', data.gasprice);
                        break;
                }
            }

            function open() {
                opened = true;
                clearTimeout(openTimeoutId);
                if (ws) return;
                ws = new _ws2.default(getURL());
                ws.on('error', () => {});
                ws.on('message', data => {
                    try {
                        onMessage(data);
                    } catch (err) {}
                });
                ws.once('open', () => {
                    for (const address of addresses.values()) subscribeAddress(address);
                    subscribeGasPrice();
                    pingIntervalId = setInterval(() => ws.ping(), (0, _ms2.default)('10s'));
                    events.emit('open');
                });
                ws.once('close', () => {
                    ws = null;
                    clearInterval(pingIntervalId);
                    pingIntervalId = null;
                    if (opened) openTimeoutId = setTimeout(open, RECONNECT_INTERVAL);
                    events.emit('close');
                });
            }

            function close() {
                opened = false;
                clearTimeout(openTimeoutId);
                if (!ws) return;
                ws.removeAllListeners();
                ws.close();
                ws = null;
                clearInterval(pingIntervalId);
                pingIntervalId = null;
                events.emit('close');
            }

            function watch(address) {
                if (addresses.has(address)) return;
                addresses.add(address);
                if (ws) subscribeAddress(address);
            }
            return {
                events,
                open,
                close,
                watch,
                isOpened: () => !!pingIntervalId
            };
        }

    }, {
        "undefined": undefined
    }],
    231: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _url = require('url');
        var _url2 = _interopRequireDefault(_url);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _ws = require(232);
        var _ws2 = _interopRequireDefault(_ws);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        _fetchival2.default.fetch = _nodeFetch2.default;

        function create(API_URL) {
            let request = (() => {
                var _ref = _asyncToGenerator(function*(module) {
                    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    const url = (0, _urlJoin2.default)(API_URL, module);
                    return (0, _fetchival2.default)(url).get(params);
                });
                return function request(_x2) {
                    return _ref.apply(this, arguments);
                };
            })();
            return {
                ws: (0, _ws2.default)(() => {
                    const obj = _url2.default.parse(API_URL);
                    obj.protocol = 'wss:';
                    return _url2.default.format(obj);
                }),
                getBalance(address, opts) {
                    return _asyncToGenerator(function*() {
                        opts = Object.assign({
                            startblock: 'earliest',
                            endblock: 'pending'
                        }, opts);
                        return request('balance', {
                            address,
                            from: opts.startblock,
                            to: opts.endblock
                        });
                    })();
                },
                getHistory(address, opts) {
                    return _asyncToGenerator(function*() {
                        opts = Object.assign({
                            startblock: 'earliest',
                            endblock: 'pending'
                        }, opts);
                        return request('history', {
                            address,
                            from: opts.startblock,
                            to: opts.endblock
                        });
                    })();
                },
                sendRawTransaction(data) {
                    return _asyncToGenerator(function*() {
                        return request('proxy', {
                            method: 'factoidsubmit',
                            hex: data
                        });
                    })();
                },
                getEntryCreditRate() {
                    return _asyncToGenerator(function*() {
                        return request('proxy', {
                            method: 'entrycreditrate'
                        });
                    })();
                }
            };
        }
        exports.default = create('https://factom.exodus.io/v3/');

    }, {
        "232": 232,
        "undefined": undefined
    }],
    232: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createWebSocket;
        var _events = require('events');
        var _ws = require('ws');
        var _ws2 = _interopRequireDefault(_ws);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const RECONNECT_INTERVAL = (0, _ms2.default)('10s');

        function createWebSocket(getURL) {
            const addresses = new Set();
            const events = new _events.EventEmitter();
            let ws;
            let pingIntervalId = null;
            let opened = false;
            let openTimeoutId;

            function subscribeAddress(address) {
                const data = JSON.stringify({
                    type: 'subscribe-address',
                    address
                });
                ws.send(data);
            }

            function onMessage(data) {
                data = JSON.parse(data);
                switch (data.type) {
                    case 'address':
                        events.emit(`address-${data.address}`);
                        break;
                }
            }

            function open() {
                opened = true;
                clearTimeout(openTimeoutId);
                if (ws) return;
                ws = new _ws2.default(getURL());
                ws.on('error', () => {});
                ws.on('message', data => {
                    try {
                        onMessage(data);
                    } catch (err) {}
                });
                ws.once('open', () => {
                    for (const address of addresses.values()) subscribeAddress(address);
                    pingIntervalId = setInterval(() => ws.ping(), (0, _ms2.default)('10s'));
                    events.emit('open');
                });
                ws.once('close', () => {
                    ws = null;
                    clearInterval(pingIntervalId);
                    pingIntervalId = null;
                    if (opened) openTimeoutId = setTimeout(open, RECONNECT_INTERVAL);
                    events.emit('close');
                });
            }

            function close() {
                opened = false;
                clearTimeout(openTimeoutId);
                if (!ws) return;
                ws.removeAllListeners();
                ws.close();
                ws = null;
                clearInterval(pingIntervalId);
                pingIntervalId = null;
                events.emit('close');
            }

            function watch(address) {
                if (addresses.has(address)) return;
                addresses.add(address);
                if (ws) subscribeAddress(address);
            }
            return {
                events,
                open,
                close,
                watch,
                isOpened: () => !!pingIntervalId
            };
        }

    }, {
        "undefined": undefined
    }],
    233: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports._sendBcash = undefined;
        let _sendBcash = exports._sendBcash = (() => {
            var _ref2 = _asyncToGenerator(function*(address, utxos) {
                return new Promise(function(resolve) {
                    utxos = utxos || _utxoCollection2.default.createEmpty({
                        currency: _assets2.default.bcashclaim.currency
                    });
                    const fee = (0, _feeEstimator2.default)(_assets2.default.bcashclaim)({
                        inputs: utxos,
                        outputs: [address]
                    }).toDefault();
                    const amount = utxos.value.subtract(fee).clampLowerZero().toDefault();
                    _swal3.default.warn({
                        title: 'Send Bitcoin Cash?',
                        text: `You are about to send ${amount.toString()} with a fee of ${fee.toString()}. Are you sure you want to send this to address ${address}?\n\nThis process is not reversible and may take 1-2 hours to confirm.`,
                        showCancelButton: true,
                        cancelButtonText: 'Cancel',
                        closeOnConfirm: false,
                        closeOnCancel: false,
                        confirmButtonColor: '#FF0000',
                        confirmButtonText: 'Send',
                        showLoaderOnConfirm: true
                    }, function(shouldContinue) {
                        if (!shouldContinue) {
                            _sweetalert2.default.close();
                            return resolve(null);
                        }
                        const w = (0, _reduxWatch2.default)(flux.store.getState, 'txSend');
                        const stopWatching = flux.store.subscribe(w((() => {
                            var _ref4 = _asyncToGenerator(function*(_ref3) {
                                let {
                                    isSending,
                                    error,
                                    txId
                                } = _ref3;
                                if (error) {
                                    stopWatching();
                                    _sweetalert2.default.close();
                                    yield(0, _delay2.default)((0, _ms2.default)('1s'));
                                    _swal3.default.error({
                                        text: error.message
                                    });
                                    resolve(null);
                                    return;
                                }
                                if (isSending === true) return;
                                stopWatching();
                                _sweetalert2.default.close();
                                resolve(txId);
                            });
                            return function(_x3) {
                                return _ref4.apply(this, arguments);
                            };
                        })()));
                        const sendOpts = {
                            coin: _assets2.default.bcashclaim,
                            receiver: {
                                address,
                                amount,
                                fee
                            },
                            shouldLog: false
                        };
                        flux.actions.txSend.send(sendOpts);
                    });
                });
            });
            return function _sendBcash(_x, _x2) {
                return _ref2.apply(this, arguments);
            };
        })();
        let getAddress = (() => {
            var _ref5 = _asyncToGenerator(function*() {
                const address = (0, _getReceiveAddress2.default)(flux.store.getState())('bcash').toString();
                return new Promise(function(resolve, reject) {
                    _swal3.default.prompt({
                        title: 'Bitcoin Cash Address?',
                        text: `Paste the address where Exodus will send your Bitcoin Cash (BCH) below. Your Exodus BCH address is pre-filled for you. After you click "Continue", you'll be given a chance to cancel.`,
                        animation: false,
                        inputType: 'text',
                        inputValue: address,
                        closeOnCancel: true,
                        closeOnConfirm: true,
                        confirmButtonText: 'Continue'
                    }, function(address) {
                        resolve(String(address).trim());
                    });
                });
            });
            return function getAddress() {
                return _ref5.apply(this, arguments);
            };
        })();
        let showInfo = (() => {
            var _ref6 = _asyncToGenerator(function*() {
                const text = ['You are about to claim your Bitcoin Cash (BCH). This process will keep your private keys safe ', "and will not send your regular Bitcoin. Please ensure that you're sending your ", 'Bitcoin Cash (BCH) to a reputable source.\n\n', 'Click "Learn More" to cancel and read more details about this process.'].join('');
                return new Promise(function(resolve, reject) {
                    _swal3.default.success({
                        title: 'Claim Bitcoin Cash',
                        text,
                        type: 'info',
                        cancelButtonText: 'Learn More',
                        showCancelButton: true,
                        confirmButtonText: 'Continue'
                    }, function(shouldContinue) {
                        if (shouldContinue) return window.requestIdleCallback(function() {
                            return resolve(true);
                        });
                        _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/how-do-i-claim-bitcoin-cash');
                        resolve(false);
                    });
                });
            });
            return function showInfo() {
                return _ref6.apply(this, arguments);
            };
        })();
        let fetchUTXOs = (() => {
            var _ref7 = _asyncToGenerator(function*() {
                return new Promise(function(resolve) {
                    _swal3.default.warn({
                        title: 'Look For Bitcoin Cash',
                        text: 'Exodus will now check your wallet to find how much Bitcoin Cash you have. This process takes about 10 minutes - please do not quit while this is in progress.',
                        showCancelButton: true,
                        cancelButtonText: 'Cancel',
                        closeOnConfirm: false,
                        closeOnCancel: false,
                        confirmButtonText: 'Check My Wallet Now',
                        showLoaderOnConfirm: true
                    }, function(shouldContinue) {
                        if (!shouldContinue) {
                            _sweetalert2.default.close();
                            return resolve(null);
                        }
                        const w = (0, _reduxWatch2.default)(flux.store.getState, 'assetsRefresh');
                        const stopWatching = flux.store.subscribe(w((() => {
                            var _ref9 = _asyncToGenerator(function*(_ref8) {
                                let {
                                    bcashclaim,
                                    error
                                } = _ref8;
                                if (error) {
                                    stopWatching();
                                    _sweetalert2.default.close();
                                    yield(0, _delay2.default)((0, _ms2.default)('1s'));
                                    _swal3.default.error({
                                        text: error.message
                                    });
                                    resolve(null);
                                    return;
                                }
                                if (bcashclaim === true) return;
                                stopWatching();
                                _sweetalert2.default.close();
                                resolve(flux.store.getState().utxos.bcashclaim);
                            });
                            return function(_x4) {
                                return _ref9.apply(this, arguments);
                            };
                        })()));
                        flux.actions.assetsRefresh.refresh('bcashclaim');
                    });
                });
            });
            return function fetchUTXOs() {
                return _ref7.apply(this, arguments);
            };
        })();
        var _swal2 = require(306);
        var _swal3 = _interopRequireDefault(_swal2);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _electron = require('electron');
        var _sweetalert = require('sweetalert');
        var _sweetalert2 = _interopRequireDefault(_sweetalert);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*() {
                console.warn('STARTING BCASH CLAIM');
                const shouldContinue = yield showInfo();
                if (!shouldContinue) return;
                yield(0, _delay2.default)(250);
                const address = yield getAddress();
                if (!_assets2.default.bcashclaim.address.validate(address)) return flux.actions.dialog.error(`${address} is an invalid Bitcoin Cash address.`);
                const myAddrs = (0, _getRecvExchAddresses2.default)(flux.store.getState())('bitcoin');
                if (myAddrs.has(address)) return flux.actions.dialog.error(`Can't send to yourself.`);
                console.log('GOT BCASH ADDRESS:');
                console.log(address);
                yield(0, _delay2.default)(150);
                const utxos = yield fetchUTXOs();
                if (!utxos) return;
                console.log('GOT BCASH UTXOS:');
                console.dir(utxos);
                yield(0, _delay2.default)(250);
                if (utxos.value.isZero()) {
                    _swal3.default.success({
                        html: true,
                        text: `<p style="font-size: 11px;">Unfortunately you do not have any Bitcoin Cash.</p>`,
                        confirmButtonText: 'OK'
                    }, function() {});
                } else {
                    const txId = yield _sendBcash(address, utxos);
                    if (!txId) return;
                    yield(0, _delay2.default)(200);
                    _swal3.default.success({
                        html: true,
                        text: `<p style="font-size: 11px;">Successfully sent your Bitcoin Cash! TX ID: ${txId}</p>`,
                        confirmButtonText: 'View TX'
                    }, function() {
                        _electron.shell.openExternal(_assets2.default.bcashclaim.blockExplorer.txUrl(txId));
                    });
                }
                flux.actions.localStorage.setItem('bcashclaimed', 'true');
                flux.actions.txSend.ackSend();
                console.warn('BCASH CLAIM COMPLETE');
            });

            function bcashClaim() {
                return _ref.apply(this, arguments);
            }
            return bcashClaim;
        })();

    }, {
        "184": 184,
        "255": 255,
        "257": 257,
        "306": 306,
        "89": 89,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    234: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.transactions = undefined;
        let transactions = exports.transactions = (() => {
            var _ref = _asyncToGenerator(function*(coinName) {
                let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const txs = yield get.transactions(coinName, opts);
                const txFields = opts.fiat ? ['txId', 'txUrl', 'date', 'coinAmount', 'fee', 'balance', 'balanceFiat', 'pricePer1Btc', 'exchange', 'memo'] : ['txId', 'txUrl', 'date', 'coinAmount', 'fee', 'balance', 'exchange', 'memo'];
                console.table(txs, txFields);
            });
            return function transactions(_x2) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.xpub = xpub;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _get = require(242);
        var get = _interopRequireWildcard(_get);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function xpub(assetName) {
            console.log(`${_assets2.default[assetName].properName} xpub: ${get.xpub(assetName)}`);
        }

    }, {
        "184": 184,
        "242": 242
    }],
    235: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.eraseUtxos = eraseUtxos;
        exports.eraseTransactions = eraseTransactions;
        exports.setEthAddress = setEthAddress;
        exports.setRippleAddress = setRippleAddress;
        exports.setHDKeyFromXPub = setHDKeyFromXPub;
        exports.eraseState = eraseState;
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _util = require(264);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _utxos = require(79);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function eraseUtxos(asset) {
            let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            flux.store.dispatch((0, _util.FSA)('UTXOS_UPDATE', {
                [asset]: value
            }));
        }

        function eraseTransactions(asset) {
            flux.store.dispatch((0, _util.FSA)('RESCAN_BLOCKCHAIN_SUCCESS', {
                asset,
                txs: []
            }));
        }

        function setEthAddress(address) {
            global.DEBUG_ETH_ADDRESS = _address2.default.create(address, {
                path: 'm/0/0'
            });
        }

        function setRippleAddress(address) {
            global.DEBUG_RIPPLE_ADDRESS = _address2.default.create(address, {
                path: 'm/0/0'
            });
        }

        function setHDKeyFromXPub(asset, xpub) {
            flux.actions.accounts.setHDKeyFromXPub(asset, xpub);
        }

        function eraseState(assetName) {
            if (assetName !== 'bitcoin') return console.error('eraseState() only supports bitcoin for now.');
            const asset = _assets2.default[assetName];
            if (asset.hasUTXO) {
                const emptyUtxos = _utxoCollection2.default.createEmpty({
                    currency: asset.currency
                });
                eraseUtxos(assetName, emptyUtxos);
                (0, _utxos.writeUtxos)(assetName, emptyUtxos);
            }
            eraseTransactions(assetName);
        }

    }, {
        "184": 184,
        "257": 257,
        "264": 264,
        "79": 79,
        "82": 82,
        "89": 89
    }],
    236: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.exportAddresses = undefined;
        let exportAddresses = exports.exportAddresses = (() => {
            var _ref = _asyncToGenerator(function*(asset) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const addresses = yield get.addresses(asset, options);
                const filePrefix = `${asset}-addresses-${options.includePrivKeys?'WARNING-HAS-PRIVATE-KEYS-':''}`;
                const exportFile = _path2.default.join((0, _env.exportsDir)(), filePrefix + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm-ss') + '.csv');
                let addrCSV = 'ADDRESS,PATH,BALANCE' + (options.includePrivKeys ? ',PRIVKEY' : '') + '\n';
                addrCSV += addresses.map(function(addrObj) {
                    return `${addrObj.address},${addrObj.path},${addrObj.balance}` + (options.includePrivKeys ? `,${addrObj.privKey}` : '');
                }).join('\n');
                yield _fsExtra2.default.outputFile(exportFile, addrCSV);
                _swal2.default.success({
                    text: `Successfully exported ${asset} to ${exportFile}.`
                });
                console.table(addresses);
                return addresses;
            });
            return function exportAddresses(_x2) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.exportPrivateKeysDialog = exportPrivateKeysDialog;
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _env = require(219);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _get = require(242);
        var get = _interopRequireWildcard(_get);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function exportPrivateKeysDialog(asset) {
            const properName = _assets2.default[asset].properName;
            _swal2.default.warn({
                title: 'Are you sure?',
                text: `Are you sure you want to export your private keys for ${properName}?
Remember to keep your private keys safe, anyone who has your private keys can get your funds.`,
                showCancelButton: true,
                confirmButtonText: "I'm sure"
            }, function(isConfirm) {
                if (isConfirm) {
                    setTimeout(() => exportAddresses(asset, {
                        includePrivKeys: true
                    }), 1000);
                }
            });
        }

    }, {
        "184": 184,
        "219": 219,
        "242": 242,
        "306": 306,
        "undefined": undefined
    }],
    237: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.dumpDiagnostics = exports.wallet = exports.data = undefined;
        let data = exports.data = (() => {
            var _ref = _asyncToGenerator(function*() {
                const src = (0, _env.dataDir)();
                const dest = _path2.default.join((0, _env.exportsDir)(), 'exodus-PRIVATE-data-' + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm-ss') + '.zip');
                yield(0, _aw2.default)(_fsExtra2.default.ensureDir)(_path2.default.dirname(dest));
                _crossZip2.default.zip(src, dest, function(err) {
                    if (err) {
                        if (process.platform === 'win32') {
                            _swal2.default.error({
                                text: `Failure zipping: ${src} to ${dest}. <br/><br/><a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595">Please install Powershell v3 and restart your computer.</a><br/><br/><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        } else {
                            _swal2.default.error({
                                text: `Failure zipping: ${src} to ${dest}. <br/></br><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        }
                    } else {
                        _swal2.default.success({
                            text: `Successfully zipped: ${src} to ${dest}.`
                        });
                    }
                });
            });
            return function data() {
                return _ref.apply(this, arguments);
            };
        })();
        let wallet = exports.wallet = (() => {
            var _ref2 = _asyncToGenerator(function*() {
                const src = _path2.default.join((0, _env.dataDir)(), 'exodus.wallet');
                const dest = _path2.default.join((0, _env.exportsDir)(), 'exodus.wallet-PRIVATE-data-' + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm-ss') + '.zip');
                yield(0, _aw2.default)(_fsExtra2.default.ensureDir)(_path2.default.dirname(dest));
                _crossZip2.default.zip(src, dest, function(err) {
                    if (err) {
                        if (process.platform === 'win32') {
                            _swal2.default.error({
                                text: `Failure zipping: ${src} to ${dest}. <br/><br/><a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595">Please install Powershell v3 and restart your computer.</a><br/><br/><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        } else {
                            _swal2.default.error({
                                text: `Failure zipping: ${src} to ${dest}. <br/></br><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        }
                    } else {
                        _swal2.default.success({
                            text: `Successfully zipped: ${src} to ${dest}.`
                        });
                    }
                });
            });
            return function wallet() {
                return _ref2.apply(this, arguments);
            };
        })();
        let dumpDiagnostics = exports.dumpDiagnostics = (() => {
            var _ref3 = _asyncToGenerator(function*() {
                const formatVersion = 'v1';
                const timePath = (0, _moment2.default)().format('YYYY-MM-DD_HH-mm-ss');
                const srcDir = _path2.default.join(_os2.default.tmpdir(), 'exodus', `exodus-report-${timePath}`);
                const srcOutDir = _path2.default.join(srcDir, formatVersion);
                const dest = _path2.default.join((0, _env.exportsDir)(), `exodus-report-SAFE-${timePath}.zip`);
                const state = _flux.store.getState();
                const assetPadding = createPadLookup(Object.keys(_assets2.default));
                const xpubs = [];
                Object.values(_assets2.default).forEach(function(asset) {
                    if (asset.isEthereumToken || asset.isOmniProperty || !asset.available) return;
                    xpubs.push(`${assetPadding[asset.name]}: ${get.xpub(asset.name)}`);
                });
                yield _fsExtra2.default.outputFile(_path2.default.join(srcOutDir, './xpubs.txt'), xpubs.join('\n\n'));
                yield Promise.all(Object.values(_assets2.default).map(function(asset) {
                    if (!asset.available) return;
                    const txs = state.txLog[asset.name];
                    if (txs.size === 0) return;
                    return _fsExtra2.default.outputJson(_path2.default.join(srcOutDir, 'txs', `${asset.name}.json`), txs, {
                        spaces: 2
                    });
                }));
                yield Promise.all(Object.values(_assets2.default).map(function(asset) {
                    if (!asset.available) return;
                    const utxos = state.utxos[asset.name];
                    if (utxos.size === 0) return;
                    return _fsExtra2.default.outputJson(_path2.default.join(srcOutDir, 'utxos', `${asset.name}.json`), utxos, {
                        spaces: 2
                    });
                }));
                yield _fsExtra2.default.outputJson(_path2.default.join(srcOutDir, `orders.json`), state.orders.data, {
                    spaces: 2
                });
                yield _fsExtra2.default.outputJson(_path2.default.join(srcOutDir, `exodus.conf.json`), state.config, {
                    spaces: 2
                });
                yield _fsExtra2.default.ensureDir(_path2.default.dirname(dest));
                _crossZip2.default.zip(srcDir, dest, function(err) {
                    _fsExtra2.default.remove(srcDir);
                    if (err) {
                        if (process.platform === 'win32') {
                            _swal2.default.error({
                                text: `Failure zipping: ${srcDir} to ${dest}. <br/><br/><a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595">Please install Powershell v3 and restart your computer.</a><br/><br/><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        } else {
                            _swal2.default.error({
                                text: `Failure zipping: ${srcDir} to ${dest}. <br/></br><strong>Error:</strong> ${err.message}`,
                                html: true
                            });
                        }
                    } else {
                        _swal2.default.success({
                            text: `Successfully exported report data to ${dest}.`
                        });
                    }
                });
            });
            return function dumpDiagnostics() {
                return _ref3.apply(this, arguments);
            };
        })();
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _os = require('os');
        var _os2 = _interopRequireDefault(_os);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _env = require(219);
        var _crossZip = require('cross-zip');
        var _crossZip2 = _interopRequireDefault(_crossZip);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _aw = require('aw');
        var _aw2 = _interopRequireDefault(_aw);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _get = require(242);
        var get = _interopRequireWildcard(_get);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function createPadLookup(arr) {
            const maxLen = arr.reduce((len, item) => {
                if (item.length > len) return item.length;
                else return len;
            }, 0);
            const lookup = {};
            arr.forEach(item => {
                lookup[item] = item.padStart(maxLen);
            });
            return lookup;
        }

    }, {
        "184": 184,
        "219": 219,
        "242": 242,
        "257": 257,
        "306": 306,
        "undefined": undefined
    }],
    238: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.xpub = exports.transactions = exports.dir = exports.privateKeysDialog = exports.addresses = undefined;
        var _addresses = require(236);
        var _dir2 = require(237);
        var _dir = _interopRequireWildcard(_dir2);
        var _transactions2 = require(239);
        var _transactions3 = _interopRequireDefault(_transactions2);
        var _xpub2 = require(240);
        var _xpub3 = _interopRequireDefault(_xpub2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const addresses = exports.addresses = _addresses.exportAddresses;
        const privateKeysDialog = exports.privateKeysDialog = _addresses.exportPrivateKeysDialog;
        const dir = exports.dir = _dir;
        const transactions = exports.transactions = _transactions3.default;
        const xpub = exports.xpub = _xpub3.default;

    }, {
        "236": 236,
        "237": 237,
        "239": 239,
        "240": 240
    }],
    239: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _env = require(219);
        var _get = require(242);
        var get = _interopRequireWildcard(_get);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(asset) {
                let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const txs = yield get.transactions(asset, opts);
                const txFields = opts.fiat ? ['txId', 'txUrl', 'date', 'coinAmount', 'fee', 'balance', 'balanceFiat', 'pricePer1Btc', 'exchange', 'memo'] : ['txId', 'txUrl', 'date', 'coinAmount', 'fee', 'balance', 'exchange', 'memo'];
                let txsCSV = txFields.map(function(field) {
                    return field.toUpperCase();
                }).join(',') + '\n';
                txsCSV += txs.map(function(tx) {
                    return txFields.map(function(field) {
                        return tx[field];
                    }).join(',');
                }).join('\n');
                const destFile = _path2.default.join((0, _env.exportsDir)(), `${asset}-txs-` + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm-ss') + '.csv');
                _fsExtra2.default.outputFile(destFile, txsCSV, function(err) {
                    if (err) {
                        _swal2.default.error({
                            text: `Failure export ${asset} transations to ${destFile}. <br/></br><strong>Error:</strong> ${err.message}`,
                            html: true
                        });
                    } else {
                        _swal2.default.success({
                            text: `Successfully exported ${asset} transactions to ${destFile}.`
                        });
                    }
                });
            });
            return function(_x2) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "219": 219,
        "242": 242,
        "306": 306,
        "undefined": undefined
    }],
    240: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _env = require(219);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _get = require(242);
        var get = _interopRequireWildcard(_get);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(asset) {
                const dest = _path2.default.join((0, _env.exportsDir)(), `${asset}-xpub.txt`);
                _fsExtra2.default.outputFileSync(dest, get.xpub(asset) + '\n');
                _swal2.default.success({
                    text: `Successfully exported ${asset} xpub to ${dest}.`
                });
            });
            return function(_x) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "219": 219,
        "242": 242,
        "306": 306,
        "undefined": undefined
    }],
    241: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPrivateKeys = exports.getAddresses = undefined;
        let getAddresses = exports.getAddresses = (() => {
            var _ref = _asyncToGenerator(function*(asset, options) {
                if (asset === 'bitcoin') return bitcoin(options);
                const fn = _assets2.default[asset].isAccountBased ? accountBase : bitcoinLike;
                return fn(asset, options);
            });
            return function getAddresses(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        let getPrivateKeys = exports.getPrivateKeys = (() => {
            var _ref2 = _asyncToGenerator(function*(asset) {
                return getAddresses(asset, {
                    includePrivKeys: true
                });
            });
            return function getPrivateKeys(_x3) {
                return _ref2.apply(this, arguments);
            };
        })();
        let accountBase = (() => {
            var _ref3 = _asyncToGenerator(function*(asset) {
                let {
                    includePrivKeys = false
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const state = flux.store.getState();
                const mpath = 'm/0/0';
                let key;
                if (includePrivKeys) {
                    const jsonHDKey = yield _instanceShim2.default.current.getHDKey(asset);
                    key = _bip2.default.fromJSON(jsonHDKey).derive(mpath, 'tag', {
                        spendable: true
                    });
                } else {
                    key = state.accounts[asset].hdkey.derive(mpath, 'tag', {
                        spendable: true
                    });
                }
                const addrObj = {
                    address: key.publicEncoded,
                    path: mpath,
                    balance: (0, _coinTotalAmounts2.default)(state)[asset].toDefault().toString({
                        unit: false
                    })
                };
                if (includePrivKeys) {
                    addrObj.privKey = key.privateEncoded;
                    if (addrObj.privKey.startsWith('0x')) addrObj.privKey = addrObj.privKey.slice(2);
                }
                return [addrObj];
            });
            return function accountBase(_x5) {
                return _ref3.apply(this, arguments);
            };
        })();
        let bitcoinLike = (() => {
            var _ref4 = _asyncToGenerator(function*(asset) {
                let {
                    includePrivKeys = false, gapLimit = 20
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const account = flux.store.getState().accounts[asset];
                const utxos = flux.store.getState().utxos[asset];
                const addrUtxos = utxos.addresses.map(function(addr) {
                    return addr.address;
                });
                console.dir(addrUtxos);
                const {
                    chain
                } = account;
                let hdkey = account.hdkey;
                if (includePrivKeys) {
                    const jsonHDKey = yield _instanceShim2.default.current.getHDKey(asset);
                    hdkey = _bip2.default.fromJSON(jsonHDKey);
                }
                let addresses = [];
                for (let chainIndex = 0; chainIndex < chain.length; ++chainIndex) {
                    for (let addrIndex = 0; addrIndex <= chain[chainIndex] + gapLimit; ++addrIndex) {
                        let mpath = `m/${chainIndex}/${addrIndex}`;
                        let key = hdkey.derive(mpath, 'tag', {
                            spendable: true
                        });
                        let addrStr = key.publicEncoded;
                        let addrObj = {
                            address: addrStr,
                            balance: addrUtxos.includes(addrStr) ? utxos.getAddressUtxos(addrStr).value.toDefault().toString({
                                unit: false
                            }) : '0',
                            path: mpath
                        };
                        if (includePrivKeys) addrObj.privKey = key.privateEncoded;
                        addresses.push(addrObj);
                    }
                }
                return addresses;
            });
            return function bitcoinLike(_x7) {
                return _ref4.apply(this, arguments);
            };
        })();
        let bitcoin = (() => {
            var _ref5 = _asyncToGenerator(function*() {
                let {
                    includePrivKeys = false
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                const asset = 'bitcoin';
                const utxos = flux.store.getState().utxos[asset];
                const txLog = flux.store.getState().txLog[asset];
                let hdkey = flux.store.getState().accounts[asset].hdkey;
                if (includePrivKeys) {
                    const jsonHDKey = yield _instanceShim2.default.current.getHDKey(asset);
                    hdkey = _bip2.default.fromJSON(jsonHDKey);
                }
                let addrs = utxos.addresses;
                addrs = Array.isArray(addrs) ? _addressSet2.default.fromArray(addrs) : addrs;
                addrs = addrs.add((0, _util.addressFromChainParams)(hdkey, 0, 0));
                addrs = addrs.union(txLog.addresses);
                const chain = flux.store.getState().accounts[asset].chain;
                for (let addrIndex = 0; addrIndex < chain[1]; ++addrIndex) {
                    addrs = addrs.add((0, _util.addressFromChainParams)(hdkey, 1, addrIndex));
                }
                addrs = addrs.sort(_addressSet.PATH_SORTER);
                let addresses = [];
                for (const addr of addrs) {
                    let key = hdkey.derive(addr.meta.path, 'tag', {
                        spendable: true
                    });
                    let addrStr = key.publicEncoded;
                    _assert2.default.strictEqual(addrStr, String(addr), 'Addresses dont match.');
                    let addrObj = {
                        address: addrStr,
                        balance: utxos.hasAddressUtxos(addrStr) ? utxos.getAddressUtxos(addrStr).value.toDefault().toString({
                            unit: false
                        }) : '0',
                        path: addr.meta.path
                    };
                    if (includePrivKeys) addrObj.privKey = key.privateEncoded;
                    addresses.push(addrObj);
                }
                return addresses;
            });
            return function bitcoin() {
                return _ref5.apply(this, arguments);
            };
        })();
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _util = require(10);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _bip = require(200);
        var _bip2 = _interopRequireDefault(_bip);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "10": 10,
        "102": 102,
        "167": 167,
        "184": 184,
        "200": 200,
        "257": 257,
        "81": 81,
        "undefined": undefined
    }],
    242: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.transactions = exports.priceAtTime = exports.privateKeys = exports.addresses = undefined;
        let priceAtTime = exports.priceAtTime = (() => {
            var _ref = _asyncToGenerator(function*(time) {
                sdb = sdb || _simdb2.default;
                time = (0, _start_of_hour2.default)(time);
                const iso = time.toISOString();
                const price = yield sdb.get(iso);
                if (price) {
                    console.log('HIT');
                    return price;
                } else {
                    console.log('MISS');
                    const priceData = yield(0, _cryptocompare.priceHistorical)('BTC', ['USD'], time);
                    yield(0, _delay2.default)(1000);
                    yield sdb.set(iso, priceData.BTC.USD);
                    return priceData.BTC.USD;
                }
            });
            return function priceAtTime(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        let transactions = exports.transactions = (() => {
            var _ref2 = _asyncToGenerator(function*(coinName) {
                let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                let txs = Array.from(flux.store.getState().txLog[coinName] || []);
                txs.sort(function(a, b) {
                    return a.date - b.date;
                });
                let balance = _assets2.default[coinName].currency.ZERO;
                txs = txs.map(function(tx, i, txs) {
                    if (tx.coinAmount.isNegative && tx.feeAmount && tx.feeAmount.unitName === balance.unitName) {
                        balance = balance.subtract(tx.feeAmount);
                    }
                    balance = balance.add(tx.coinAmount);
                    const fee = tx.coinAmount.isNegative ? tx.feeAmount ? tx.feeAmount.negate().toString() : '' : '';
                    return Object.assign({
                        memo: '',
                        balance: balance.toString(),
                        fee
                    }, tx, {
                        coinAmount: tx.coinAmount.toString(),
                        txUrl: _assets2.default[coinName].blockExplorer.txUrl(tx.txId)
                    });
                });
                if (opts.fiat) {
                    for (const tx of txs) {
                        const price = yield priceAtTime(tx.date);
                        const balance = (parseFloat(tx.balance) * price).toFixed(2);
                        tx.balanceFiat = '$' + balance;
                        tx.pricePer1Btc = '$' + price.toFixed(2);
                    }
                }
                return txs;
            });
            return function transactions(_x3) {
                return _ref2.apply(this, arguments);
            };
        })();
        var _addresses = require(241);
        Object.defineProperty(exports, 'addresses', {
            enumerable: true,
            get: function() {
                return _addresses.getAddresses;
            }
        });
        Object.defineProperty(exports, 'privateKeys', {
            enumerable: true,
            get: function() {
                return _addresses.getPrivateKeys;
            }
        });
        exports.xpub = xpub;
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);
        var _cryptocompare = require('cryptocompare');
        var _start_of_hour = require('date-fns/start_of_hour');
        var _start_of_hour2 = _interopRequireDefault(_start_of_hour);
        var _simdb = require('simdb');
        var _simdb2 = _interopRequireDefault(_simdb);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function xpub(asset) {
            return flux.store.getState().accounts[asset].hdkey.xPub;
        }
        let sdb = null;

    }, {
        "184": 184,
        "241": 241,
        "257": 257,
        "undefined": undefined
    }],
    243: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, privateKeyWIF) {
                const state = _flux.store.getState();
                if (asset !== 'bcash') throw new Error(`Invalid asset: expected bcash, received: ${asset}`);
                const {
                    versions
                } = (0, _coininfo2.default)('bitcoin');
                const {
                    privateKey
                } = _wif2.default.decode(privateKeyWIF, versions.private);
                const publicKey = _secp256k2.default.publicKeyCreate(privateKey, true);
                const address = _assets2.default.bcash.keys.encodePublic(publicKey);
                if ((0, _getRecvExchAddresses2.default)(state)(asset).has(address)) {
                    return {
                        status: 'own-key'
                    };
                }
                const utxoFetcher = (0, _utxoFetcher2.default)(state);
                const utxos = yield utxoFetcher('bcash', [_address2.default.create(address)]);
                if (utxos.value.isZero()) return {
                    status: 'zero',
                    address
                };
                const receiverAddress = (0, _getReceiveAddress2.default)(state)('bcash').toString();
                const fee = (0, _feeEstimator2.default)(_assets2.default.bcash)({
                    inputs: utxos,
                    outputs: [receiverAddress]
                });
                let amount = utxos.value.subtract(fee);
                if (amount.isNegative) return {
                    status: 'negative',
                    address
                };
                const options = {
                    asset: _assets2.default.bcash,
                    utxos,
                    receiverAddress,
                    amount,
                    fee,
                    privateKeys: [privateKeyWIF]
                };
                const {
                    rawTx
                } = yield(0, _bitcoinLike.createTx)(options);
                return {
                    address,
                    amount,
                    rawtx: rawTx
                };
            });
            return function privateKey(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _bitcoinLike = require(71);
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _secp256k = require('secp256k1');
        var _secp256k2 = _interopRequireDefault(_secp256k);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _utxoFetcher = require(132);
        var _utxoFetcher2 = _interopRequireDefault(_utxoFetcher);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "132": 132,
        "184": 184,
        "255": 255,
        "257": 257,
        "71": 71,
        "82": 82,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    244: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(assetName, privateKeyWIF) {
                const state = _flux.store.getState();
                const asset = _assets2.default[assetName];
                const {
                    versions
                } = (0, _coininfo2.default)(assetName);
                const {
                    privateKey,
                    compressed
                } = _wif2.default.decode(privateKeyWIF, versions.private);
                const publicKey = _secp256k2.default.publicKeyCreate(privateKey, compressed);
                const address = asset.keys.encodePublic(publicKey);
                if ((0, _getRecvExchAddresses2.default)(state)(asset.name).has(address)) {
                    return {
                        status: 'own-key'
                    };
                }
                const utxoFetcher = (0, _utxoFetcher2.default)(state);
                const baseAsset = asset.isOmniProperty ? _assets2.default.bitcoin : asset;
                const utxos = yield utxoFetcher(baseAsset.name, [_address2.default.create(address)]);
                if (utxos.value.isZero()) return {
                    status: 'zero',
                    address
                };
                const receiverAddress = (0, _getReceiveAddress2.default)(state)(asset.name).toString();
                const fee = (0, _feeEstimator2.default)(asset)({
                    inputs: utxos,
                    outputs: [receiverAddress]
                });
                let amount = utxos.value.subtract(fee);
                if (amount.isNegative) return {
                    status: 'negative',
                    address
                };
                const options = {
                    asset,
                    utxos,
                    receiverAddress,
                    amount,
                    fee,
                    privateKeys: [privateKeyWIF]
                };
                const {
                    rawTx
                } = yield(0, _bitcoinLike.createTx)(options);
                return {
                    address,
                    amount,
                    rawtx: rawTx
                };
            });
            return function privateKey(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _bitcoinLike = require(71);
        var _coininfo = require('coininfo');
        var _coininfo2 = _interopRequireDefault(_coininfo);
        var _wif = require('wif');
        var _wif2 = _interopRequireDefault(_wif);
        var _secp256k = require('secp256k1');
        var _secp256k2 = _interopRequireDefault(_secp256k);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _utxoFetcher = require(132);
        var _utxoFetcher2 = _interopRequireDefault(_utxoFetcher);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "132": 132,
        "184": 184,
        "255": 255,
        "257": 257,
        "71": 71,
        "82": 82,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    245: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, privateKeyWIF) {
                if (asset !== 'decred') throw new Error(`Invalid asset: expected decred, received: ${asset}`);
                const state = _flux.store.getState();
                const address = _dcrcoreLib2.default.PrivateKey(privateKeyWIF).toAddress().toString();
                if ((0, _getRecvExchAddresses2.default)(state)(asset).has(address)) {
                    return {
                        status: 'own-key'
                    };
                }
                const utxoFetcher = (0, _utxoFetcher2.default)(state);
                const utxos = yield utxoFetcher('decred', [_address2.default.create(address)]);
                if (utxos.value.isZero()) return {
                    status: 'zero',
                    address
                };
                const receiverAddress = (0, _getReceiveAddress2.default)(state)('decred').toString();
                const fee = (0, _feeEstimator2.default)(_assets2.default.decred)({
                    inputs: utxos,
                    outputs: [receiverAddress]
                });
                let amount = utxos.value.subtract(fee);
                if (amount.isNegative) return {
                    status: 'negative',
                    address
                };
                const options = {
                    asset: _assets2.default.decred,
                    utxos,
                    receiverAddress,
                    amount,
                    fee,
                    privateKeys: [privateKeyWIF]
                };
                const {
                    rawTx
                } = yield(0, _bitcoinLike.createTx)(options);
                return {
                    address,
                    amount,
                    rawtx: rawTx
                };
            });
            return function privateKey(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        var _dcrcoreLib = require('dcrcore-lib');
        var _dcrcoreLib2 = _interopRequireDefault(_dcrcoreLib);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _address = require(82);
        var _address2 = _interopRequireDefault(_address);
        var _bitcoinLike = require(71);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _utxoFetcher = require(132);
        var _utxoFetcher2 = _interopRequireDefault(_utxoFetcher);
        var _feeEstimator = require(255);
        var _feeEstimator2 = _interopRequireDefault(_feeEstimator);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "132": 132,
        "184": 184,
        "255": 255,
        "257": 257,
        "71": 71,
        "82": 82,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    246: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, privateKey) {
                privateKey = _ethereumjsUtil2.default.addHexPrefix(privateKey);
                if (privateKey.length !== 66 || !_ethereumjsUtil2.default.isValidPrivate(_ethereumjsUtil2.default.toBuffer(privateKey))) {
                    return {
                        status: 'invalid'
                    };
                }
                const baseAsset = asset === 'ethereumclassic' ? 'ethereumclassic' : 'ethereum';
                const receiveAddress = (0, _getReceiveAddress2.default)(_flux.store.getState())(asset).toString().toLowerCase();
                const address = _ethereumjsUtil2.default.toChecksumAddress(_ethereumjsUtil2.default.privateToAddress(privateKey).toString('hex')).toLowerCase();
                if (address === receiveAddress) return {
                    status: 'own-key'
                };
                const nonce = yield(0, _ethereum.getNonce)({
                    asset: _assets2.default[baseAsset],
                    address
                });
                const rawEthereumBalance = yield(baseAsset === 'ethereum' ? fetchEthereumBalance : fetchEthereumClassicBalance)(address);
                const ethBalance = _assets2.default[baseAsset].currency.baseUnit(rawEthereumBalance);
                let amount = ethBalance;
                if (_assets2.default[asset].isEthereumToken) {
                    const contractAddress = _assets2.default[asset].contract.addresses.current.toLowerCase();
                    const rawTokenBalance = yield fetchEthereumTokenBalance(contractAddress, address);
                    amount = _assets2.default[asset].currency.baseUnit(rawTokenBalance);
                }
                if (amount.isZero()) return {
                    status: 'zero',
                    address
                };
                if (!_assets2.default[asset].isEthereumToken) amount = amount.subtract(_assets2.default[baseAsset].fee);
                const afterFee = ethBalance.subtract(_assets2.default[baseAsset].fee);
                if (afterFee.isNegative) return {
                    status: 'negative',
                    address
                };
                const txObj = yield(0, _ethereum.createTx)({
                    baseAsset: _assets2.default[baseAsset],
                    asset: _assets2.default[asset],
                    address: receiveAddress,
                    amount,
                    nonce,
                    privateKey: _ethereumjsUtil2.default.toBuffer(privateKey)
                });
                return {
                    address,
                    amount,
                    rawtx: txObj.rawTx
                };
            });
            return function privateKey(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _flux = require(257);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _exodusEthereumServer = require(229);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _ethereum = require(72);
        var _ethereumjsUtil = require('ethereumjs-util');
        var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const fetchEthereumBalance = (0, _exodusEthereumServer.withFallback)((() => {
            var _ref2 = _asyncToGenerator(function*(address) {
                const balances = yield _exodusEthereumServer.eth.getBalance(address);
                return lodash.get(balances, 'confirmed.value', '0');
            });
            return function(_x3) {
                return _ref2.apply(this, arguments);
            };
        })(), etherscan.fetchBalance);
        const fetchEthereumClassicBalance = (0, _exodusEthereumServer.withFallback)((() => {
            var _ref3 = _asyncToGenerator(function*(address) {
                const balances = yield _exodusEthereumServer.etc.getBalance(address);
                return lodash.get(balances, 'confirmed.value', '0');
            });
            return function(_x4) {
                return _ref3.apply(this, arguments);
            };
        })(), etcchain.fetchBalance);
        const fetchEthereumTokenBalance = (0, _exodusEthereumServer.withFallback)((() => {
            var _ref4 = _asyncToGenerator(function*(contractAddress, address) {
                const balances = yield _exodusEthereumServer.eth.getBalance(address);
                return lodash.get(balances, `confirmed.${contractAddress}`, '0');
            });
            return function(_x5, _x6) {
                return _ref4.apply(this, arguments);
            };
        })(), etherscan.tokenBalance);

    }, {
        "184": 184,
        "221": 221,
        "223": 223,
        "229": 229,
        "257": 257,
        "72": 72,
        "92": 92,
        "undefined": undefined
    }],
    247: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, privateKey) {
                let {
                    koinify = false
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                if (asset !== 'factom') throw new Error(`Invalid asset: expected factom, received: ${asset}`);
                if (koinify) {
                    if (!_bip2.default.validateMnemonic(privateKey)) return {
                        status: 'invalid-koinify'
                    };
                    const seed = _bip2.default.mnemonicToSeed(privateKey);
                    const masterKey = _hdkey2.default.fromMasterSeed(seed);
                    const child = masterKey.deriveChild(_hdkey2.default.HARDENED_OFFSET + 7);
                    privateKey = child.privateKey;
                } else {
                    try {
                        privateKey = _factomjsLib2.default.privateKey.fct.fromHumanReadable(privateKey);
                    } catch (err) {
                        return {
                            status: 'invalid'
                        };
                    }
                }
                const publicKey = _factomjsLib2.default.crypto.publicKeyCreate(privateKey);
                const rcd1 = _factomjsLib2.default.rcd.createRCD1(publicKey);
                const rcdHash = _factomjsLib2.default.rcd.getHash(rcd1);
                const address = _factomjsLib2.default.address.fct.toHumanReadable(rcdHash);
                if ((0, _getRecvExchAddresses2.default)(_flux.store.getState())(asset).has(address)) {
                    return {
                        status: 'own-key'
                    };
                }
                const balances = yield _exodusFactomServer2.default.getBalance(address);
                const rawBalance = balances.confirmed + balances.unconfirmed;
                const balance = _assets2.default.factom.currency.factoshis(rawBalance);
                if (balance.isZero()) return {
                    status: 'zero',
                    address
                };
                const amount = balance.subtract(_assets2.default.factom.fee);
                if (amount.isNegative) return {
                    status: 'negative',
                    address
                };
                const walletAddress = (0, _getReceiveAddress2.default)(_flux.store.getState())('factom').toString();
                const tx = _factomjsLib2.default.transaction.create();
                _factomjsLib2.default.transaction.addInput(tx, publicKey, rawBalance);
                _factomjsLib2.default.transaction.addOutput(tx, walletAddress, amount.toNumber());
                _factomjsLib2.default.transaction.signInput(tx, 0, privateKey);
                return {
                    address,
                    amount,
                    rawtx: _factomjsLib2.default.encoding.Transaction.encode(tx)
                };
            });
            return function privateKey(_x2, _x3) {
                return _ref.apply(this, arguments);
            };
        })();
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _factomjsLib = require('factomjs-lib');
        var _factomjsLib2 = _interopRequireDefault(_factomjsLib);
        var _bip = require('bip39');
        var _bip2 = _interopRequireDefault(_bip);
        var _hdkey = require('hdkey');
        var _hdkey2 = _interopRequireDefault(_hdkey);
        var _exodusFactomServer = require(231);
        var _exodusFactomServer2 = _interopRequireDefault(_exodusFactomServer);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "184": 184,
        "231": 231,
        "257": 257,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    248: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKeyWithDialog = exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, key) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                const ret = yield createTx(asset, key, options);
                if (ret.status) throw new Error(ret.status);
                yield sendTx(asset, ret);
                return ret;
            });
            return function privateKey(_x2, _x3) {
                return _ref.apply(this, arguments);
            };
        })();
        let privateKeyWithDialog = exports.privateKeyWithDialog = (() => {
            var _ref2 = _asyncToGenerator(function*(asset) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                let baseName = asset;
                if (_assets2.default[asset].isEthereumToken) baseName = 'ethereum';
                const privateKey = yield new Promise(function(resolve) {
                    let title;
                    let text;
                    if (options.wif) {
                        title = 'Private Key (WIF)?';
                        text = `Paste ${_assets2.default[asset].properName} private key in (WIF) format:`;
                    } else if (options.koinify) {
                        title = '12 words?';
                        text = `Paste 12 words from Koinify sale:`;
                    } else {
                        title = 'Private Key?';
                        text = `Paste ${_assets2.default[asset].properName} private key:`;
                    }(0, _swal2.default)({
                        text,
                        animation: false,
                        title,
                        showCancelButton: true,
                        confirmButtonText: 'Import',
                        type: 'input'
                    }, resolve);
                });
                if (!privateKey) return;
                let ret;
                try {
                    ret = yield createTx(asset, privateKey, options);
                } catch (err) {
                    console.error(err.stack || err);
                    ret = {
                        status: err.message
                    };
                }
                yield(0, _delay2.default)(1000);
                if (ret.status) {
                    let text = ret.status;
                    if (ret.status === 'invalid') text = `Invalid private key: ${privateKey}`;
                    if (ret.status === 'invalid-koinify') text = `Invalid 12 words from Koinify sale: ${privateKey}`;
                    if (ret.status === 'zero') text = `There is nothing to move from ${ret.address}`;
                    if (ret.status === 'negative') text = `Not enough funds to move from ${ret.address}`;
                    if (ret.status === 'own-key') text = 'You cannot import your own Exodus private key';
                    if (ret.status === 'unsupported') text = `Import for ${asset} is not supported at the moment.`;
                    return _swal2.default.error({
                        text
                    });
                }
                const confirmed = yield new Promise(function(resolve) {
                    _swal2.default.confirm({
                        text: `Are you sure you want to move ${ret.amount.toDefault().toString()} from ${ret.address} to this wallet?`,
                        title: 'Move Funds?',
                        showCancelButton: true
                    }, function(val) {
                        return resolve(val);
                    });
                });
                if (!confirmed) return;
                if (baseName === 'ripple') {
                    let ret2;
                    try {
                        ret2 = yield createTx(asset, privateKey, options);
                    } catch (err) {
                        console.error(err.stack || err);
                        ret2 = {
                            status: err.message
                        };
                    }
                    if (ret2.status) return _swal2.default.error({
                        text: ret2.status
                    });
                    if (!ret2.amount.equals(ret.amount)) return _swal2.default.error({
                        text: 'Amount for import was changed'
                    });
                    ret = ret2;
                }
                yield sendTx(asset, ret);
                yield(0, _delay2.default)(1000);
                _swal2.default.success({
                    text: `${ret.amount.toDefault().toString()} were sent to this wallet.`
                });
            });
            return function privateKeyWithDialog(_x5) {
                return _ref2.apply(this, arguments);
            };
        })();
        let createTx = (() => {
            var _ref3 = _asyncToGenerator(function*(asset, privateKey) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                let importPrivateKey;
                let baseName = asset;
                if (_assets2.default[asset].isEthereumToken) baseName = 'ethereum';
                switch (baseName) {
                    case 'dash':
                    case 'bitcoin':
                    case 'litecoin':
                    case 'tether':
                    case 'zcash':
                        importPrivateKey = _bitcoinLike.privateKey;
                        break;
                    case 'decred':
                        importPrivateKey = _decred.privateKey;
                        break;
                    case 'bcash':
                        importPrivateKey = _bcash.privateKey;
                        break;
                    case 'ethereum':
                    case 'ethereumclassic':
                        importPrivateKey = _ethereum.privateKey;
                        break;
                    case 'factom':
                        importPrivateKey = _factom.privateKey;
                        break;
                    case 'ripple':
                        importPrivateKey = _ripple.privateKey;
                        break;
                    default:
                        return {
                            status: 'unsupported'
                        };
                }
                return importPrivateKey(asset, privateKey, options);
            });
            return function createTx(_x7, _x8) {
                return _ref3.apply(this, arguments);
            };
        })();
        let sendTx = (() => {
            var _ref4 = _asyncToGenerator(function*(asset, data) {
                try {
                    const broadcastTx = (0, _broadcastTx2.default)(_flux.store.getState())(asset);
                    yield broadcastTx(data.rawtx.toString('hex'));
                } catch (err) {
                    console.log(err.stack || err);
                    return _swal2.default.error({
                        text: 'Broadcast transaction error. If this persists, please contact support@exodus.io.'
                    });
                }
                _flux.store.dispatch((0, _util.FSA)('TX_SEND_SUCCESS'));
                _flux.actions.txSend.ackSend();
            });
            return function sendTx(_x9, _x10) {
                return _ref4.apply(this, arguments);
            };
        })();
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _util = require(264);
        var _broadcastTx = require(131);
        var _broadcastTx2 = _interopRequireDefault(_broadcastTx);
        var _bitcoinLike2 = require(244);
        var _bitcoinLike = _interopRequireWildcard(_bitcoinLike2);
        var _decred2 = require(245);
        var _decred = _interopRequireWildcard(_decred2);
        var _bcash2 = require(243);
        var _bcash = _interopRequireWildcard(_bcash2);
        var _ethereum2 = require(246);
        var _ethereum = _interopRequireWildcard(_ethereum2);
        var _factom2 = require(247);
        var _factom = _interopRequireWildcard(_factom2);
        var _ripple2 = require(249);
        var _ripple = _interopRequireWildcard(_ripple2);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "131": 131,
        "184": 184,
        "243": 243,
        "244": 244,
        "245": 245,
        "246": 246,
        "247": 247,
        "249": 249,
        "257": 257,
        "264": 264,
        "306": 306,
        "undefined": undefined
    }],
    249: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.privateKey = undefined;
        let privateKey = exports.privateKey = (() => {
            var _ref = _asyncToGenerator(function*(asset, privateKey) {
                let {
                    secret = false
                } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                if (asset !== 'ripple') throw new Error(`Invalid asset: expected ripple, received: ${asset}`);
                if (secret) privateKey = keypairs.deriveKeypair(privateKey).privateKey.toString('hex');
                if (privateKey.match(/00[0-9a-fA-f]{64}/) === null) return {
                    status: 'invalid'
                };
                privateKey = Buffer.from(privateKey.slice(2), 'hex');
                const publicKey = secp256k1.publicKeyCreate(privateKey);
                const address = _assets2.default.ripple.keys.encodePublic(publicKey);
                const info = yield(0, _rippleApi.getAccountInfo)(address);
                const balance = _assets2.default.ripple.currency.baseUnit(info.balance).subtract(_assets2.default.ripple.accountReserve).clampLowerZero().to(_assets2.default.ripple.displayUnit);
                if (balance.isZero()) return {
                    status: 'zero',
                    address
                };
                const amount = balance.subtract(_assets2.default.ripple.fee);
                if (amount.isNegative) return {
                    status: 'negative',
                    address
                };
                const tx = yield(0, _ripple.createTx)({
                    to: (0, _getReceiveAddress2.default)(_flux.store.getState())('ripple').toString(),
                    amount,
                    sequence: info.sequence,
                    privateKey
                });
                return {
                    address,
                    amount,
                    rawtx: Buffer.from(tx.hex, 'hex')
                };
            });
            return function privateKey(_x2, _x3) {
                return _ref.apply(this, arguments);
            };
        })();
        var _secp256k = require('secp256k1');
        var secp256k1 = _interopRequireWildcard(_secp256k);
        var _flux = require(257);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _rippleApi = require(290);
        var _keypairs = require(293);
        var keypairs = _interopRequireWildcard(_keypairs);
        var _ripple = require(77);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "184": 184,
        "257": 257,
        "290": 290,
        "293": 293,
        "77": 77,
        "92": 92,
        "undefined": undefined
    }],
    250: [function(require, module, exports) {
        'use strict';
        var _console2 = require(234);
        var _console = _interopRequireWildcard(_console2);
        var _debug2 = require(235);
        var _debug = _interopRequireWildcard(_debug2);
        var _export2 = require(238);
        var _export = _interopRequireWildcard(_export2);
        var _get2 = require(242);
        var _get = _interopRequireWildcard(_get2);
        var _import2 = require(248);
        var _import = _interopRequireWildcard(_import2);
        var _p2p2 = require(251);
        var _p2p = _interopRequireWildcard(_p2p2);
        var _restore2 = require(252);
        var _restore = _interopRequireWildcard(_restore2);
        var _sweep2 = require(253);
        var _sweep3 = _interopRequireDefault(_sweep2);
        var _bcashClaim2 = require(233);
        var _bcashClaim3 = _interopRequireDefault(_bcashClaim2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.console = _console;
        exports.debug = _debug;
        exports.export = _export;
        exports.get = _get;
        exports.import = _import;
        exports.p2p = _p2p;
        exports.restore = _restore;
        exports.sweep = _sweep3.default;
        exports.bcashClaim = _bcashClaim3.default;

    }, {
        "233": 233,
        "234": 234,
        "235": 235,
        "238": 238,
        "242": 242,
        "248": 248,
        "251": 251,
        "252": 252,
        "253": 253
    }],
    251: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.setMaxNodes = setMaxNodes;
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function setMaxNodes(asset, max) {
            flux.actions.config.update(`p2p.${asset}.maxNodes`, max);
        }

    }, {
        "257": 257
    }],
    252: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromRecoveryLink = fromRecoveryLink;
        exports.fromRecoveryPhrase = fromRecoveryPhrase;
        var _electron = require('electron');
        var _electronDialog = require(215);
        var _electronDialog2 = _interopRequireDefault(_electronDialog);
        var _electronExit = require(216);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function fromRecoveryLink() {
            _swal2.default.prompt({
                title: 'Restore?',
                text: 'Please paste in your Exodus recovery link sent to your email:',
                animation: false,
                inputType: 'text',
                closeOnConfirm: true
            }, link => {
                if (!link.includes('#')) {
                    return _electronDialog2.default.showErrorBox('Invalid Link', 'Invalid recovery link.');
                }
                _electronDialog2.default.showMessageBox({
                    title: 'Restart',
                    message: 'Exodus is going to restart.\n\nThis may take a few moments.',
                    type: 'info',
                    buttons: ['OK']
                });
                window.requestIdleCallback(() => {
                    const newLink = `exodus://recover/${link.split('#')[1]}`;
                    _electron.remote.app.relaunch({
                        args: _electron.remote.process.argv.slice(1).concat(newLink)
                    });
                    (0, _electronExit.quit)();
                });
            });
        }

        function fromRecoveryPhrase() {
            _electronDialog2.default.showMessageBox({
                title: 'Restart',
                message: 'Exodus is going to restart and then ask you to input your 12-word phrase.\n\nThis may take a few moments.',
                buttons: ['OK']
            });
            _electron.remote.app.relaunch({
                args: _electron.remote.process.argv.slice(1).concat('--restore-mnemonic')
            });
            (0, _electronExit.quit)();
        }

    }, {
        "215": 215,
        "216": 216,
        "306": 306,
        "undefined": undefined
    }],
    253: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        let _importPrivateKey = (() => {
            var _ref2 = _asyncToGenerator(function*(toAsset, privateKey) {
                try {
                    const result = yield(0, _import.privateKey)(toAsset, privateKey);
                    return result.amount;
                } catch (err) {
                    if (['zero', 'negative'].includes(err.message)) {
                        return _assets2.default[toAsset].currency.ZERO;
                    }
                    throw err;
                }
            });
            return function _importPrivateKey(_x3, _x4) {
                return _ref2.apply(this, arguments);
            };
        })();
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _aureus = require(192);
        var _aureus2 = _interopRequireDefault(_aureus);
        var _import = require(248);
        var _get = require(242);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(fromAsset, toAsset) {
                try {
                    const privateKeys = yield(0, _get.privateKeys)(fromAsset);
                    const amounts = yield Promise.all(privateKeys.map(function(obj) {
                        return _importPrivateKey(toAsset, obj.privKey);
                    }));
                    const total = amounts.reduce(function(total, amount) {
                        return total.add(amount);
                    }, _assets2.default[toAsset].currency.ZERO);
                    if (total.isZero()) {
                        _swal2.default.warn({
                            title: 'Sorry!',
                            text: `Did not find any ${_assets2.default[toAsset].properName}`
                        });
                    } else {
                        _swal2.default.success({
                            text: `${total.toDefault().toString()} were sent from your ${_assets2.default[fromAsset].properName} address to your ${_assets2.default[toAsset].properName} address.`
                        });
                    }
                } catch (err) {
                    _swal2.default.error({
                        text: err
                    });
                }
            });
            return function(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "184": 184,
        "192": 192,
        "242": 242,
        "248": 248,
        "306": 306
    }],
    254: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = extractUtxosFromTx;
        exports.pubKeyHashFromScript = pubKeyHashFromScript;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _addressSet = require(81);
        var _addressSet2 = _interopRequireDefault(_addressSet);
        var _bitcoreLib = require('bitcore-lib');
        var _bitcoreLib2 = _interopRequireDefault(_bitcoreLib);
        var _dcrcoreLib = require('dcrcore-lib');
        var _dcrcoreLib2 = _interopRequireDefault(_dcrcoreLib);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);
        var _bs58check = require('bs58check');
        var _bs58check2 = _interopRequireDefault(_bs58check);
        var _bs58checkBlake = require(203);
        var _bs58checkBlake2 = _interopRequireDefault(_bs58checkBlake);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const {
            OP_DUP,
            OP_HASH160,
            OP_EQUALVERIFY,
            OP_CHECKSIG
        } = _bitcoreLib2.default.Opcode.map;

        function extractUtxosFromTx(txBuf, addrs, asset) {
            const AssetTx = (asset === 'decred' ? _dcrcoreLib2.default : _bitcoreLib2.default).Transaction;
            const tx = new AssetTx(txBuf);
            const txObj = tx.toJSON();
            const currency = _assets2.default[asset].currency;
            const bs58check = asset === 'decred' ? _bs58checkBlake2.default : _bs58check2.default;
            const pubKeyHashes = new Map();
            for (const addr of addrs) {
                const hash = bs58check.decode(String(addr)).slice(-20);
                pubKeyHashes.set(addr, hash);
            }
            let utxos = [];
            txObj.outputs.forEach((output, i) => {
                try {
                    const script = Buffer.from(output.script, 'hex');
                    const pubKeyHash = pubKeyHashFromScript(script);
                    pubKeyHashes.forEach((pkh, addr) => {
                        if (!pkh.equals(pubKeyHash)) return;
                        utxos.push({
                            txId: txObj.hash,
                            address: addr,
                            vout: i,
                            script: output.script,
                            value: currency.baseUnit(output[asset === 'decred' ? 'atoms' : 'satoshis']),
                            confirmations: 0
                        });
                    });
                } catch (e) {}
            });
            return _utxoCollection2.default.fromArray(utxos, {
                currency
            });
        }

        function pubKeyHashFromScript(script) {
            (0, _assert2.default)(checkP2PKH(script), `${script.toString('hex')} is not a p2pkh script.`);
            return script.slice(3, -2);
        }

        function checkP2PKH(script) {
            return script.length === 25 && script[0] === OP_DUP && script[1] === OP_HASH160 && script[2] === 0x14 && script[23] === OP_EQUALVERIFY && script[24] === OP_CHECKSIG;
        }

    }, {
        "184": 184,
        "203": 203,
        "81": 81,
        "89": 89,
        "undefined": undefined
    }],
    255: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = getFeeEstimator;
        exports.getSize = getSize;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _varuintBitcoin = require('varuint-bitcoin');
        var varuint = _interopRequireWildcard(_varuintBitcoin);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _aureus = require(192);
        var _aureus2 = _interopRequireDefault(_aureus);
        var _utxoCollection = require(89);
        var _utxoCollection2 = _interopRequireDefault(_utxoCollection);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function getFeeEstimator(asset) {
            let {
                feePerKB = asset.feePerKB, defaultOptions = {}
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            (0, _assert2.default)(asset.hasUTXO || asset.isOmniProperty, `#fee-estimator can not be applied to ${asset.name}`);
            if (asset.isOmniProperty) {
                (0, _assert2.default)(feePerKB.unitType === _assets2.default.bitcoin.currency, `Invalid feePerKB, expected ${_assets2.default.bitcoin.currency}`);
            } else {
                (0, _assert2.default)(feePerKB.unitType === asset.currency, `Invalid feePerKB, expected ${asset.currency}`);
            }
            return function() {
                let {
                    inputs = defaultOptions.inputs, outputs = defaultOptions.outputs
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                const size = getSize(asset, inputs, outputs);
                const feeRaw = Math.ceil(feePerKB.toBase().toNumber() * size / 1000);
                return asset.currency.baseUnit(feeRaw);
            };
        }

        function getSize(asset, inputs, outputs) {
            if (inputs instanceof _utxoCollection2.default) {
                inputs = Array.from(inputs).map(utxo => utxo.script || null);
            }
            if (asset.name === 'decred') {
                return 4 + varuint.encodingLength(inputs.length) + inputs.length * (32 + 4 + 1 + 4) + varuint.encodingLength(outputs.length) + outputs.length * (8 + 2 + 1 + 25) + 8 + varuint.encodingLength(inputs.length) + inputs.length * (4 + 4 + 4 + 4 + 1 + 107);
            }
            return 4 + 4 + varuint.encodingLength(inputs.length) + inputs.reduce((t, script) => {
                if (script === null) script = '76a914000000000000000000000000000000000000000088ac';
                (0, _assert2.default)(/^76a914[0-9a-f]{40}88ac$/i.test(script), 'Only P2PKH inputs supported right now');
                const scriptSigLength = 107;
                return t + 32 + 4 + varuint.encodingLength(scriptSigLength) + scriptSigLength + 4;
            }, 0) + varuint.encodingLength(outputs.length) + outputs.reduce((t, output) => {
                if (output === null) output = 'P2PKH';
                if (!['P2PKH', 'P2SH'].includes(output)) {
                    const isBitcoinBaseAsset = asset.isOmniProperty || ['bcash', 'bcashclaim'].includes(asset.name);
                    const baseAsset = isBitcoinBaseAsset ? _assets2.default.bitcoin : asset;
                    if (baseAsset.address.isP2PKH(output)) output = 'P2PKH';
                    else if (baseAsset.address.isP2SH(output)) output = 'P2SH';
                }(0, _assert2.default)(['P2PKH', 'P2SH'].includes(output), 'Only P2PKH and P2SH outputs supported right now');
                const scriptPubKeyLength = {
                    P2PKH: 25,
                    P2SH: 23
                }[output];
                return t + 8 + varuint.encodingLength(scriptPubKeyLength) + scriptPubKeyLength;
            }, 0);
        }

    }, {
        "184": 184,
        "192": 192,
        "89": 89,
        "undefined": undefined
    }],
    256: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = soundfxStoreEnhancer;
        var _static = require(305);
        var _audio = require(190);
        var _soundfx = require(303);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function soundfxStoreEnhancer() {
            return createStore => (reducer, initialState, enhancer) => {
                let store = createStore(reducer, initialState, enhancer);
                let dispatch = store.dispatch;
                for (let t of _soundfx.stateTransitions) {
                    let args;
                    if (typeof t[0] === 'function') args = [() => t[0](store.getState()), []];
                    else args = [store.getState, t[0]];
                    let w = _reduxWatch2.default.apply(_reduxWatch2.default, args);
                    store.subscribe(w(function() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        let audio = t[1].apply(null, args);
                        if (audio)(0, _audio.playAudio)((0, _static.getAudioPaths)()[audio]);
                    }));
                }
                return Object.assign({}, store, {
                    dispatch
                });
            };
        }

    }, {
        "190": 190,
        "303": 303,
        "305": 305,
        "undefined": undefined
    }],
    257: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.actions = exports.store = undefined;
        var _appActions = require(25);
        var _store2 = require(263);
        var _store3 = _interopRequireDefault(_store2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const store = exports.store = _store3.default;
        const actions = exports.actions = (0, _appActions.bindAllActionCreators)(store);

    }, {
        "25": 25,
        "263": 263
    }],
    258: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createActionHookMiddleware = createActionHookMiddleware;

        function createActionHookMiddleware(hooks) {
            hooks = hooks.map(hook => new Map(hook));
            let masterMap = new Map();
            for (let map of hooks) {
                for (let [k, v] of map) {
                    if (masterMap.has(k)) throw new Error(`Action hook map alread has key ${k}.`);
                    masterMap.set(k, v);
                }
            }
            return function hookMiddleware(_ref) {
                let {
                    dispatch,
                    getState
                } = _ref;
                return next => action => {
                    const preState = getState();
                    let act = next(action);
                    const postState = getState();
                    const hookFnFail = err => {
                        let msg = action && action.type ? `Action hook failure (${action.type}):` : 'Action hook failure:';
                        console.error(msg);
                        console.error(err);
                    };
                    const runHookFn = (hookKey, hookFn) => {
                        try {
                            const res = hookFn(action, {
                                dispatch,
                                preState,
                                postState
                            });
                            if (res && typeof res.then === 'function') {
                                res.then(result => {
                                    if (typeof result === 'undefined') return;
                                    console.warn(`Hook on ${action.type} returned a value.`);
                                    console.dir(result);
                                }).catch(hookFnFail);
                            }
                        } catch (err) {
                            hookFnFail(err);
                        }
                    };
                    for (let [actionType, hookFn] of masterMap) {
                        if (typeof actionType === 'string') {
                            if (action.type === actionType) runHookFn(actionType, hookFn);
                        } else if (actionType instanceof RegExp) {
                            if (actionType.test(action.type)) runHookFn(actionType, hookFn);
                        }
                    }
                    return act;
                };
            };
        }

    }, {}],
    259: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = asyncGeneratorMiddleware;

        function asyncGeneratorMiddleware(store) {
            return next => action => {
                if (action.constructor.name !== 'AsyncGenerator') return next(action);
                let initAction = '';
                const iterateAsync = () => {
                    action.next().then(res => {
                        if (res.done) return;
                        const action = res.value;
                        if (!initAction) initAction = normalizeInitAction(action.type);
                        next(action);
                        iterateAsync();
                    }).catch(err => {
                        let errAction = initAction;
                        if (!errAction) errAction = 'APP';
                        console.error('AG Promise failure: ' + err);
                        console.dir(err);
                        next({
                            type: `${errAction}_FAIL`,
                            payload: err
                        });
                    });
                };
                iterateAsync();
            };
        }

        function normalizeInitAction(actionType) {
            if (actionType.endsWith('_INIT')) return actionType.slice(0, -5);
            return actionType;
        }

    }, {}],
    260: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const logger = (0, _logger2.default)('flux:middleware:logger');
        exports.default = store => next => action => {
            logger.debug(`dispatching: ${action.type}`);
            if (action.type && action.type.endsWith('_FAIL') && action.payload instanceof Error) {
                logger.error(action.payload);
            }
            let result = next(action);
            return result;
        };

    }, {
        "269": 269
    }],
    261: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _notifications = require(283);
        var _notifications2 = _interopRequireDefault(_notifications);
        var _currencyFormatters = require(211);
        var _notifications3 = require(106);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function getTotalAmount(_ref) {
            let {
                asset,
                txs
            } = _ref;
            const amount = txs.reduce((total, tx) => total.add(tx.coinAmount), asset.currency.ZERO);
            return (0, _currencyFormatters.formatStr)(amount);
        }

        function getIcon(_ref2) {
            let {
                asset
            } = _ref2;
            return `./img/logo-${asset.name}@2x.png`;
        }
        const notifications = {
            TX_RECEIVE(_ref3) {
                let {
                    asset,
                    txs
                } = _ref3;
                const icon = getIcon({
                    asset
                });
                const confirmed = txs.filter(tx => tx.confirmations && tx.confirmations > 0);
                if (confirmed.length > 0) {
                    (0, _notifications2.default)({
                        title: confirmed.length > 1 ? `${confirmed.length} transactions received` : 'Transaction received',
                        body: `${getTotalAmount({asset,txs:confirmed})} was received and confirmed`,
                        icon
                    });
                }
                const unconfirmed = lodash.difference(txs, confirmed);
                if (unconfirmed.length > 0) {
                    (0, _notifications2.default)({
                        title: unconfirmed.length > 1 ? `${unconfirmed.length} transactions received` : 'Transaction received',
                        body: `${getTotalAmount({asset,txs:unconfirmed})} was received`,
                        icon
                    });
                }
            },
            TX_RECEIVE_CONFIRMED(_ref4) {
                let {
                    asset,
                    txs
                } = _ref4;
                (0, _notifications2.default)({
                    title: txs.length > 1 ? `${txs.length} transactions confirmed` : `Transaction confirmed`,
                    body: `${getTotalAmount({asset,txs})} was confirmed`,
                    icon: getIcon({
                        asset
                    })
                });
            }
        };
        exports.default = (_ref5) => {
            let {
                getState
            } = _ref5;
            return next => action => {
                const notification = notifications[action.type];
                const isValidEvent = action.payload && action.payload.asset && action.payload.txs;
                const isEnabled = (0, _notifications3.txReceivedEnabled)(getState());
                if (notification && isValidEvent && isEnabled) notification(action.payload);
                return next(action);
            };
        };

    }, {
        "106": 106,
        "211": 211,
        "283": 283,
        "undefined": undefined
    }],
    262: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _static = require(305);
        var _audio = require(190);
        var _soundfx = require(303);
        exports.default = (_ref) => {
            let {
                dispatch,
                getState
            } = _ref;
            return next => action => {
                if (action.type in _soundfx.actions) {
                    let audio = _soundfx.actions[action.type];
                    if (typeof audio === 'function') audio = audio(getState());
                    if (audio)(0, _audio.playAudio)((0, _static.getAudioPaths)()[audio]);
                }
                return next(action);
            };
        };

    }, {
        "190": 190,
        "303": 303,
        "305": 305
    }],
    263: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.initialState = undefined;
        var _redux = require('redux');
        var _appState = require(150);
        var _appState2 = _interopRequireDefault(_appState);
        var _asyncGenerator = require(259);
        var _asyncGenerator2 = _interopRequireDefault(_asyncGenerator);
        var _actionHooks = require(258);
        var _logger = require(260);
        var _logger2 = _interopRequireDefault(_logger);
        var _notifications = require(261);
        var _notifications2 = _interopRequireDefault(_notifications);
        var _soundfx = require(262);
        var _soundfx2 = _interopRequireDefault(_soundfx);
        var _soundfx3 = require(256);
        var _soundfx4 = _interopRequireDefault(_soundfx3);
        var _reduxThunk = require('redux-thunk');
        var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
        var _hooks = require(24);
        var _hooks2 = _interopRequireDefault(_hooks);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const initialState = exports.initialState = {};
        exports.default = (0, _redux.createStore)(_appState2.default, initialState, (0, _redux.compose)((0, _redux.applyMiddleware)(_asyncGenerator2.default, _reduxThunk2.default, _logger2.default, _notifications2.default, _soundfx2.default, (0, _actionHooks.createActionHookMiddleware)(_hooks2.default)), (0, _soundfx4.default)()));

    }, {
        "150": 150,
        "24": 24,
        "256": 256,
        "258": 258,
        "259": 259,
        "260": 260,
        "261": 261,
        "262": 262,
        "undefined": undefined
    }],
    264: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FSA = FSA;
        exports.createFSAA = createFSAA;

        function FSA(type, payload) {
            let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return Object.assign({
                type,
                payload
            }, options);
        }

        function createFSAA(actionType, meta) {
            return {
                abort: payload => FSA(`${actionType}_ABORT`, payload, {
                    meta
                }),
                fail: err => FSA(`${actionType}_FAIL`, err, {
                    meta,
                    error: true
                }),
                init: payload => FSA(`${actionType}_INIT`, payload, {
                    meta
                }),
                success: payload => FSA(`${actionType}_SUCCESS`, payload, {
                    meta
                }),
                update: payload => FSA(`${actionType}_UPDATE`, payload, {
                    meta
                })
            };
        }

    }, {}],
    265: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        exports.orderTxs = orderTxs;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _urlJoin = require('url-join');
        var _urlJoin2 = _interopRequireDefault(_urlJoin);
        var _querystring = require('querystring');
        var _querystring2 = _interopRequireDefault(_querystring);
        var _lodash = require('lodash');
        var _verror = require('verror');
        var _verror2 = _interopRequireDefault(_verror);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        let InsightAPIClient = class InsightAPIClient {
            constructor(baseURL) {
                this._baseURL = baseURL;
            }
            isNetworkConnected() {
                var _this = this;
                return _asyncToGenerator(function*() {
                    let url = (0, _urlJoin2.default)(_this._baseURL, '/peer');
                    let resp = yield(0, _nodeFetch2.default)(url, {
                        timeout: 10000
                    });
                    let peerStatus = yield resp.json();
                    return !!peerStatus.connected;
                })();
            }
            fetchAddress(address) {
                var _arguments = arguments,
                    _this2 = this;
                return _asyncToGenerator(function*() {
                    let opts = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {
                        includeTxs: false
                    };
                    let url = (0, _urlJoin2.default)(_this2._baseURL, opts.includeTxs ? `/addr/${address}` : `/addr/${address}?noTxList=1`);
                    let response = yield(0, _nodeFetch2.default)(url);
                    return response.json();
                })();
            }
            fetchUTXOs(addresses) {
                var _this3 = this;
                return _asyncToGenerator(function*() {
                    if (Array.isArray(addresses)) addresses = addresses.join(',');
                    let url = (0, _urlJoin2.default)(_this3._baseURL, `/addrs/${addresses}/utxo?noCache=1`);
                    let response = yield(0, _nodeFetch2.default)(url);
                    let utxos = yield response.json();
                    return utxos.map(function(utxo) {
                        return {
                            address: utxo.address,
                            txId: utxo.txid,
                            confirmations: utxo.confirmations || 0,
                            value: utxo.amount,
                            vout: utxo.vout,
                            height: utxo.height,
                            script: null
                        };
                    });
                })();
            }
            fetchTx(txId) {
                var _this4 = this;
                return _asyncToGenerator(function*() {
                    let url = (0, _urlJoin2.default)(_this4._baseURL, `/tx/${txId}`);
                    let response = yield(0, _nodeFetch2.default)(url);
                    let txText = yield response.text();
                    if (txText.trim() === 'Not found') throw new Error(`TX_NOT_FOUND: ${txId} not found on ${_this4._baseURL}.`);
                    return JSON.parse(txText);
                })();
            }
            fetchTxData(addresses) {
                var _arguments2 = arguments,
                    _this5 = this;
                return _asyncToGenerator(function*() {
                    let options = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {};
                    options = Object.assign({
                        noScriptSig: 1,
                        noAsm: 1,
                        noSpent: 0,
                        from: 0,
                        to: 10
                    }, options);
                    let url = (0, _urlJoin2.default)(_this5._baseURL, `/addrs/txs`);
                    url = `${url}?${_querystring2.default.stringify(options)}`;
                    const fetchOptions = {
                        method: 'post',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addrs: addresses.join(',')
                        })
                    };
                    const response = yield(0, _nodeFetch2.default)(url, fetchOptions);
                    const data = yield response.json();
                    return data;
                })();
            }
            broadcastTx(rawTx) {
                var _this6 = this;
                return _asyncToGenerator(function*() {
                    console.log('gonna broadcastTx');
                    let url = (0, _urlJoin2.default)(_this6._baseURL, '/tx/send');
                    let fetchOptions = {
                        method: 'post',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            rawtx: rawTx
                        })
                    };
                    let response = yield(0, _nodeFetch2.default)(url, fetchOptions);
                    let data = yield response.text();
                    try {
                        data = JSON.parse(data);
                    } catch (err) {
                        console.error('Insight Broadcast JSON Parse Error:');
                        console.error(err);
                        console.error(data);
                        throw (0, _verror2.default)(err, `data: ${data}`);
                    }
                    if (!data.txid) throw new Error('transaction id was not returned');
                })();
            }
        };
        exports.default = InsightAPIClient;

        function orderTxs(txs) {
            if (txs.length === 1) return [...txs];
            const txMap = {};
            txs.forEach(tx => {
                txMap[tx.txid] = tx;
            });
            const txTimesMap = (0, _lodash.groupBy)(Object.values(txMap), tx => tx.time);
            const txTimes = Object.keys(txTimesMap);
            txTimes.sort((a, b) => ~~a - ~~b);
            let rettxs = [];
            txTimes.forEach(txTime => {
                let txsAtTime = txTimesMap[txTime];
                if (!Array.isArray(txsAtTime)) return;
                if (txsAtTime.length === 1) return rettxs.push(txsAtTime[0]);
                let txOrderCol = [];
                for (let i = 0; i < txsAtTime.length; ++i) {
                    txOrderCol.push({
                        txid: txsAtTime[i].txid,
                        order: i
                    });
                }
                const txsAtTimeClone = txsAtTime.slice(0);
                while (txsAtTime.length > 0) {
                    let tx = txsAtTime.shift();
                    let maxOrder = 0;
                    tx.vin.forEach(vin => {
                        let txOrderMatch = txOrderCol.find(opair => opair.txid === vin.txid);
                        if (txOrderMatch && txOrderMatch.order > maxOrder) maxOrder = txOrderMatch.order;
                    });
                    txOrderCol.find(opair => opair.txid === tx.txid).order = maxOrder + 1;
                }
                let baseTime = ~~txTime;
                const newWorldOrder = (0, _lodash.sortBy)(txOrderCol, ['order']);
                newWorldOrder.forEach((opair, i) => {
                    let txid = opair.txid;
                    let tx = txsAtTimeClone.find(tx => tx.txid === txid);
                    (0, _assert2.default)(tx, 'InsightAPIClient.orderTxs() tx undefined.');
                    tx.time = baseTime + i;
                    rettxs.push(tx);
                });
            });
            return rettxs;
        }

    }, {
        "undefined": undefined
    }],
    266: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _events = require('events');
        var _socket = require('socket.io-client');
        var _socket2 = _interopRequireDefault(_socket);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let InsightWSClient = class InsightWSClient extends _events.EventEmitter {
            constructor(url) {
                super();
                this.url = url;
            }
            connect(options) {
                const socket = this.socket = (0, _socket2.default)(this.url, options);
                socket.on('connect', () => {
                    socket.emit('subscribe', 'inv');
                });
                socket.on('tx', data => {
                    this.emit('tx', data);
                });
                return this;
            }
            disconnect() {
                this.socket.disconnect();
                return this;
            }
        };
        exports.default = InsightWSClient;

    }, {
        "undefined": undefined
    }],
    267: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = isDebug;
        var _isElectronRenderer = require('is-electron-renderer');
        var _isElectronRenderer2 = _interopRequireDefault(_isElectronRenderer);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let _isDebug;

        function isDebug() {
            if (typeof _isDebug === 'boolean') return _isDebug;
            if (_isElectronRenderer2.default) {
                _isDebug = require('electron').remote.getGlobal('DEBUG');
                return _isDebug;
            } else {
                return global.DEBUG;
            }
        }

    }, {
        "undefined": undefined
    }],
    268: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.addListener = addListener;
        const listeners = [];

        function addListener(listener) {
            listeners.push(listener);
        }
        let online = exports.online = true;

        function setOnline(value) {
            if (online === value) return;
            exports.online = online = value;
            for (let listener of listeners) listener();
        }
        if (typeof window !== 'undefined') {
            window.addEventListener('offline', () => setOnline(false));
            window.addEventListener('online', () => {
                runIsOnlineCheck();
            });
        }

        function runIsOnlineCheck() {
            setOnline(true);
        }
        runIsOnlineCheck();

    }, {}],
    269: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createLogger;
        exports.createBaseLogger = createBaseLogger;
        var _cfs = require('cfs');
        var _cfs2 = _interopRequireDefault(_cfs);
        var _env = require(219);
        var _fastJsonParse = require('fast-json-parse');
        var _fastJsonParse2 = _interopRequireDefault(_fastJsonParse);
        var _isElectronRenderer = require('is-electron-renderer');
        var _isElectronRenderer2 = _interopRequireDefault(_isElectronRenderer);
        var _isDebug = require(267);
        var _isDebug2 = _interopRequireDefault(_isDebug);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _appConfig = require(80);
        var _pino = require('pino');
        var _pino2 = _interopRequireDefault(_pino);
        var _stackUtils = require('stack-utils');
        var _stackUtils2 = _interopRequireDefault(_stackUtils);
        var _through = require('through2');
        var _through2 = _interopRequireDefault(_through);
        var _ymd2 = require('ymd');
        var _ymd3 = _interopRequireDefault(_ymd2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        try {
            var {
                ipcMain,
                ipcRenderer,
                remote
            } = require('electron');
        } catch (e) {}
        const stack = new _stackUtils2.default({
            cwd: process.cwd(),
            internals: _stackUtils2.default.nodeInternals()
        });
        let baseLogger = null;
        let mainLogger = null;
        let rendLogger = null;
        if (!_isElectronRenderer2.default) {
            baseLogger = createBaseLogger();
            mainLogger = hookWriteCleanErr(baseLogger.child({
                main: true,
                env: shortEnv(),
                dbg: (0, _isDebug2.default)()
            }));
            rendLogger = hookWriteCleanErr(baseLogger.child({
                main: false,
                env: shortEnv(),
                dbg: (0, _isDebug2.default)()
            }));
            if (process.type === 'browser') {
                ipcMain.on('log', (_ref, _ref2) => {
                    let {
                        sender
                    } = _ref;
                    let {
                        level,
                        obj,
                        msg,
                        namespace,
                        opts,
                        title,
                        pid
                    } = _ref2;
                    if (!level) return;
                    if (level === 'error') {
                        var err = new Error();
                        err.message = obj.message;
                        err.stack = obj.stack;
                        obj = err;
                    }
                    rendLogger.child({
                        namespace,
                        title,
                        pid
                    })[level](obj, msg);
                });
            }
        }

        function createLogger(namespace) {
            let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (!_isElectronRenderer2.default) {
                return hookWriteCleanErr(mainLogger.child({
                    namespace
                }));
            } else {
                let title = remote.getCurrentWindow().getTitle();
                let pid = process.pid;
                return {
                    info: (obj, msg) => ipcRenderer.send('log', {
                        level: 'info',
                        obj,
                        msg,
                        namespace,
                        opts,
                        title,
                        pid
                    }),
                    error: (obj, msg) => ipcRenderer.send('log', {
                        level: 'error',
                        obj: errSerialize(obj),
                        msg,
                        namespace,
                        opts,
                        title,
                        pid
                    }),
                    fatal: (obj, msg) => ipcRenderer.send('log', {
                        level: 'fatal',
                        obj,
                        msg,
                        namespace,
                        opts,
                        title,
                        pid
                    }),
                    debug: (obj, msg) => ipcRenderer.send('log', {
                        level: 'debug',
                        obj,
                        msg,
                        namespace,
                        opts,
                        title,
                        pid
                    })
                };
            }
        }

        function createBaseLogger() {
            const getPath = () => {
                const _ymd = (0, _ymd3.default)();
                const logDir = _path2.default.join((0, _env.dataDir)(), 'syslog', _ymd.year, _ymd.month, _ymd.ymd + '.ndjson');
                return logDir;
            };
            process.stdout.isTTY = true;
            let pretty = _pino2.default.pretty();
            pretty.pipe(process.stdout);
            const logWriter = _cfs2.default.createWriteStream(getPath, {
                flags: 'a'
            });
            const throughStream = _through2.default.obj((chunk, enc, next) => {
                let parsed = new _fastJsonParse2.default(chunk);
                if (parsed.err) return next(null, chunk);
                next(null, chunk);
            });
            throughStream.pipe(logWriter);
            const logger = (0, _pino2.default)({
                name: `Exodus-${_appConfig.PACKAGE.version}`,
                safe: true,
                level: (0, _isDebug2.default)() ? 30 : 20
            }, throughStream);
            return logger;
        }

        function errSerialize(err) {
            return {
                type: err.constructor.name,
                message: err.message,
                stack: err.stack
            };
        }

        function shortEnv() {
            if (_appConfig.ENV_DEV) return 'dev';
            if (_appConfig.ENV_PROD) return 'prod';
            return "production";
        }

        function hookWriteCleanErr(pinoLogger) {
            const oldWrite = pinoLogger.write.bind(pinoLogger);
            pinoLogger.write = function(obj, msg, num) {
                if (obj instanceof Error) obj.stack = stack.clean(obj.stack);
                return oldWrite(obj, msg, num);
            };
            return pinoLogger;
        }

    }, {
        "219": 219,
        "267": 267,
        "80": 80,
        "undefined": undefined
    }],
    270: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MARKET_PROVIDERS = undefined;
        var _coinmarketcap = require(271);
        var _coinmarketcap2 = _interopRequireDefault(_coinmarketcap);
        var _cryptocompare = require(272);
        var _cryptocompare2 = _interopRequireDefault(_cryptocompare);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const MARKET_PROVIDERS = exports.MARKET_PROVIDERS = {
            coinmarketcap: _coinmarketcap2.default,
            cryptocompare: _cryptocompare2.default
        };
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(provider, fiat) {
                return MARKET_PROVIDERS[provider](fiat);
            });
            return function(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "271": 271,
        "272": 272
    }],
    271: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _coinmarketcap = require('coinmarketcap');
        var coinmarketcap = _interopRequireWildcard(_coinmarketcap);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const assetBySymbol = lodash.keyBy(_assets2.default, 'displayUnit');
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(fiat) {
                const data = yield coinmarketcap.ticker({
                    convert: fiat,
                    limit: 200
                });
                const prices = data.reduce(function(obj, item) {
                    const asset = assetBySymbol[item.symbol];
                    if (asset) {
                        obj[asset.name] = {
                            USD: Number.parseFloat(item.price_usd),
                            [fiat]: Number.parseFloat(item[`price_${fiat.toLowerCase()}`])
                        };
                    }
                    return obj;
                }, {});
                prices.bcash = prices.bcashclaim = prices.bcash || prices.bcashclaim;
                return prices;
            });
            return function(_x) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "184": 184,
        "undefined": undefined
    }],
    272: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _cryptocompare = require('cryptocompare');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const assetBySYM = lodash.keyBy(_assets2.default, 'displayUnit');
        const FSYMS = Object.keys(assetBySYM);
        exports.default = (() => {
            var _ref = _asyncToGenerator(function*(fiat) {
                const data = yield(0, _cryptocompare.priceMulti)(FSYMS, ['USD', fiat]);
                const prices = Object.keys(data).reduce(function(obj, key) {
                    return Object.assign(obj, {
                        [assetBySYM[key].name]: {
                            USD: data[key].USD,
                            [fiat]: data[key][fiat]
                        }
                    });
                }, {});
                prices.bcash = prices.bcashclaim;
                return prices;
            });
            return function(_x) {
                return _ref.apply(this, arguments);
            };
        })();

    }, {
        "184": 184,
        "undefined": undefined
    }],
    273: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(fn, resolver, options) {
            const cache = new _lruCache2.default(options);
            return function() {
                const key = resolver(...arguments);
                if (!cache.has(key)) {
                    cache.set(key, fn(...arguments));
                }
                return cache.get(key);
            };
        };
        var _lruCache = require('lru-cache');
        var _lruCache2 = _interopRequireDefault(_lruCache);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

    }, {
        "undefined": undefined
    }],
    274: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _location = require(275);
        Object.defineProperty(exports, 'getWalletPath', {
            enumerable: true,
            get: function() {
                return _location.getWalletPath;
            }
        });
        var _wallet = require(277);
        Object.defineProperty(exports, 'ensureWallet', {
            enumerable: true,
            get: function() {
                return _wallet.ensureWallet;
            }
        });
        Object.defineProperty(exports, 'refreshWallet', {
            enumerable: true,
            get: function() {
                return _wallet.refreshWallet;
            }
        });
        Object.defineProperty(exports, 'startRPC', {
            enumerable: true,
            get: function() {
                return _wallet.startRPC;
            }
        });
        var _rpc = require(276);
        Object.defineProperty(exports, 'walletRPC', {
            enumerable: true,
            get: function() {
                return _rpc.walletRPC;
            }
        });

    }, {
        "275": 275,
        "276": 276,
        "277": 277
    }],
    275: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ensureWalletPath = exports.getSimpleWalletPath = undefined;
        let getSimpleWalletPath = exports.getSimpleWalletPath = (() => {
            var _ref = _asyncToGenerator(function*() {
                let binMonero = _path2.default.join(__dirname, '..', '..', '..', 'static', 'bin', 'monero');
                return new Promise(function(resolve, reject) {
                    _fs2.default.readdir(binMonero, function(err, directories) {
                        if (err) return reject(err);
                        let platform = getSimpleWalletPlatform();
                        for (let directory of directories) {
                            if (directory.includes(platform)) {
                                let exec = `simplewallet${platform==='win'?'.exe':''}`;
                                return resolve(_path2.default.join(binMonero, directory, exec));
                            }
                        }
                        reject(new Error("Can't find path to simplewallet"));
                    });
                });
            });
            return function getSimpleWalletPath() {
                return _ref.apply(this, arguments);
            };
        })();
        let ensureWalletPath = exports.ensureWalletPath = (() => {
            var _ref2 = _asyncToGenerator(function*(directory) {
                return new Promise(function(resolve, reject) {
                    let location = getWalletPath(directory);
                    _fsExtra2.default.ensureDir(_path2.default.dirname(location), function(err) {
                        if (err) reject(err);
                        else resolve(location);
                    });
                });
            });
            return function ensureWalletPath(_x) {
                return _ref2.apply(this, arguments);
            };
        })();
        exports.getWalletDir = getWalletDir;
        exports.getWalletPath = getWalletPath;
        exports.getLogPath = getLogPath;
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _fs = require('fs');
        var _fs2 = _interopRequireDefault(_fs);
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _env = require(219);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function getSimpleWalletPlatform() {
            if (process.platform === 'darwin') return 'mac';
            if (process.platform === 'linux') return 'linux';
            if (process.platform.startsWith('win')) return 'win';
            throw new Error(`Unknow platform: ${process.platform}`);
        }

        function getWalletDir() {
            return _path2.default.join((0, _env.dataDir)(), 'monero-simplewallet');
        }

        function getWalletPath(directory) {
            return _path2.default.join(directory || getWalletDir(), 'exodus');
        }

        function getLogPath(directory) {
            return _path2.default.join(directory || getWalletDir(), 'simplewallet.log');
        }

    }, {
        "219": 219,
        "undefined": undefined
    }],
    276: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.walletRPC = walletRPC;
        var _http = require('http');
        var _http2 = _interopRequireDefault(_http);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let id = 0;

        function walletRPC(networkOptions, method, params) {
            let body = JSON.stringify({
                jsonrpc: '2.0',
                id: id++,
                method: method,
                params: params || {}
            });
            return new Promise((resolve, reject) => {
                let options = {
                    hostname: networkOptions.hostname,
                    port: networkOptions.port,
                    path: '/json_rpc',
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(body, 'utf8')
                    }
                };
                let req = _http2.default.request(options, res => {
                    let data = '';
                    res.setEncoding('utf8');
                    res.on('data', chunk => {
                        data += chunk;
                    });
                    res.on('end', () => {
                        try {
                            let body = JSON.parse(data);
                            body.result ? resolve(body.result) : reject(body.error);
                        } catch (err) {
                            reject(err);
                        }
                    });
                });
                req.on('error', e => reject(e));
                req.write(body);
                req.end();
            });
        }

    }, {
        "undefined": undefined
    }],
    277: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ensureWallet = exports.isWalletKeys = exports.createWallet = undefined;
        let createWallet = exports.createWallet = (() => {
            var _ref = _asyncToGenerator(function*(spendKey, viewKey, directory) {
                let swexec = yield(0, _location.getSimpleWalletPath)();
                let wpath = yield(0, _location.ensureWalletPath)(directory);
                let args = ['--log-file', (0, _location.getLogPath)(directory), '--password', getWalletPassword(spendKey, viewKey), '--generate-from-keys', wpath];
                return new Promise(function(resolve, reject) {
                    let exe = (0, _child_process.spawn)(swexec, args, {
                        detached: true
                    });
                    exe.unref();
                    startKiller(exe);
                    exe.stdout.pipe(process.stderr);
                    exe.stderr.pipe(process.stderr);
                    exe.on('error', reject);
                    exe.on('exit', function(code, signal) {
                        if (code === 0 && signal === null) resolve();
                        else reject(new Error(`simplewallet terminated with code: ${code}, signal: ${signal}`));
                    });
                    let ss = _suppose2.default.stream(process.stderr).when(/Standard address:/).respond(`${getWalletPublicAddress(spendKey,viewKey)}\n`).when(/Spend key:/).respond(`${spendKey.toString('hex')}\n`).when(/View key:/).respond(`${viewKey.toString('hex')}\n`).when(/\[wallet/).respond('save\n').when(/\[wallet/).respond('exit\n');
                    ss.write('');
                    exe.stdout.pipe(ss).pipe(exe.stdin);
                });
            });
            return function createWallet(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            };
        })();
        let isWalletKeys = exports.isWalletKeys = (() => {
            var _ref2 = _asyncToGenerator(function*(spendKey, viewKey, directory) {
                let swexec = yield(0, _location.getSimpleWalletPath)();
                let wpath = yield(0, _location.ensureWalletPath)(directory);
                let args = ['--log-file', (0, _location.getLogPath)(directory), '--wallet-file', wpath, '--password', getWalletPassword(spendKey, viewKey), '--command', 'address'];
                return new Promise(function(resolve, reject) {
                    let outdata = '';

                    function ondata(buffer) {
                        process.stderr.write(buffer);
                        outdata += buffer.toString();
                    }
                    let exe = (0, _child_process.spawn)(swexec, args, {
                        detached: true
                    });
                    exe.unref();
                    startKiller(exe);
                    exe.stdout.on('data', ondata);
                    exe.stderr.on('data', ondata);
                    exe.on('error', reject);
                    exe.on('exit', function(code, signal) {
                        if (code !== 0) return reject(new Error(`simplewallet terminated with code: ${code}, signal: ${signal}`));
                        let isWalletKeys = new RegExp(getWalletPublicAddress(spendKey, viewKey));
                        if (isWalletKeys.exec(outdata) !== null) return resolve();
                        reject(new Error('This wallet not container received keys.'));
                    });
                });
            });
            return function isWalletKeys(_x4, _x5, _x6) {
                return _ref2.apply(this, arguments);
            };
        })();
        let ensureWallet = exports.ensureWallet = (() => {
            var _ref3 = _asyncToGenerator(function*(spendKey, viewKey, directory) {
                let wpath = yield(0, _location.ensureWalletPath)(directory);
                let exists = yield new Promise(function(resolve, reject) {
                    _fs2.default.stat(wpath, function(err, stats) {
                        if (!err) return resolve(true);
                        if (err.code === 'ENOENT') return resolve(false);
                        reject(err);
                    });
                });
                if (exists) return isWalletKeys(spendKey, viewKey, directory);
                return createWallet(spendKey, viewKey, directory);
            });
            return function ensureWallet(_x7, _x8, _x9) {
                return _ref3.apply(this, arguments);
            };
        })();
        exports.refreshWallet = refreshWallet;
        exports.startRPC = startRPC;
        var _child_process = require('child_process');
        var _fs = require('fs');
        var _fs2 = _interopRequireDefault(_fs);
        var _path = require('path');
        var _events = require('events');
        var _suppose = require('suppose');
        var _suppose2 = _interopRequireDefault(_suppose);
        var _monerojsUtil = require(281);
        var moneroUtil = _interopRequireWildcard(_monerojsUtil);
        var _location = require(275);
        var _rpc = require(276);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const killerPath = (0, _path.join)(__dirname, 'killer.js');

        function startKiller(child) {
            let proc = (0, _child_process.fork)(killerPath, [process.pid, child.pid], {
                silent: true
            });
            proc.stdout.pipe(process.stderr);
            proc.stderr.pipe(process.stderr);
        }

        function getWalletPublicAddress(spendKey, viewKey) {
            let pkSpendKey = moneroUtil.crypto.createECPublicKey(spendKey);
            let pkViewKey = moneroUtil.crypto.createECPublicKey(viewKey);
            return moneroUtil.address.create(pkSpendKey, pkViewKey);
        }

        function getWalletPassword(spendKey, viewKey) {
            let data = Buffer.concat([spendKey, viewKey]);
            return moneroUtil.crypto.keccak256(data).toString('hex');
        }

        function refreshWallet(spendKey, viewKey, directory) {
            let emitter = new _events.EventEmitter();
            emitter.process = null;
            _asyncToGenerator(function*() {
                let swexec = yield(0, _location.getSimpleWalletPath)();
                let wpath = yield(0, _location.ensureWalletPath)(directory);
                let args = ['--log-file', (0, _location.getLogPath)(directory), '--wallet-file', wpath, '--password', getWalletPassword(spendKey, viewKey), '--command', 'refresh', '--daemon-address', '198.46.230.6:18081'];

                function ondata(buffer) {
                    let string = buffer.toString();
                    process.stderr.write(`Monero simplewallet refresh: ${string}`);
                    let result = /(\d+) \/ (\d+)/.exec(string);
                    if (result === null) return null;
                    emitter.emit('progress', parseInt(result[1], 10), parseInt(result[2], 10));
                }
                let exe = (0, _child_process.spawn)(swexec, args, {
                    detached: true
                });
                exe.unref();
                startKiller(exe);
                emitter.kill = function() {
                    return exe.kill('SIGTERM');
                };
                process.once('beforeExit', emitter.kill);
                exe.stdout.on('data', ondata);
                exe.stderr.on('data', ondata);
                exe.on('error', emitter.emit.bind(emitter, 'error'));
                exe.on('exit', emitter.emit.bind(emitter, 'exit'));
            })().catch(err => {
                emitter.emit('error', err);
                emitter.emit('exit', -1, null);
            });
            return emitter;
        }

        function startRPC(spendKey, viewKey, directory) {
            let emitter = new _events.EventEmitter();
            emitter.process = null;
            emitter.rpcNetworkOptions = {
                hostname: 'localhost',
                port: 18082
            };
            _asyncToGenerator(function*() {
                let isReadyTest = (() => {
                    var _ref6 = _asyncToGenerator(function*() {
                        let data;
                        try {
                            data = yield(0, _rpc.walletRPC)(emitter.rpcNetworkOptions, 'getaddress');
                        } catch (err) {
                            if (err.code !== 'ECONNREFUSED') emitter.emit('error', err);
                            return setTimeout(isReadyTest, 50);
                        }
                        if (data.address !== getWalletPublicAddress(spendKey, viewKey)) {
                            emitter.emit('error', 'Got invalid address from wallet');
                            exe.kill('SIGTERM');
                        } else {
                            emitter.emit('ready');
                        }
                    });
                    return function isReadyTest() {
                        return _ref6.apply(this, arguments);
                    };
                })();
                let walletPassword = getWalletPassword(spendKey, viewKey);
                let swexec = yield(0, _location.getSimpleWalletPath)();
                let wpath = yield(0, _location.ensureWalletPath)(directory);
                let args = ['--log-file', (0, _location.getLogPath)(directory), '--wallet-file', wpath, '--password', walletPassword, '--rpc-bind-port', '18082', '--daemon-address', '198.46.230.6:18081'];
                let exe = (0, _child_process.spawn)(swexec, args, {
                    detached: true
                });
                exe.unref();
                startKiller(exe);
                emitter.kill = function() {
                    return exe.kill('SIGTERM');
                };
                exe.on('error', emitter.emit.bind(emitter, 'error'));
                exe.on('exit', emitter.emit.bind(emitter, 'exit'));
                setTimeout(isReadyTest, 50);
            })().catch(err => {
                emitter.emit('error', err);
                emitter.emit('exit', -1, null);
            });
            return emitter;
        }

    }, {
        "275": 275,
        "276": 276,
        "281": 281,
        "undefined": undefined
    }],
    278: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.create = create;
        exports.isValid = isValid;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _bs = require(279);
        var bs58 = _interopRequireWildcard(_bs);
        var _crypto = require(280);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function create(spendKey, viewKey, paymentId) {
            let bytes;
            if (paymentId) {
                _assert2.default.equal(paymentId.length, 8);
                bytes = Buffer.concat([Buffer.from([0x13]), spendKey, viewKey, paymentId]);
            } else {
                bytes = Buffer.concat([Buffer.from([0x12]), spendKey, viewKey]);
            }
            let checkSum = (0, _crypto.keccak256)(bytes).slice(0, 4);
            return bs58.encode(Buffer.concat([bytes, checkSum]));
        }

        function isValid(address) {
            let buffer = bs58.decode(address);
            if (buffer[0] !== 0x12 && buffer[0] !== 0x13) return false;
            let checkSum = (0, _crypto.keccak256)(buffer.slice(0, -4)).slice(0, 4);
            if (!buffer.slice(-4).equals(checkSum)) return false;
            return true;
        }

    }, {
        "279": 279,
        "280": 280,
        "undefined": undefined
    }],
    279: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.encode = encode;
        exports.decode = decode;
        var _bs = require('bs58');
        var _bs2 = _interopRequireDefault(_bs);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const ENCODED_BLOCK_SIZES = [0, 2, 3, 5, 6, 7, 9, 10, 11];

        function encode(buffer) {
            let result = '';
            for (let offset = 0; offset < buffer.length; offset += 8) {
                let bytes = buffer.slice(offset, offset + 8);
                let t = _bs2.default.encode(bytes);
                for (let size = ENCODED_BLOCK_SIZES[bytes.length]; t.length < size; t = '1' + t);
                result += t;
            }
            return result;
        }

        function decode(data) {
            let buffers = [];
            for (let offset = 0; offset < data.length; offset += 11) {
                let t = data.slice(offset, offset + 11);
                let size = ENCODED_BLOCK_SIZES.indexOf(t.length);
                buffers.push(Buffer.from(_bs2.default.decode(t).slice(-size)));
            }
            return Buffer.concat(buffers);
        }

    }, {
        "undefined": undefined
    }],
    280: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ed25519 = undefined;
        exports.keccak256 = keccak256;
        exports.deriveKeys = deriveKeys;
        exports.reduceECKey = reduceECKey;
        exports.createECPrivateKey = createECPrivateKey;
        exports.createECPublicKey = createECPublicKey;
        exports.generateKeyDerivation = generateKeyDerivation;
        exports.derivePublicKey = derivePublicKey;
        exports.derivePrivateKey = derivePrivateKey;
        var _elliptic = require('elliptic');
        var _bn = require('bn.js');
        var _bn2 = _interopRequireDefault(_bn);
        var _browserifySha = require('browserify-sha3');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const ed = new _elliptic.eddsa('ed25519');
        const ed25519 = exports.ed25519 = ed;

        function keccak256(buffer) {
            return Buffer.from(new _browserifySha.SHA3Hash(256).update(buffer).digest('hex'), 'hex');
        }

        function deriveKeys(privKey) {
            let spendPrivateKey = reduceECKey(privKey);
            let spendPublicKey = createECPublicKey(spendPrivateKey);
            let viewPrivateKey = createECPrivateKey(spendPrivateKey);
            let viewPublicKey = createECPublicKey(viewPrivateKey);
            return {
                spend: {
                    priv: spendPrivateKey,
                    pub: spendPublicKey
                },
                view: {
                    priv: viewPrivateKey,
                    pub: viewPublicKey
                }
            };
        }

        function reduceECKey(buffer) {
            return new _bn2.default(buffer, 'le').umod(ed.curve.n).toArrayLike(Buffer, 'le', 32);
        }

        function createECPrivateKey(buffer) {
            return reduceECKey(keccak256(reduceECKey(buffer)));
        }

        function createECPublicKey(buffer) {
            let point = ed.curve.g.mul(new _bn2.default(buffer, 'le').umod(ed.curve.n));
            return Buffer.from(ed.encodePoint(point));
        }

        function generateKeyDerivation(pub, priv) {
            let point = ed.decodePoint(Array.from(pub)).mul(new _bn2.default(priv, 'le')).dbl().dbl().dbl();
            return Buffer.from(ed.encodePoint(point));
        }

        function derivePublicKey(derivation, outputIndex, pub) {}

        function derivePrivateKey(derivation, outputIndex, priv) {}

    }, {
        "undefined": undefined
    }],
    281: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.crypto = exports.bs58 = exports.address = undefined;
        var _address = require(278);
        var address = _interopRequireWildcard(_address);
        var _bs = require(279);
        var bs58 = _interopRequireWildcard(_bs);
        var _crypto = require(280);
        var crypto = _interopRequireWildcard(_crypto);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.address = address;
        exports.bs58 = bs58;
        exports.crypto = crypto;

    }, {
        "278": 278,
        "279": 279,
        "280": 280
    }],
    282: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = normalizeEthTxId;

        function normalizeEthTxId(txId) {
            if (txId.startsWith('0x')) return txId;
            else return '0x' + txId;
        }

    }, {}],
    283: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let {
                title,
                body,
                icon
            } = _ref;
            new window.Notification(title, {
                body,
                icon
            });
        };

    }, {}],
    284: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getTxValidity = exports.getTx = exports.getHistory = exports.getBalance = undefined;
        let request = (() => {
            var _ref = _asyncToGenerator(function*(method, queryParams) {
                const query = _querystring2.default.stringify(Object.assign({}, queryParams, {
                    api: method
                }));
                const url = 'https://omniexplorer.info/ask.aspx?' + query;
                const response = yield(0, _nodeFetch2.default)(url);
                if (response.status < 200 || response.status > 300) throw new Error(response.statusText);
                return response.text();
            });
            return function request(_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })();
        let getBalance = exports.getBalance = (() => {
            var _ref2 = _asyncToGenerator(function*(prop, address) {
                const response = yield request('getbalance', {
                    prop,
                    address
                });
                const balance = parseFloat(response);
                if (isNaN(balance)) throw new Error(`Invalid response: ${response}`);
                return balance;
            });
            return function getBalance(_x3, _x4) {
                return _ref2.apply(this, arguments);
            };
        })();
        let getHistory = exports.getHistory = (() => {
            var _ref3 = _asyncToGenerator(function*(address) {
                const response = yield request('gethistory_uncapped', {
                    address
                });
                const data = JSON.parse(response);
                if (data.address !== address) throw new Error(`Received history for another address`);
                return data.transactions;
            });
            return function getHistory(_x5) {
                return _ref3.apply(this, arguments);
            };
        })();
        let getTx = exports.getTx = (() => {
            var _ref4 = _asyncToGenerator(function*(txid) {
                const response = yield request('gettx', {
                    txid
                });
                return JSON.parse(`{${response}}`);
            });
            return function getTx(_x6) {
                return _ref4.apply(this, arguments);
            };
        })();
        let getTxValidity = exports.getTxValidity = (() => {
            var _ref5 = _asyncToGenerator(function*(txid) {
                const response = yield request('gettxvalidity', {
                    txid
                });
                switch (response) {
                    case 'True':
                        return true;
                    case 'False':
                        return false;
                    default:
                        throw new Error(`Invalid response: ${response}`);
                }
            });
            return function getTxValidity(_x7) {
                return _ref5.apply(this, arguments);
            };
        })();
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);
        var _querystring = require('querystring');
        var _querystring2 = _interopRequireDefault(_querystring);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

    }, {
        "undefined": undefined
    }],
    285: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _qrcodeReader = require('qrcode-reader');
        var _qrcodeReader2 = _interopRequireDefault(_qrcodeReader);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let _components = {};
        let ReactQRReader = (_temp = _class = class ReactQRReader extends _react2.default.Component {
            constructor(props) {
                super(props);
                let id = Date.now() + '-' + Math.random().toString().slice(2);
                this.state = {
                    id
                };
                _components[id] = {
                    videoStream: null,
                    sampler: null,
                    frame: null
                };
            }
            componentDidMount() {
                let {
                    width,
                    height,
                    scale
                } = computeWidthHeight(this.props);
                let lastSuccess = false;
                let context = this.refs.canvas.getContext('2d');
                let contextHidden = this.refs.canvasHidden.getContext('2d');
                contextHidden.scale(1 / scale, 1 / scale);
                navigator.mediaDevices.getUserMedia({
                    video: true
                }).then(videoStream => {
                    if (!videoStream.active) return this.props.onUnsupported();
                    _components[this.state.id].videoStream = videoStream;
                    this.refs.video.src = window.URL.createObjectURL(videoStream);
                    _components[this.state.id].sampler = setInterval(() => {
                        window.requestAnimationFrame(() => {
                            if (!this.refs.video) return;
                            context.drawImage(this.refs.video, 0, 0);
                            contextHidden.drawImage(this.refs.video, 0, 0);
                            if (!lastSuccess) {
                                context.strokeStyle = 'rgba(255,0,0,0.5)';
                            } else {
                                context.strokeStyle = 'rgba(0,255,0,0.5)';
                            }
                            drawRect({
                                width,
                                height,
                                context
                            });
                            var image = new window.Image();
                            image.onload = () => {
                                var qr = new _qrcodeReader2.default();
                                qr.callback = result => {
                                    if (result.startsWith('error')) {
                                        lastSuccess = false;
                                    } else {
                                        lastSuccess = true;
                                        this.props.onRead(result);
                                    }
                                };
                                qr.decode(image.src);
                            };
                            image.src = this.refs.canvasHidden.toDataURL();
                        });
                    }, 20);
                }).catch(er => {
                    console.error(er);
                });
            }
            componentWillUnmount() {
                let {
                    videoStream,
                    sampler
                } = _components[this.state.id];
                clearInterval(sampler);
                if (videoStream) streamStop(videoStream);
                let id = this.state.id;
                setTimeout(function() {
                    delete _components[id];
                }, 100);
            }
            render() {
                let {
                    width,
                    height
                } = computeWidthHeight(this.props);
                let style = {
                    height: height + 'px',
                    width: width + 'px'
                };
                return _react2.default.createElement('div', {
                    className: 'react-qr-reader',
                    style: style
                }, _react2.default.createElement('canvas', {
                    ref: 'canvas',
                    width: width,
                    height: height,
                    style: {
                        transform: 'scale(-1, 1)'
                    }
                }), _react2.default.createElement('video', {
                    ref: 'video',
                    autoPlay: true,
                    style: {
                        display: 'none'
                    }
                }), _react2.default.createElement('canvas', {
                    ref: 'canvasHidden',
                    width: '320',
                    height: '240',
                    style: {
                        display: 'none'
                    }
                }));
            }
        }, _class.propTypes = {
            onRead: _propTypes2.default.func,
            scale: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
        }, _class.defaultProps = {
            onRead: () => {}
        }, _temp);
        exports.default = ReactQRReader;

        function computeWidthHeight(props) {
            let scale = parseFloat(props.scale) || 1.5;
            let height = scale * 240;
            let width = scale * 320;
            return {
                width,
                height,
                scale
            };
        }

        function drawRect(_ref) {
            let {
                width,
                height,
                context
            } = _ref;
            let bw = width * 0.725;
            let bh = height * 0.8;
            let bx = width - bw;
            let by = height - bh;
            bw = bw - bx;
            bh = bh - by;
            context.strokeRect(bx, by, bw, bh);
            context.lineWidth = 10;
        }

        function streamStop(stream) {
            stream.getVideoTracks().forEach(track => track.stop());
        }

    }, {
        "undefined": undefined
    }],
    286: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _qrImage = require('qr-image');
        var _qrImage2 = _interopRequireDefault(_qrImage);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let ReactQR = (_temp = _class = class ReactQR extends _react2.default.Component {
            render() {
                const pngBuffer = _qrImage2.default.imageSync(this.props.text, {
                    type: 'png',
                    margin: 1
                });
                const dataURI = 'data:image/png;base64,' + pngBuffer.toString('base64');
                return _react2.default.createElement('img', {
                    className: 'react-qr',
                    src: dataURI
                });
            }
        }, _class.propTypes = {
            text: _propTypes2.default.string.isRequired
        }, _temp);
        exports.default = ReactQR;

    }, {
        "undefined": undefined
    }],
    287: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isNumberUnitOrUndefined = exports.isNumberUnit = undefined;
        var _aureus = require(192);
        const isNumberUnit = exports.isNumberUnit = (props, propName) => (0, _aureus.isNumberUnit)(props[propName]) ? null : new Error(`${propName} must be a NumberUnit.`);
        const isNumberUnitOrUndefined = exports.isNumberUnitOrUndefined = (props, propName) => {
            return (0, _aureus.isNumberUnit)(props[propName]) ? null : typeof props[propName] === 'undefined' ? null : new Error(`${propName} must be a NumberUnit or undefined.`);
        };

    }, {
        "192": 192
    }],
    288: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createAction;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _util = require(264);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function createAction(action, meta, initPayload, fn) {
            if (typeof meta === 'function') return createAction(action, {}, {}, meta);
            if (typeof initPayload === 'function') return createAction(action, meta, {}, initPayload);
            _assert2.default.strictEqual(typeof fn, 'function', 'Must pass function to redux-async-action.');
            return (() => {
                var _ref = _asyncToGenerator(function*(dispatch, getState) {
                    const fsaa = (0, _util.createFSAA)(action, meta);
                    const abort = function() {
                        return dispatch(fsaa.abort(...arguments));
                    };
                    const fail = function() {
                        return dispatch(fsaa.fail(...arguments));
                    };
                    const init = function() {
                        return dispatch(fsaa.init(...arguments));
                    };
                    const success = function() {
                        return dispatch(fsaa.success(...arguments));
                    };
                    const update = function() {
                        return dispatch(fsaa.update(...arguments));
                    };
                    init(initPayload);
                    try {
                        yield fn(dispatch, getState, {
                            abort,
                            fail,
                            success,
                            update
                        });
                    } catch (err) {
                        fail(err);
                    }
                });
                return function(_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })();
        }

    }, {
        "264": 264,
        "undefined": undefined
    }],
    289: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = bindActionCreators;

        function bindActionCreator(actionCreator, dispatch) {
            return function() {
                return dispatch(actionCreator(...arguments));
            };
        }

        function bindActionCreators(actionCreators, dispatch) {
            if (typeof actionCreators === 'function') {
                return bindActionCreator(actionCreators, dispatch);
            }
            if (typeof actionCreators !== 'object' || actionCreators === null) {
                throw new Error(`bindActionCreators expected an object or a function, instead received ${actionCreators===null?'null':typeof actionCreators}. ` + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
            }
            var keys = Object.keys(actionCreators);
            var boundActionCreators = {};
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var actionCreator = actionCreators[key];
                if (typeof actionCreator === 'function') {
                    boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
                } else if (typeof actionCreator === 'object') {
                    boundActionCreators[key] = bindActionCreators(actionCreator, dispatch);
                }
            }
            return boundActionCreators;
        }

    }, {}],
    290: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sendTx = exports.getLedgerCurrentIndex = exports.getAccountInfo = exports.getTransactions = exports.getFee = undefined;
        let getFee = exports.getFee = (() => {
            var _ref2 = _asyncToGenerator(function*() {
                const data = yield request({
                    method: 'server_info'
                });
                const baseFeeXRP = lodash.get(data, 'result.info.validated_ledger.base_fee_xrp');
                const loadFactor = 25;
                const fee = Math.ceil(baseFeeXRP * 1e6 * loadFactor * 1.2);
                const isValidFee = Number.isFinite(fee) && fee > 0;
                if (!isValidFee) throw new Error('Invalid fee');
                return fee;
            });
            return function getFee() {
                return _ref2.apply(this, arguments);
            };
        })();
        let getTransactions = exports.getTransactions = (() => {
            var _ref3 = _asyncToGenerator(function*(address) {
                let {
                    fromLedger = 1
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                const minLedgerVersion = Math.max(50000, fromLedger);
                const params = [{
                    account: address,
                    ledger_index_min: minLedgerVersion,
                    forward: true
                }];
                const data = yield request({
                    method: 'account_tx',
                    params
                });
                return lodash.chain(data).get('result.transactions').filter({
                    validated: true
                }).value();
            });
            return function getTransactions(_x3) {
                return _ref3.apply(this, arguments);
            };
        })();
        let getAccountInfo = exports.getAccountInfo = (() => {
            var _ref4 = _asyncToGenerator(function*(address) {
                const params = [{
                    account: address,
                    strict: true
                }];
                const data = yield request({
                    method: 'account_info',
                    params
                });
                let {
                    Balance: balance,
                    Sequence: sequence
                } = lodash.get(data, 'result.account_data', {});
                if (lodash.get(data, 'result.error') === 'actNotFound') {
                    [balance, sequence] = [_assets2.default.ripple.currency.ZERO, 1];
                }
                return {
                    balance,
                    sequence
                };
            });
            return function getAccountInfo(_x4) {
                return _ref4.apply(this, arguments);
            };
        })();
        let getLedgerCurrentIndex = exports.getLedgerCurrentIndex = (() => {
            var _ref5 = _asyncToGenerator(function*() {
                const data = yield request({
                    method: 'ledger_current'
                });
                return lodash.get(data, 'result.ledger_current_index');
            });
            return function getLedgerCurrentIndex() {
                return _ref5.apply(this, arguments);
            };
        })();
        let sendTx = exports.sendTx = (() => {
            var _ref6 = _asyncToGenerator(function*(hex) {
                const response = yield request({
                    method: 'submit',
                    params: [{
                        tx_blob: hex.toUpperCase()
                    }]
                });
                const hash = (0, _tx.getHash)(Buffer.from(hex, 'hex'));
                for (let i = 0; i < 20; ++i) {
                    yield(0, _delay2.default)((0, _ms2.default)('500ms'));
                    const response = yield request({
                        method: 'tx',
                        params: [{
                            transaction: hash
                        }]
                    });
                    if (lodash.get(response, 'result.status') === 'success' && lodash.get(response, 'result.hash') === hash) return;
                }
                if (lodash.get(response, 'result.status') === 'error') {
                    const fields = ['error_message', 'error_exception', 'error'];
                    for (const field of fields) {
                        const message = lodash.get(response, `result.${field}`);
                        if (message) throw new Error(message);
                    }
                }
                throw new Error('Unexpected response');
            });
            return function sendTx(_x5) {
                return _ref6.apply(this, arguments);
            };
        })();
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _makeConcurrent = require('make-concurrent');
        var _makeConcurrent2 = _interopRequireDefault(_makeConcurrent);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _tx = require(294);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _fetchival = require('fetchival');
        var _fetchival2 = _interopRequireDefault(_fetchival);
        var _nodeFetch = require('node-fetch');
        var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        _fetchival2.default.fetch = _nodeFetch2.default;
        const request = (0, _makeConcurrent2.default)((() => {
            var _ref = _asyncToGenerator(function*(data) {
                return (0, _fetchival2.default)('https://s2.ripple.com:51234', {
                    timeout: (0, _ms2.default)('15s')
                }).post(data);
            });
            return function(_x) {
                return _ref.apply(this, arguments);
            };
        })(), {
            concurrency: 1
        });

    }, {
        "184": 184,
        "294": 294,
        "undefined": undefined
    }],
    291: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.derive = derive;
        var _rippleAddressCodec = require('ripple-address-codec');
        var _rippleAddressCodec2 = _interopRequireDefault(_rippleAddressCodec);
        var _crypto = require(292);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function derive(publicKey) {
            return _rippleAddressCodec2.default.encodeAccountID((0, _crypto.ripemd160)((0, _crypto.sha256)(publicKey)));
        }

    }, {
        "292": 292,
        "undefined": undefined
    }],
    292: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sha512half = sha512half;
        exports.sha256 = sha256;
        exports.ripemd160 = ripemd160;
        var _createHash = require('create-hash');
        var _createHash2 = _interopRequireDefault(_createHash);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function sha512half() {
            for (var _len = arguments.length, buffers = Array(_len), _key = 0; _key < _len; _key++) {
                buffers[_key] = arguments[_key];
            }
            return buffers.reduce((hash, buffer) => hash.update(buffer), (0, _createHash2.default)('sha512')).digest().slice(0, 32);
        }

        function sha256(buffer) {
            return (0, _createHash2.default)('sha256').update(buffer).digest();
        }

        function ripemd160(buffer) {
            return (0, _createHash2.default)('ripemd160').update(buffer).digest();
        }

    }, {
        "undefined": undefined
    }],
    293: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.deriveKeypair = deriveKeypair;
        exports.sign = sign;
        var _rippleAddressCodec = require('ripple-address-codec');
        var _rippleAddressCodec2 = _interopRequireDefault(_rippleAddressCodec);
        var _elliptic = require('elliptic');
        var _elliptic2 = _interopRequireDefault(_elliptic);
        var _bn = require('bn.js');
        var _bn2 = _interopRequireDefault(_bn);
        var _crypto = require(292);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const Ed25519 = _elliptic2.default.eddsa('ed25519');
        const Secp256k1 = _elliptic2.default.ec('secp256k1');
        const secp256k1 = {
            _deriveScalar(bytes, discrim) {
                const order = Secp256k1.curve.n;
                for (let i = 0; i <= 0xFFFFFFFF; ++i) {
                    const buffers = [bytes];
                    if (discrim !== undefined) buffers.push(new _bn2.default(discrim).toBuffer('le', 4));
                    buffers.push(new _bn2.default(i).toBuffer('le', 4));
                    const key = new _bn2.default((0, _crypto.sha512half)(...buffers));
                    if (key.cmpn(0) > 0 && key.cmp(order) < 0) return key;
                }
                throw new Error('impossible unicorn ;)');
            },
            _derivePrivateKey(seed) {
                const privateGen = secp256k1._deriveScalar(seed);
                const publicGen = Secp256k1.g.mul(privateGen);
                return secp256k1._deriveScalar(Buffer.from(publicGen.encodeCompressed()), 0).add(privateGen).mod(Secp256k1.curve.n);
            },
            deriveKeypair(entropy) {
                const privateKey = secp256k1._derivePrivateKey(entropy).toBuffer('be', 33);
                const publicKey = Buffer.from(Secp256k1.keyFromPrivate(privateKey.slice(1)).getPublic().encodeCompressed());
                return {
                    privateKey,
                    publicKey
                };
            },
            sign(message, privateKey) {
                return Buffer.from(Secp256k1.sign((0, _crypto.sha512half)(message), privateKey, {
                    canonical: true
                }).toDER());
            }
        };
        const ed25519 = {
            deriveKeypair(entropy) {
                const privateKey = Buffer.from([0xED, ...(0, _crypto.sha512half)(entropy)]);
                const publicKey = Buffer.from([0xED, ...Ed25519.keyFromSecret(privateKey.slice(1)).pubBytes()]);
                return {
                    privateKey,
                    publicKey
                };
            },
            sign(message, privateKey) {
                return Buffer.from(Ed25519.sign(message, privateKey.slice(1)).toBytes());
            }
        };

        function deriveKeypair(seed) {
            const decoded = _rippleAddressCodec2.default.decodeSeed(seed);
            const fns = decoded.type === 'ed25519' ? ed25519 : secp256k1;
            return fns.deriveKeypair(Buffer.from(decoded.bytes));
        }

        function sign(message, privateKey) {
            const fns = privateKey.length === 33 && privateKey[0] === 0xed ? ed25519 : secp256k1;
            return fns.sign(message, privateKey);
        }

    }, {
        "292": 292,
        "undefined": undefined
    }],
    294: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getHash = getHash;
        exports.toBuffer = toBuffer;
        var _bn = require('bn.js');
        var _bn2 = _interopRequireDefault(_bn);
        var _rippleAddressCodec = require('ripple-address-codec');
        var _rippleAddressCodec2 = _interopRequireDefault(_rippleAddressCodec);
        var _crypto = require(292);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const HASH_PREFIX = Buffer.from('54584E00', 'hex');

        function getHash(buffer) {
            return (0, _crypto.sha512half)(HASH_PREFIX, buffer).toString('hex').toUpperCase();
        }

        function toBuffer(obj) {
            let {
                sign = false
            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            function intFieldToBuffer(field, size) {
                const value = typeof obj[field] === 'string' ? parseFloat(obj[field], 10) : obj[field];
                const isValid = Number.isFinite(value) && value % 1 === 0 && value >= 0;
                if (isValid) return new _bn2.default(value).toBuffer('be', size);
                throw new RangeError(`Invalid field ${field}: ${value}`);
            }
            const buffers = [];
            if (sign) buffers.push(Buffer.from('53545800', 'hex'));
            if (obj.TransactionType !== 'Payment') throw new Error('Not supported');
            buffers.push(Buffer.from('12', 'hex'));
            buffers.push(Buffer.from('0000', 'hex'));
            buffers.push(Buffer.from('22', 'hex'));
            buffers.push(intFieldToBuffer('Flags', 4));
            buffers.push(Buffer.from('24', 'hex'));
            buffers.push(intFieldToBuffer('Sequence', 4));
            if (obj.DestinationTag) {
                buffers.push(Buffer.from('2e', 'hex'));
                buffers.push(intFieldToBuffer('DestinationTag', 4));
            }
            buffers.push(Buffer.from('201b', 'hex'));
            buffers.push(intFieldToBuffer('LastLedgerSequence', 4));
            buffers.push(Buffer.from('61', 'hex'));
            buffers.push(Buffer.from('40', 'hex'));
            buffers.push(intFieldToBuffer('Amount', 7));
            buffers.push(Buffer.from('68', 'hex'));
            buffers.push(Buffer.from('40', 'hex'));
            buffers.push(intFieldToBuffer('Fee', 7));
            buffers.push(Buffer.from('73', 'hex'));
            buffers.push(Buffer.from([Buffer.from(obj.SigningPubKey, 'hex').length]));
            buffers.push(Buffer.from(obj.SigningPubKey, 'hex'));
            if (!sign) {
                buffers.push(Buffer.from('74', 'hex'));
                buffers.push(Buffer.from([Buffer.from(obj.TxnSignature, 'hex').length]));
                buffers.push(Buffer.from(obj.TxnSignature, 'hex'));
            }
            buffers.push(Buffer.from('81', 'hex'));
            buffers.push(Buffer.from('14', 'hex'));
            buffers.push(Buffer.from(_rippleAddressCodec2.default.decodeAccountID(obj.Account)));
            buffers.push(Buffer.from('83', 'hex'));
            buffers.push(Buffer.from('14', 'hex'));
            buffers.push(Buffer.from(_rippleAddressCodec2.default.decodeAccountID(obj.Destination)));
            return Buffer.concat(buffers);
        }

    }, {
        "292": 292,
        "undefined": undefined
    }],
    295: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.rippleToUnixTimestamp = rippleToUnixTimestamp;

        function rippleToUnixTimestamp(rippleTime) {
            return (rippleTime + 0x386D4380) * 1000;
        }

    }, {}],
    296: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const properName = exports.properName = 'Assets';
        const name = exports.name = 'assets';

    }, {}],
    297: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _appConfig = require(80);
        var _assets = require(296);
        var assets = _interopRequireWildcard(_assets);
        var _localization = require(298);
        var localization = _interopRequireWildcard(_localization);
        var _skins = require(300);
        var skins = _interopRequireWildcard(_skins);
        var _security = require(299);
        var security = _interopRequireWildcard(_security);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        const settings = {
            assets,
            localization,
            skins
        };
        if (_appConfig.ENV_DEV) settings.security = security;
        exports.default = settings;

    }, {
        "296": 296,
        "298": 298,
        "299": 299,
        "300": 300,
        "80": 80
    }],
    298: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const properName = exports.properName = 'Localization';
        const name = exports.name = 'localization';

    }, {}],
    299: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const properName = exports.properName = 'Security';
        const name = exports.name = 'security';

    }, {}],
    300: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const properName = exports.properName = 'Skins';
        const name = exports.name = 'skins';

    }, {}],
    301: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = useFetch;

        function useFetch(shapeshift) {
            const fetch = typeof window !== 'undefined' ? typeof window.fetch === 'function' ? window.fetch : require('node-fetch') : require('node-fetch');
            shapeshift.http.get = function(url, callback) {
                fetch(url).then(function(res) {
                    return res.json();
                }).then(function(body) {
                    callback(null, body);
                }).catch(callback);
            };
            shapeshift.http.post = function(url, data, callback) {
                let fetchOptions = {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                };
                fetch(url, fetchOptions).then(function(res) {
                    return res.json();
                }).then(function(body) {
                    callback(null, body);
                }).catch(callback);
            };
            return shapeshift;
        }

    }, {
        "undefined": undefined
    }],
    302: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _shapeshift2 = require('shapeshift.io');
        var _shapeshift3 = _interopRequireDefault(_shapeshift2);
        var _http = require(301);
        var _http2 = _interopRequireDefault(_http);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        _shapeshift3.default.cors = false;
        const shapeshift = (0, _http2.default)(_shapeshift3.default);
        const _oldShift = shapeshift.shift.bind(shapeshift);

        function shift(withdrawalAddress, pair, options, callback) {
            let opts = Object.assign({}, options);
            return _oldShift(withdrawalAddress, pair, opts, callback);
        }
        shapeshift.shift = shift;
        exports.default = shapeshift;

    }, {
        "301": 301,
        "undefined": undefined
    }],
    303: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.stateTransitions = exports.actions = undefined;
        var _steps = require(117);
        var _steps2 = _interopRequireDefault(_steps);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const actions = exports.actions = {
            TX_RECEIVE: 'RECEIVE',
            TX_SEND_SUCCESS: currentState => currentState.exchange.isExchanging ? null : 'SEND'
        };
        const stateTransitions = exports.stateTransitions = [
            [_steps2.default, steps => steps ? 'STEP' + steps : null]
        ];

    }, {
        "117": 117
    }],
    304: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = {
            RECEIVE: 'receive.wav',
            SEND: 'send.wav',
            STEP1: 'step2.wav',
            STEP2: 'step3.wav'
        };

    }, {}],
    305: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.audioDir = exports.mediaDir = exports.staticDir = undefined;
        exports.getAudioPaths = getAudioPaths;
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _audio = require(304);
        var _audio2 = _interopRequireDefault(_audio);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const staticDir = exports.staticDir = _path2.default.join(__dirname, '../../static');
        const mediaDir = exports.mediaDir = _path2.default.join(staticDir, 'media');
        const audioDir = exports.audioDir = _path2.default.join(mediaDir, 'audio');
        const audioPaths = {};
        Object.keys(_audio2.default).forEach(id => {
            audioPaths[id] = _path2.default.join(audioDir, _audio2.default[id]);
        });

        function getAudioPaths() {
            let {
                isMain = false
            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            if (isMain) return Object.assign({}, audioPaths);
            let newPaths = Object.assign({}, audioPaths);
            Object.keys(newPaths).forEach(id => {
                newPaths[id] = _path2.default.relative(staticDir, newPaths[id]);
            });
            return newPaths;
        }

    }, {
        "304": 304,
        "undefined": undefined
    }],
    306: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = swal;
        var _sweetalert = require('sweetalert');
        var _sweetalert2 = _interopRequireDefault(_sweetalert);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function swal(args, callback) {
            return (0, _sweetalert2.default)(Object.assign({
                customClass: 'sweet-alert-exodus',
                animation: false
            }, args), callback);
        }
        swal.confirm = function confirm(args, callback) {
            (0, _sweetalert2.default)(Object.assign({
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#7ED321',
                customClass: 'sweet-alert-exodus',
                animation: false
            }, args), function() {
                return callback.apply(this, arguments);
            });
        };
        swal.prompt = function prompt(args, callback) {
            (0, _sweetalert2.default)(Object.assign({
                animation: false,
                type: 'input',
                confirmButtonColor: '#198FE3',
                showCancelButton: true,
                customClass: 'sweet-alert-exodus',
                closeOnConfirm: false
            }, args), function(cancelOrInputVal) {
                if (cancelOrInputVal === false) return true;
                if (typeof args.validate === 'function') {
                    let message = args.validate(cancelOrInputVal);
                    if (message) {
                        _sweetalert2.default.showInputError(message);
                        return false;
                    }
                }
                return setTimeout(() => callback.apply(this, arguments), 150);
            });
        };
        swal.error = function error(args, callback) {
            (0, _sweetalert2.default)(Object.assign({
                animation: false,
                type: 'error',
                title: 'Error',
                customClass: 'sweet-alert-exodus',
                showCancelButton: false
            }, args), callback);
        };
        swal.success = function success(args, callback) {
            (0, _sweetalert2.default)(Object.assign({
                animation: false,
                type: 'success',
                title: 'Success',
                customClass: 'sweet-alert-exodus',
                showCancelButton: false
            }, args), callback);
        };
        swal.warn = function warn(args, callback) {
            (0, _sweetalert2.default)(Object.assign({
                animation: false,
                type: 'warning',
                title: 'Warning',
                customClass: 'sweet-alert-exodus',
                showCancelButton: false
            }, args), callback);
        };

    }, {
        "undefined": undefined
    }],
    307: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let {
                publicKeyEncode
            } = _ref;
            return {
                type: 'ecdsa-threshold',
                pairingData,
                publicKeys: (0, _publicKeys2.default)(publicKeyEncode)
            };
        };
        var _pairingData = require(308);
        var pairingData = _interopRequireWildcard(_pairingData);
        var _publicKeys = require(309);
        var _publicKeys2 = _interopRequireDefault(_publicKeys);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

    }, {
        "308": 308,
        "309": 309
    }],
    308: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generate = generate;
        exports.validate = validate;
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _secp256k = require('secp256k1');
        var secp256k1 = _interopRequireWildcard(_secp256k);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function generate(hdkey, code) {
            const sha = _crypto2.default.createHash('sha256').update(code).digest();
            const sigObj = secp256k1.sign(sha, hdkey.privateKey);
            return {
                data: {
                    publicKey: hdkey.publicKey.toString('hex')
                },
                proof: {
                    signature: sigObj.signature.toString('hex')
                }
            };
        }

        function validate(code, _ref, _ref2) {
            let {
                publicKey
            } = _ref;
            let {
                signature
            } = _ref2;
            if (!publicKey) return false;
            const sha = _crypto2.default.createHash('sha256').update(code).digest();
            return secp256k1.verify(sha, Buffer.from(signature, 'hex'), Buffer.from(publicKey, 'hex'));
        }

    }, {
        "undefined": undefined
    }],
    309: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(encode) {
            function generate(hdkey, _ref) {
                let {
                    publicKey
                } = _ref;
                const privateKey = hdkey.privateKey;
                return secp256k1.publicKeyTweakMul(Buffer.from(publicKey, 'hex'), privateKey);
            }
            return {
                generate,
                encode
            };
        };
        var _secp256k = require('secp256k1');
        var secp256k1 = _interopRequireWildcard(_secp256k);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

    }, {
        "undefined": undefined
    }],
    310: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _alice = require(307);
        Object.defineProperty(exports, 'alice', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_alice).default;
            }
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

    }, {
        "307": 307
    }],
    311: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(_ref) {
            let {
                network
            } = _ref;
            return {
                type: 'multisig',
                network: network,
                pairingData,
                publicKeys: (0, _publicKeys2.default)(network)
            };
        };
        var _pairingData = require(312);
        var pairingData = _interopRequireWildcard(_pairingData);
        var _publicKeys = require(313);
        var _publicKeys2 = _interopRequireDefault(_publicKeys);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

    }, {
        "312": 312,
        "313": 313
    }],
    312: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generate = generate;
        exports.validate = validate;
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _secp256k = require('secp256k1');
        var secp256k1 = _interopRequireWildcard(_secp256k);
        var _hdkey = require('hdkey');
        var _hdkey2 = _interopRequireDefault(_hdkey);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function generate(hdkey, code) {
            const sha = _crypto2.default.createHash('sha256').update(code).digest();
            const sigObj = secp256k1.sign(sha, hdkey.privateKey);
            return {
                data: {
                    xPub: hdkey.publicExtendedKey
                },
                proof: {
                    signature: sigObj.signature.toString('hex')
                }
            };
        }

        function validate(code, _ref, _ref2) {
            let {
                xPub
            } = _ref;
            let {
                signature
            } = _ref2;
            if (!xPub) return false;
            const sha = _crypto2.default.createHash('sha256').update(code).digest();
            const hdkey = _hdkey2.default.fromExtendedKey(xPub);
            return secp256k1.verify(sha, Buffer.from(signature, 'hex'), hdkey.publicKey);
        }

    }, {
        "undefined": undefined
    }],
    313: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(network) {
            function generate(hdkey, _ref, path) {
                let {
                    xPub
                } = _ref;
                const mobileHDKey = _hdkey2.default.fromExtendedKey(xPub);
                const publicKeys = [hdkey.derive(path).publicKey, mobileHDKey.derive(path).publicKey];
                const redeemScript = _bitcoinjsLib2.default.script.multisig.output.encode(2, publicKeys);
                return _bitcoinjsLib2.default.script.scriptHash.output.encode(_bitcoinjsLib2.default.crypto.hash160(redeemScript));
            }

            function encode(publicKey) {
                return _bitcoinjsLib2.default.address.fromOutputScript(publicKey, network.toBitcoinJS());
            }
            return {
                generate,
                encode
            };
        };
        var _hdkey = require('hdkey');
        var _hdkey2 = _interopRequireDefault(_hdkey);
        var _bitcoinjsLib = require('bitcoinjs-lib');
        var _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

    }, {
        "undefined": undefined
    }],
    314: [function(require, module, exports) {
        arguments[4][310][0].apply(exports, arguments)
    }, {
        "310": 310,
        "311": 311
    }],
    315: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isECDSAThreshold = isECDSAThreshold;
        var _lodash = require('lodash');
        var _lodash2 = _interopRequireDefault(_lodash);
        var _withTokens = require(316);
        var _withTokens2 = _interopRequireDefault(_withTokens);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function isECDSAThreshold(assetName) {
            return _lodash2.default.get(_withTokens2.default, `${assetName}.twoOfTwo.type`) === 'ecdsa-threshold';
        }

    }, {
        "316": 316,
        "undefined": undefined
    }],
    316: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const filtered = Object.keys(_assets2.default).reduce((filtered, assetName) => {
            if (_assets2.default[assetName].isEthereumToken) return Object.assign({}, filtered, {
                [assetName]: Object.assign({}, _assets2.default[assetName], {
                    twoOfTwo: Object.assign({}, _assets2.default.ethereum.twoOfTwo)
                })
            });
            if (_assets2.default[assetName].twoOfTwo) return Object.assign({}, filtered, {
                [assetName]: _assets2.default[assetName]
            });
            return filtered;
        }, {});
        exports.default = filtered;

    }, {
        "184": 184
    }],
    317: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _withTokens = require(316);
        var _withTokens2 = _interopRequireDefault(_withTokens);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const filtered = Object.keys(_withTokens2.default).reduce((filtered, assetName) => {
            if (_withTokens2.default[assetName].isEthereumToken) return filtered;
            return Object.assign({}, filtered, {
                [assetName]: _withTokens2.default[assetName]
            });
        }, {});
        exports.default = filtered;

    }, {
        "316": 316
    }],
    318: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.send = exports.MESSAGE_TYPES = undefined;
        let send = exports.send = (() => {
            var _ref = _asyncToGenerator(function*(message) {
                yield(0, _delay2.default)((0, _ms2.default)('1s'));
                return {
                    success: true
                };
            });
            return function send(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        exports.receiveMessage = receiveMessage;
        exports.getConnectionCode = getConnectionCode;
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _twoOfTwo = require(67);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function receiveMessage(message, dispatch, getState) {
            const listeners = [_twoOfTwo.pair];
            listeners.forEach(listener => {
                dispatch(listener.receiveMessage(message));
            });
        }
        const MESSAGE_TYPES = exports.MESSAGE_TYPES = {
            PRESENCE: 'PRESENCE',
            PAIRING_DATA: 'PAIRING_DATA',
            PHONE_CODE: 'PHONE_CODE'
        };

        function getConnectionCode() {
            return 'connection code';
        }

    }, {
        "67": 67,
        "undefined": undefined
    }],
    319: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.QR = exports.pairingData = exports.connection = undefined;
        var _connection = require(318);
        var connection = _interopRequireWildcard(_connection);
        var _pairingData = require(320);
        var pairingData = _interopRequireWildcard(_pairingData);
        var _qr = require(322);
        var QR = _interopRequireWildcard(_qr);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        exports.connection = connection;
        exports.pairingData = pairingData;
        exports.QR = QR;

    }, {
        "318": 318,
        "320": 320,
        "322": 322
    }],
    320: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.get = exports.pair = exports.generate = undefined;
        let generate = exports.generate = (() => {
            var _ref = _asyncToGenerator(function*(code) {
                const pairingData = {};
                const assetNames = Object.keys(_withoutTokens2.default);
                for (let name of assetNames) {
                    let hdkey = _hdkey2.default.fromJSON((yield _instanceShim2.default.current.getHDKey(name, 0)));
                    if ((0, _typeCheckers.isECDSAThreshold)(name)) hdkey = hdkey.derive('m/0/0');
                    pairingData[name] = _withoutTokens2.default[name].twoOfTwo.pairingData.generate(hdkey, code);
                }
                return pairingData;
            });
            return function generate(_x) {
                return _ref.apply(this, arguments);
            };
        })();
        let pair = exports.pair = (() => {
            var _ref2 = _asyncToGenerator(function*(connectionCode, otherPairingData) {
                yield Promise.all(Object.keys(_withoutTokens2.default).map(function(assetName) {
                    const {
                        data
                    } = otherPairingData[assetName];
                    const assetKey = walletKeys.twoOfTwo(`asset.${assetName}`);
                    return _instanceShim2.default.current.updateKeyData(assetKey, data);
                }));
                const connectionKey = walletKeys.twoOfTwo('connection');
                return _instanceShim2.default.current.updateKeyData(connectionKey, {
                    connectionCode
                });
            });
            return function pair(_x2, _x3) {
                return _ref2.apply(this, arguments);
            };
        })();
        let get = exports.get = (() => {
            var _ref3 = _asyncToGenerator(function*() {
                const connectionKey = walletKeys.twoOfTwo('connection');
                const connectionData = yield _instanceShim2.default.current.fetchKeyData(connectionKey);
                if (!connectionData) return;
                const pairingData = {};
                const assetNames = Object.keys(_withoutTokens2.default);
                for (let assetName of assetNames) {
                    const assetKey = walletKeys.twoOfTwo(`asset.${assetName}`);
                    const assetData = yield _instanceShim2.default.current.fetchKeyData(assetKey);
                    if ((0, _typeCheckers.isECDSAThreshold)(assetName)) {
                        const hdkey = _hdkey2.default.fromJSON((yield _instanceShim2.default.current.getHDKey(assetName, 0))).derive('m/0/0');
                        assetData.combinedPublicKey = _withoutTokens2.default[assetName].twoOfTwo.publicKeys.generate(hdkey, assetData);
                    }
                    pairingData[assetName] = assetData;
                }
                return {
                    connectionCode: connectionData.connectionCode,
                    pairingData
                };
            });
            return function get() {
                return _ref3.apply(this, arguments);
            };
        })();
        exports.validate = validate;
        var _withoutTokens = require(317);
        var _withoutTokens2 = _interopRequireDefault(_withoutTokens);
        var _typeCheckers = require(315);
        var _hdkey = require('hdkey');
        var _hdkey2 = _interopRequireDefault(_hdkey);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _keys = require(168);
        var walletKeys = _interopRequireWildcard(_keys);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }

        function validate(otherCode, otherPairingData) {
            const assetNames = Object.keys(_withoutTokens2.default);
            assetNames.forEach(assetName => {
                if (!otherPairingData[assetName]) throw new Error(`Missing pairing data for ${assetName}`);
                const {
                    data,
                    proof
                } = otherPairingData[assetName];
                if (!_withoutTokens2.default[assetName].twoOfTwo.pairingData.validate(otherCode, data, proof)) throw new Error(`Invalid pairing data for ${assetName}`);
            });
            return true;
        }

    }, {
        "167": 167,
        "168": 168,
        "315": 315,
        "317": 317,
        "undefined": undefined
    }],
    321: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.calculate = calculate;
        exports.validate = validate;
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function calculate(connectionCode, desktopCode) {
            return _crypto2.default.createHash('sha1').update(`${connectionCode}${desktopCode}`).digest().toString('hex');
        }

        function validate(connectionCode, desktopCode, checksum) {
            const calculatedChecksum = calculate(connectionCode, desktopCode);
            if (checksum !== calculatedChecksum) return false;
            return true;
        }

    }, {
        "undefined": undefined
    }],
    322: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generate = generate;
        exports.parse = parse;
        var _crypto = require('crypto');
        var _crypto2 = _interopRequireDefault(_crypto);
        var _connection = require(318);
        var _checksum = require(321);
        var checksum = _interopRequireWildcard(_checksum);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let _qr = {};

        function generate() {
            if (!_qr.connectionCode) _qr.connectionCode = (0, _connection.getConnectionCode)();
            if (!_qr.desktopCode) _qr.desktopCode = _crypto2.default.randomBytes(32).toString('hex');
            if (!_qr.checksum) _qr.checksum = checksum.calculate(_qr.connectionCode, _qr.desktopCode);
            return {
                connectionData: {
                    connectionCode: _qr.connectionCode,
                    desktopCode: _qr.desktopCode
                },
                qr: JSON.stringify({
                    cc: _qr.connectionCode,
                    dc: _qr.desktopCode,
                    cksm: _qr.checksum
                })
            };
        }

        function parse(jsonStr) {
            const {
                cc,
                dc,
                cksm
            } = JSON.parse(jsonStr);
            if (!checksum.validate(cc, dc, cksm)) throw new Error('Invalid qr');
            return {
                connectionCode: cc,
                desktopCode: dc
            };
        }

    }, {
        "318": 318,
        "321": 321,
        "undefined": undefined
    }],
    323: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactSelect = require('react-select');
        var _reactSelect2 = _interopRequireDefault(_reactSelect);
        var _value = require(325);
        var _value2 = _interopRequireDefault(_value);
        var _option = require(324);
        var _option2 = _interopRequireDefault(_option);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        let AccountSelect = (_temp = _class = class AccountSelect extends _react2.default.PureComponent {
            constructor(props) {
                super();
                let initialVal = props.options[0];
                if (props.value) {
                    initialVal = optionFromName(props.value, props.options);
                }
                this.state = {
                    value: initialVal
                };
                this.handleChange = this.handleChange.bind(this);
                this.filterOptions = this.filterOptions.bind(this);
            }
            componentWillReceiveProps(nextProps) {
                if (nextProps.value) {
                    let opt = optionFromName(nextProps.value, nextProps.options);
                    this.setState({
                        value: opt
                    });
                }
            }
            handleChange(value) {
                this.setState({
                    value
                });
                if (this.props.onChange) this.props.onChange(value.name);
            }
            filterOptions(options, filterValue, excludeOptions, props) {
                const valueName = lodash.get(this.state.value, 'name');
                return options.filter(option => option.name !== valueName);
            }
            render() {
                return _react2.default.createElement(_reactSelect2.default, {
                    onChange: this.handleChange,
                    filterOptions: this.filterOptions,
                    options: this.props.options,
                    value: this.state.value,
                    optionComponent: _option2.default,
                    valueComponent: _value2.default,
                    clearable: false,
                    searchable: false,
                    valueKey: 'name',
                    labelKey: 'properName'
                });
            }
        }, _class.propTypes = {
            options: _propTypes2.default.array.isRequired,
            onChange: _propTypes2.default.func,
            value: _propTypes2.default.string
        }, _temp);
        exports.default = AccountSelect;
        const optionFromName = (name, options) => options.find(option => option.name === name);

    }, {
        "324": 324,
        "325": 325,
        "undefined": undefined
    }],
    324: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let AccountOption = (_temp = _class = class AccountOption extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                this.handleMouseDown = this.handleMouseDown.bind(this);
                this.handleMouseEnter = this.handleMouseEnter.bind(this);
                this.handleMouseMove = this.handleMouseMove.bind(this);
            }
            handleMouseDown(event) {
                event.preventDefault();
                event.stopPropagation();
                this.props.onSelect(this.props.option, event);
            }
            handleMouseEnter(event) {
                this.props.onFocus(this.props.option, event);
            }
            handleMouseMove(event) {
                if (this.props.isFocused) return;
                this.props.onFocus(this.props.option, event);
            }
            render() {
                const {
                    name,
                    properName,
                    content
                } = this.props.option;
                const {
                    isDisabled
                } = this.props;
                return _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('exchange-dropdown exchange-dropdown-menu-open', {
                        'dropdown-highlight': this.props.isFocused
                    }),
                    onMouseDown: !isDisabled ? this.handleMouseDown : null,
                    onMouseEnter: !isDisabled ? this.handleMouseEnter : null,
                    onMouseMove: !isDisabled ? this.handleMouseMove : null
                }, _react2.default.createElement('div', {
                    className: `exchange-dropdown-image exodus-icon size32 logo-${name} ${isDisabled?'exchange-dropdown-disabled':''}`
                }), _react2.default.createElement('div', {
                    className: `exchange-dropdown-text exodus-color-${name} ${isDisabled?'exchange-dropdown-disabled':''}`
                }, _react2.default.createElement('div', {
                    className: 'exchange-dropdown-title'
                }, properName), _react2.default.createElement('div', {
                    className: 'exchange-dropdown-description'
                }, isDisabled ? '(temporarily unavailable)' : _react2.default.createElement('span', null, content))));
            }
        }, _class.propTypes = {
            option: _propTypes2.default.object,
            onSelect: _propTypes2.default.func,
            onFocus: _propTypes2.default.func,
            onUnfocus: _propTypes2.default.func,
            isDisabled: _propTypes2.default.bool,
            isFocused: _propTypes2.default.bool,
            isSelected: _propTypes2.default.bool
        }, _temp);
        exports.default = AccountOption;

    }, {
        "undefined": undefined
    }],
    325: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let AccountValue = (_temp = _class = class AccountValue extends _react2.default.PureComponent {
            render() {
                const {
                    name,
                    properName,
                    disabled: isDisabled,
                    content
                } = this.props.value;
                return _react2.default.createElement('div', {
                    className: `exchange-dropdown exodus-border-color-${name}`
                }, _react2.default.createElement('div', {
                    className: `exchange-dropdown-image exodus-icon size32 logo-${name} ${isDisabled?'exchange-dropdown-disabled':''}`
                }), _react2.default.createElement('div', {
                    className: `exchange-dropdown-text exodus-color-${name} ${isDisabled?'exchange-dropdown-disabled':''}`
                }, _react2.default.createElement('div', {
                    className: 'exchange-dropdown-title'
                }, properName), _react2.default.createElement('div', {
                    className: 'exchange-dropdown-description'
                }, isDisabled ? '(temporarily unavailable)' : _react2.default.createElement('span', null, content))), _react2.default.createElement('div', {
                    className: 'exchange-dropdown-arrow'
                }, _react2.default.createElement('svg', {
                    className: `exodus-color-fill-svg-${name}`,
                    width: '12',
                    height: '9',
                    viewBox: '0 0 12 9',
                    xmlns: 'https://www.w3.org/2000/svg'
                }, _react2.default.createElement('title', null, 'Triangle'), _react2.default.createElement('path', {
                    d: 'M6 9L0 0h12',
                    fillRule: 'evenodd'
                }))));
            }
        }, _class.propTypes = {
            value: _propTypes2.default.object
        }, _temp);
        exports.default = AccountValue;

    }, {
        "undefined": undefined
    }],
    326: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let AddressInput = (_temp = _class = class AddressInput extends _react2.default.Component {
            constructor(props) {
                super(props);
                let address = props.value;
                this.state = {
                    value: address
                };
                this.handleChange = this.handleChange.bind(this);
            }
            componentWillReceiveProps(nextProps) {
                this.setState({
                    value: nextProps.value
                });
            }
            handleChange(event) {
                let address = event.target.value;
                address = address.trim();
                this.setState({
                    value: address
                });
                this.props.onChange({
                    address
                });
            }
            render() {
                return _react2.default.createElement('input', {
                    id: this.props.id,
                    placeholder: this.props.placeholder,
                    tabIndex: this.props.tabIndex,
                    type: 'text',
                    className: (0, _classnames2.default)('address-input', {
                        'has-invalid': !this.props.valid
                    }, this.props.className),
                    onChange: this.handleChange,
                    value: this.state.value
                });
            }
        }, _class.propTypes = {
            className: _propTypes2.default.string,
            coin: _propTypes2.default.string.isRequired,
            onChange: _propTypes2.default.func,
            value: _propTypes2.default.string,
            id: _propTypes2.default.string,
            placeholder: _propTypes2.default.string,
            tabIndex: _propTypes2.default.string
        }, _temp);
        exports.default = AddressInput;

    }, {
        "undefined": undefined
    }],
    327: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _d = require('d3');
        var d3 = _interopRequireWildcard(_d);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactDom = require('react-dom');
        var _reactDom2 = _interopRequireDefault(_reactDom);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        let PortfolioChart = (_temp = _class = class PortfolioChart extends _react2.default.Component {
            componentDidMount() {
                let thisEl = _reactDom2.default.findDOMNode(this);
                let width = thisEl.offsetWidth;
                let height = thisEl.offsetHeight;
                let radius = Math.min(width, height) / 2;
                let pie = d3.pie().value(d => d.fiat).sort(null);
                let arc = d3.arc().innerRadius(radius - 60).outerRadius(radius);
                let arc2 = d3.arc().innerRadius(radius - 60).outerRadius(radius - 45);
                let svg = d3.select('.portfolio-pie-chart').attr('viewBox', '0 0 ' + width + ' ' + height).append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');
                const g = svg.selectAll('g').data(pie(this.props.data)).enter().append('g');
                g.append('path').attr('d', arc).attr('class', 'outter').attr('fill', d => d3.rgb(d.data.color));
                g.append('path').attr('d', arc2).attr('class', 'inner').attr('fill', d => d3.rgb(d.data.color).darker(0.5));
                svg.append('text').attr('x', width / radius).attr('y', height / radius).attr('text-anchor', 'middle').attr('fill', 'white').style('font-size', '2.5em').text(this.props.total);
                svg.append('text').attr('x', width / radius).attr('y', height / radius).attr('dy', '1.25em').attr('text-anchor', 'middle').attr('fill', 'white').style('opacity', '0.4').style('font-size', '1.3em').text('Total Value');
            }
            componentDidUpdate() {
                this.componentWillUnmount();
                this.componentDidMount();
            }
            componentWillUnmount() {
                d3.select('.portfolio-pie-chart').selectAll('*').remove();
            }
            render() {
                return _react2.default.createElement('div', {
                    className: 'svg-container',
                    ref: 'parent'
                }, _react2.default.createElement('svg', {
                    ref: 'svg',
                    className: 'portfolio-pie-chart svg-content-responsive'
                }));
            }
        }, _class.propTypes = {
            data: _propTypes2.default.array,
            total: _propTypes2.default.string
        }, _temp);
        exports.default = PortfolioChart;

    }, {
        "undefined": undefined
    }],
    328: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        exports.default = CoinLogo;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function CoinLogo(_ref) {
            let {
                coin,
                text = coin
            } = _ref, props = _objectWithoutProperties(_ref, ['coin', 'text']);
            let coinl = coin.toLowerCase();
            return _react2.default.createElement('div', _extends({
                className: 'asset-hero'
            }, props), _react2.default.createElement('div', {
                className: 'asset-icon exodus-icon icon-' + coinl
            }));
        }

    }, {
        "undefined": undefined
    }],
    329: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _lodash = require('lodash');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let CollectionView = (_temp = _class = class CollectionView extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                let pageCount = Math.ceil(props.items.length / props.pageSize);
                this.state = {
                    cursor: 0,
                    currentPage: 0,
                    pageCount: pageCount,
                    hasMore: pageCount > 1,
                    needsScrollBar: false,
                    isScrolled: false
                };
                this.renderingItems = [];
                this.loadMoreTriggered = false;
                this.lastRenderedPage = -1;
                this.scrollListenerAttached = false;
                const scrollListener = this.scrollListener.bind(this);
                this.scrollListener = (0, _lodash.throttle)(scrollListener, 100, {
                    leading: true,
                    trailing: true
                });
            }
            componentWillReceiveProps(newProps) {
                let pageCount = Math.ceil(newProps.items.length / newProps.pageSize);
                let currentPage = newProps.items === this.props.items ? this.state.currentPage : 0;
                let transformedItems = [];
                if (newProps.items && newProps.items.length) {
                    transformedItems = newProps.items.map((item, index) => {
                        let suppliedOnClick = item.onClick;
                        const clickHandler = () => {
                            if (typeof suppliedOnClick === 'function') {
                                suppliedOnClick(this, index);
                            }
                            if (typeof this.props.onSelectItem === 'function') {
                                this.props.onSelectItem(item, index);
                            }
                        };
                        item.onClick = clickHandler;
                        return item;
                    });
                    if (this.props.items !== newProps.items) {
                        this.renderingItems.splice(0, this.renderingItems.length);
                    }
                }
                if (currentPage !== this.state.currentPage) {
                    this.lastRenderedPage = -1;
                }
                this.setState({
                    items: transformedItems,
                    pageCount: pageCount,
                    currentPage: currentPage,
                    hasMore: currentPage < pageCount - 1,
                    needsScrollBar: this.shouldRenderScrollBar(),
                    isScrolled: this.scroller.scrollTop > 0
                });
                this.loadMoreTriggered = false;
            }
            componentDidMount() {
                this.pageLoaded = this.props.pageStart;
                this.attachScrollListener();
                this.setState({
                    needsScrollBar: this.shouldRenderScrollBar()
                });
            }
            componentDidUpdate() {
                this.attachScrollListener();
                this.setState({
                    needsScrollBar: this.shouldRenderScrollBar()
                });
            }
            componentWillUnmount() {
                this.detachScrollListener();
            }
            detachScrollListener() {
                this.scroller.removeEventListener('scroll', this.scrollListener, this.props.useCapture);
                this.scroller.removeEventListener('resize', this.scrollListener, this.props.useCapture);
                this.scrollListenerAttached = false;
            }
            attachScrollListener() {
                if (!this.scrollListenerAttached) {
                    this.scroller.addEventListener('scroll', this.scrollListener, this.props.useCapture);
                    this.scroller.addEventListener('resize', this.scrollListener, this.props.useCapture);
                    this.scrollListenerAttached = true;
                }
                if (this.props.initialLoad) {
                    this.scrollListener();
                }
            }
            scrollListener() {
                const el = this.scroller;
                let offset = el.scrollHeight - el.clientHeight - el.scrollTop;
                if (!this.state.isScrolled && this.scroller.scrollTop > this.props.hasScrolledThreshold) {
                    this.setState({
                        isScrolled: true
                    });
                } else if (this.state.isScrolled && this.scroller.scrollTop <= 0) {
                    this.setState({
                        isScrolled: false
                    });
                }
                if (!this.loadMoreTriggered && offset < Number(this.props.loadMoreThreshold)) {
                    this.loadMoreTriggered = true;
                    this.loadMore(this.state.currentPage + 1);
                }
            }
            shouldRenderScrollBar() {
                return this.scroller.scrollHeight > this.scroller.clientHeight;
            }
            calculateTopPosition(el) {
                if (!el) {
                    return 0;
                }
                return el.offsetTop + this.calculateTopPosition(el.offsetParent);
            }
            renderHeader() {
                let HeaderRenderer = this.props.header;
                const RenderHeader = headerProps => {
                    return _react2.default.createElement(HeaderRenderer, headerProps);
                };
                return _react2.default.createElement('div', {
                    className: 'ui-collection-view-header'
                }, _react2.default.createElement(RenderHeader, {
                    cursor: this.state.cursor,
                    currentPage: this.state.currentPage,
                    pageCount: this.state.pageCount
                }));
            }
            listNeedsRender() {
                return this.renderingItems.length === 0 || this.state.items.length > this.props.pageSize && this.state.currentPage !== this.lastRenderedPage;
            }
            renderItems() {
                let items = this.state.items;
                let ItemRenderer = this.props.itemRenderer;
                const RenderItem = props => {
                    return _react2.default.createElement(ItemRenderer, _extends({
                        key: props.id
                    }, props));
                };
                if (items && items.length) {
                    if (this.listNeedsRender()) {
                        let cursorStart = this.state.currentPage * this.props.pageSize;
                        let cursorEnd = cursorStart + this.props.pageSize;
                        if (cursorEnd > items.length) {
                            cursorEnd = items.length;
                        }
                        if (this.state.currentPage < this.lastRenderedPage) {
                            this.renderingItems.splice(0, this.renderingItems.length);
                        }
                        for (let i = cursorStart; i < cursorEnd; i++) {
                            let item = items[i];
                            this.renderingItems.push(_react2.default.createElement(RenderItem, _extends({
                                key: item.id
                            }, item, {
                                index: i
                            })));
                        }
                        this.lastRenderedPage = this.state.currentPage;
                    }
                    return this.renderingItems;
                } else {
                    return _react2.default.createElement('span', {
                        className: 'ui-cv-no-items'
                    }, this.props.emptyText);
                }
            }
            renderFooter() {
                let FooterRenderer = this.props.footer;
                const RenderFooter = footerProps => {
                    return _react2.default.createElement(FooterRenderer, footerProps);
                };
                return _react2.default.createElement('div', {
                    className: 'ui-collection-view-footer'
                }, _react2.default.createElement(RenderFooter, {
                    cursor: this.state.cursor,
                    currentPage: this.state.currentPage,
                    pageCount: this.state.pageCount
                }));
            }
            loadMore(page) {
                if (page < this.state.pageCount) {
                    this.setState({
                        currentPage: page,
                        hasMore: true
                    });
                    this.loadMoreTriggered = false;
                } else {
                    this.setState({
                        hasMore: false
                    });
                }
            }
            render() {
                let renderedHeader, renderedFooter;
                if (this.props.header) {
                    renderedHeader = this.renderHeader();
                }
                if (this.props.footer) {
                    renderedFooter = this.renderFooter();
                }
                if (this.props.renderedHeader) {
                    renderedHeader = this.props.renderedHeader;
                }
                if (this.props.renderedFooter) {
                    renderedFooter = this.props.renderedFooter;
                }
                return _react2.default.createElement('div', {
                    id: this.props.id,
                    className: (0, _classnames2.default)('ui-collection-view', this.props.className, {
                        'has-scrolled': this.state.isScrolled
                    })
                }, renderedHeader, _react2.default.createElement('div', {
                    ref: scroller => {
                        this.scroller = scroller;
                    },
                    className: (0, _classnames2.default)('ui-collection-view-content', {
                        'with-scrollbar': this.state.needsScrollBar
                    })
                }, this.renderItems()), renderedFooter);
            }
        }, _class.defaultProps = {
            pageSize: 50,
            loadMoreThreshold: 250,
            hasScrolledThreshold: 0,
            items: _propTypes2.default.array.isRequired,
            itemRenderer: _propTypes2.default.object.isRequired,
            onSelectItem: _propTypes2.default.func,
            className: _propTypes2.default.string,
            emptyText: _propTypes2.default.string
        }, _temp);
        exports.default = CollectionView;

    }, {
        "undefined": undefined
    }],
    330: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactUtils = require(287);
        var _units = require(210);
        var _units2 = _interopRequireDefault(_units);
        var _currencyFormatters = require(211);
        var _countup = require('countup.js');
        var _countup2 = _interopRequireDefault(_countup);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let CounterCurrencyText = (_temp = _class = class CounterCurrencyText extends _react2.default.Component {
            componentDidMount() {
                let {
                    amount,
                    code
                } = this.props;
                if (typeof code === 'string') amount = amount.to(code);
                const amt = parseFloat(amount.toString({
                    unit: false
                }));
                let {
                    fraction
                } = (0, _currencyFormatters.formatObj)(amount);
                const decimals = fraction.length;
                const duration = 2;
                this.counter = new _countup2.default(this.currencyEl, 0, amt, decimals, duration);
                this.counter.start();
            }
            componentWillReceiveProps(props) {
                let {
                    amount,
                    code
                } = props;
                if (typeof code === 'string') amount = amount.to(code);
                const amt = parseFloat(amount.toString({
                    unit: false
                }));
                let {
                    fraction
                } = (0, _currencyFormatters.formatObj)(amount);
                this.counter.decimals = fraction.length;
                this.counter.dec = Math.pow(10, this.counter.decimals);
                this.counter.update(amt);
            }
            render() {
                const {
                    amount,
                    className,
                    code,
                    symbol
                } = this.props;
                const symbolStr = symbol ? _units2.default[amount.unitName] ? _units2.default[amount.unitName].symbol : '' : '';
                let {
                    code: unit
                } = (0, _currencyFormatters.formatObj)(amount);
                return _react2.default.createElement('span', {
                    className: (0, _classnames2.default)('counter-currency-text', className)
                }, symbol ? _react2.default.createElement('span', {
                    className: 'symbol'
                }, symbolStr) : null, _react2.default.createElement('span', {
                    className: 'amount',
                    ref: ref => {
                        this.currencyEl = ref;
                    }
                }), code ? _react2.default.createElement('span', {
                    className: 'code'
                }, unit) : null);
            }
        }, _class.propTypes = {
            amount: _reactUtils.isNumberUnit,
            className: _propTypes2.default.string,
            code: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
            symbol: _propTypes2.default.bool
        }, _class.defaultProps = {
            symbol: false,
            code: true
        }, _temp);
        exports.default = CounterCurrencyText;

    }, {
        "210": 210,
        "211": 211,
        "287": 287,
        "undefined": undefined
    }],
    331: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        exports.parse = parse;
        exports.validate = validate;
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _parseNum = require('parse-num');
        var _parseNum2 = _interopRequireDefault(_parseNum);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactDom = require('react-dom');
        var _reactDom2 = _interopRequireDefault(_reactDom);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let CurrencyInput = (_temp = _class = class CurrencyInput extends _react2.default.Component {
            constructor(props) {
                super(props);
                let rawAmount = props.value;
                this.state = {
                    value: rawAmount,
                    isValid: rawAmount ? validate(rawAmount) : true
                };
                this.handleChange = this.handleChange.bind(this);
            }
            componentDidMount() {
                let thisEl = _reactDom2.default.findDOMNode(this.refs.input);
                if (this.props.focus) {
                    thisEl.focus();
                    var len = thisEl.value.length;
                    thisEl.setSelectionRange(len, len);
                }
            }
            componentWillReceiveProps(nextProps) {
                this.setState({
                    value: nextProps.value
                });
            }
            handleChange(event) {
                let rawAmount = event.target.value;
                this.setState({
                    value: rawAmount
                });
                let parsedAmount = parse(String(rawAmount));
                let valid = true;
                if (!rawAmount) {
                    valid = true;
                } else {
                    valid = validate(rawAmount);
                }
                this.setState({
                    isValid: valid
                });
                this.props.onChange({
                    rawAmount,
                    parsedAmount,
                    valid
                });
            }
            render() {
                return _react2.default.createElement('input', {
                    id: this.props.id,
                    placeholder: this.props.placeholder,
                    tabIndex: this.props.tabIndex,
                    onBlur: this.props.onBlur,
                    onFocus: this.props.onFocus,
                    type: 'text',
                    className: (0, _classnames2.default)('currency-input', {
                        'has-invalid': !this.state.isValid
                    }, this.props.className),
                    onChange: this.handleChange,
                    value: this.state.value,
                    ref: 'input'
                });
            }
        }, _class.propTypes = {
            className: _propTypes2.default.string,
            focus: _propTypes2.default.bool,
            onChange: _propTypes2.default.func,
            value: _propTypes2.default.string,
            id: _propTypes2.default.string,
            placeholder: _propTypes2.default.string,
            tabIndex: _propTypes2.default.string
        }, _temp);
        exports.default = CurrencyInput;

        function parse(amount) {
            amount = amount.trim();
            if (!amount.match(/^[0-9.,]+$/)) return '';
            let amtNum = (0, _parseNum2.default)(amount);
            let amtStr = String(amtNum);
            if (amtStr === '0') {
                if (amount !== '0' && amount !== '-0' && amount !== '+0') {
                    return '';
                }
            }
            if (amtStr === 'NaN') amtStr = '';
            return amtStr;
        }

        function validate(amount) {
            return !!parse(amount);
        }

    }, {
        "undefined": undefined
    }],
    332: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        exports.default = DateTime;
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function DateTime(_ref) {
            let {
                date,
                relative = false
            } = _ref, props = _objectWithoutProperties(_ref, ['date', 'relative']);
            let content = date.toString();
            if (relative) content = (0, _moment2.default)(date).fromNow();
            return _react2.default.createElement('span', _extends({}, props, {
                className: (0, _classnames2.default)('date-time-text', props.className)
            }), content);
        }
        DateTime.propTypes = {
            date: _propTypes2.default.instanceOf(Date),
            className: _propTypes2.default.string
        };

    }, {
        "undefined": undefined
    }],
    333: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _accountSelect = require(323);
        Object.defineProperty(exports, 'AccountSelect', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_accountSelect).default;
            }
        });
        var _addressInput = require(326);
        Object.defineProperty(exports, 'AddressInput', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_addressInput).default;
            }
        });
        var _currencyInput = require(331);
        Object.defineProperty(exports, 'CurrencyInput', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_currencyInput).default;
            }
        });
        var _dateTime = require(332);
        Object.defineProperty(exports, 'DateTime', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_dateTime).default;
            }
        });
        var _nuCurrencyText = require(334);
        Object.defineProperty(exports, 'NUCurrencyText', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_nuCurrencyText).default;
            }
        });
        var _percentageText = require(335);
        Object.defineProperty(exports, 'PercentageText', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_percentageText).default;
            }
        });
        var _counterCurrencyText = require(330);
        Object.defineProperty(exports, 'CounterCurrencyText', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_counterCurrencyText).default;
            }
        });
        var _collectionView = require(329);
        Object.defineProperty(exports, 'CollectionView', {
            enumerable: true,
            get: function() {
                return _interopRequireDefault(_collectionView).default;
            }
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

    }, {
        "323": 323,
        "326": 326,
        "329": 329,
        "330": 330,
        "331": 331,
        "332": 332,
        "334": 334,
        "335": 335
    }],
    334: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        exports.default = NumberUnitCurrencyText;
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactUtils = require(287);
        var _units = require(210);
        var _units2 = _interopRequireDefault(_units);
        var _currencyFormatters = require(211);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function NumberUnitCurrencyText(_ref) {
            let {
                amount,
                symbol = false,
                code = true,
                prefix = false,
                decimals,
                sigfigs
            } = _ref, props = _objectWithoutProperties(_ref, ['amount', 'symbol', 'code', 'prefix', 'decimals', 'sigfigs']);
            let symbolStr = symbol ? _units2.default[amount.unitName] ? _units2.default[amount.unitName].symbol : '' : '';
            if (typeof code === 'string') {
                amount = amount.to(code);
            }
            amount = amount.clampLowerZero();
            let formatOpts = {};
            decimals = Number.parseInt(decimals, 10);
            if (!Number.isNaN(decimals)) {
                if (decimals < 2) console.warn('NUCurrencyText decimals should be greater than 2.');
                formatOpts.maxFraction = decimals;
            }
            sigfigs = Number.parseInt(sigfigs, 10);
            if (!Number.isNaN(sigfigs)) {
                formatOpts.maxSignificant = sigfigs;
            }
            let {
                decimalSep,
                whole,
                fraction,
                code: unit,
                prefix: prefixStr
            } = (0, _currencyFormatters.formatObj)(amount, formatOpts);
            let decimalPart = '';
            if (fraction) decimalPart = decimalSep + fraction;
            return _react2.default.createElement('span', _extends({}, props, {
                className: (0, _classnames2.default)('currency-text', props.className)
            }), prefix ? _react2.default.createElement('span', {
                className: 'prefix'
            }, prefixStr) : null, symbol ? _react2.default.createElement('span', {
                className: 'symbol'
            }, symbolStr) : null, _react2.default.createElement('span', {
                className: 'amount-whole'
            }, whole), _react2.default.createElement('span', {
                className: 'amount-partial'
            }, decimalPart), code ? _react2.default.createElement('span', {
                className: 'code'
            }, unit) : null);
        }
        NumberUnitCurrencyText.propTypes = {
            amount: _reactUtils.isNumberUnit,
            className: _propTypes2.default.string,
            code: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
            locale: _propTypes2.default.string,
            symbol: _propTypes2.default.bool
        };

    }, {
        "210": 210,
        "211": 211,
        "287": 287,
        "undefined": undefined
    }],
    335: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        exports.default = PercentageText;
        var _assert = require('assert');
        var _assert2 = _interopRequireDefault(_assert);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function PercentageText(_ref) {
            let {
                value,
                decimals = 0
            } = _ref, props = _objectWithoutProperties(_ref, ['value', 'decimals']);
            (0, _assert2.default)(value != null, 'amount required');
            value = parseFloat(value);
            if (!Number.isNaN(value)) {
                value *= 100;
                let x = Math.pow(10, decimals);
                value = Math.round(value * x) / x;
            } else {
                value = 0;
            }
            return _react2.default.createElement('span', _extends({}, props, {
                className: (0, _classnames2.default)('percentage-text', props.className)
            }), value, '%');
        }
        PercentageText.propTypes = {
            className: _propTypes2.default.string
        };

    }, {
        "undefined": undefined
    }],
    336: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _chalk = require('chalk');
        var _chalk2 = _interopRequireDefault(_chalk);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        if (process.type !== 'renderer') console.warn(_chalk2.default.bgBlack.yellow('Not in renderer as expected.'));
        exports.default = window;

    }, {
        "undefined": undefined
    }],
    337: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = ymd;

        function ymd(date) {
            const year = date.getFullYear().toString();
            const month = ('0' + (1 + date.getMonth())).slice(-2);
            const day = ('0' + date.getDate()).slice(-2);
            return `${year}-${month}-${day}`;
        }

    }, {}],
    338: [function(require, module, exports) {
        'use strict';
        hookNodePath();
        require(4);
        require('core-js/fn/symbol');
        require('babel' + '-register')({
            resolveModuleSource: require(339).resolve,
            only: ['src/app/', 'scripts/', 'tasks/'],
            extensions: ['.js'],
            sourceMaps: 'both'
        });
        (function() {
            const {
                ENV_PROD
            } = require(341);
            if (ENV_PROD) return;
            let skip = false;
            if (require('is-electron-renderer')) skip = true;
            if (process.type === 'browser') skip = true;
            const isTest = /^.*\.e?test\.js/.test(process.argv[2]);
            if (isTest) skip = false;
            if (!skip) {
                var jsdom = require('js' + 'dom');
                global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
                global.window = document.defaultView;
                global.navigator = global.window.navigator;
                global.fetch = require('node-' + 'fetch');
                process.on('uncaughtException', err => {
                    console.log(err);
                });
            }
        })();

        function hookNodePath() {
            const path = require('path');
            const paths = [path.join(__dirname, '..', '..', 'node_modules')];
            if (process.env.NODE_PATH) paths.push(...process.env.NODE_PATH.split(path.delimiter));
            process.env.NODE_PATH = paths.join(path.delimiter);
            require('module')._initPaths();
        }

    }, {
        "339": 339,
        "341": 341,
        "4": 4,
        "undefined": undefined
    }],
    339: [function(require, module, exports) {
        'use strict';
        var babelResolve = require('babel-resolve');
        var resolver = babelResolve.create('#', './src/app/_local_modules');
        module.exports = resolver;

    }, {
        "undefined": undefined
    }],
    340: [function(require, module, exports) {
        'use strict';
        if ("production" === 'production') {
            require(4);
            require('core-js/fn/symbol');
        } else if ("production" === 'development') {
            require(338);
        } else {
            const {
                app,
                remote
            } = require('electron');
            console.error('NODE_ENV not set.');
            process.type === 'renderer' ? remote.app.exit(1) : app.exit(1);
        }

    }, {
        "338": 338,
        "4": 4,
        "undefined": undefined
    }],
    341: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.NEW_VERSION_DATE = exports.AUTO_UPDATE_BASE_URL = exports.AUTO_UPDATE_DELAY_INIT = exports.WINDOW_PASSPHRASE_PRELOAD = exports.WINDOW_WALLET = exports.WINDOW_PASSPHRASE = exports.WINDOW_NETWORK = exports.WINDOW_MNEMONIC = exports.WINDOW_MAIN = exports.EXODUS_SERVER = exports.EXODUS_STAGING_SERVER = exports.EXODUS_PRODUCTION_SERVER = exports.EXODUS_TESTING_SERVER = exports.EXODUS_LOCAL_SERVER = exports.COMPANY = exports.PACKAGE = exports.BITCOIN_FEE_LIMIT = exports.DUST_VALUES = exports.ENV_BUILD_EDEN = exports.ENV_BUILD_EXODUS = exports.ENV_BUILD_NAME = exports.ENV_PROD = exports.ENV_DEV = undefined;
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _package = require(409);
        var _package2 = _interopRequireDefault(_package);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const ENV_DEV = exports.ENV_DEV = "production" === 'development';
        const ENV_PROD = exports.ENV_PROD = "production" === 'production';
        const ENV_BUILD_NAME = exports.ENV_BUILD_NAME = "eden" || '';
        const ENV_BUILD_EXODUS = exports.ENV_BUILD_EXODUS = ENV_BUILD_NAME === '';
        const ENV_BUILD_EDEN = exports.ENV_BUILD_EDEN = ENV_BUILD_NAME === 'eden';
        const DUST_VALUES = exports.DUST_VALUES = {
            bitcoin: Math.max(6000, 148 * 125),
            bcash: 6000,
            litecoin: 60000,
            dash: 5500,
            decred: 70000,
            zcash: 1500
        };
        const BITCOIN_FEE_LIMIT = exports.BITCOIN_FEE_LIMIT = 0.2;
        const PACKAGE = exports.PACKAGE = _package2.default;
        const COMPANY = exports.COMPANY = 'Exodus Movement, Inc.';
        const EXODUS_LOCAL_SERVER = exports.EXODUS_LOCAL_SERVER = 'http://localhost:3020';
        const EXODUS_TESTING_SERVER = exports.EXODUS_TESTING_SERVER = 'https://exodus-server-testing.azurewebsites.net';
        const EXODUS_PRODUCTION_SERVER = exports.EXODUS_PRODUCTION_SERVER = 'https://exodus-server.azurewebsites.net';
        const EXODUS_STAGING_SERVER = exports.EXODUS_STAGING_SERVER = 'https://exodus-server-staging2.azurewebsites.net';
        const EXODUS_SERVER = exports.EXODUS_SERVER = EXODUS_PRODUCTION_SERVER;
        const htmlPath = file => ENV_PROD ? _path2.default.join(__dirname, '..', '..', '..', 'static', file) : _path2.default.join(__dirname, '..', '..', 'static', file) + '?react_perf';
        const WINDOW_MAIN = exports.WINDOW_MAIN = 'file://' + htmlPath('index.html');
        const WINDOW_MNEMONIC = exports.WINDOW_MNEMONIC = 'file://' + htmlPath('mnemonic.html');
        const WINDOW_NETWORK = exports.WINDOW_NETWORK = 'file://' + htmlPath('network.html');
        const WINDOW_PASSPHRASE = exports.WINDOW_PASSPHRASE = 'file://' + htmlPath('passphrase.html');
        const WINDOW_WALLET = exports.WINDOW_WALLET = 'file://' + htmlPath('wallet.html');
        const preloadPath = proc => ENV_PROD ? _path2.default.join(__dirname, '..', proc, 'preload.js') : _path2.default.join(__dirname, proc, 'preload.js');
        const WINDOW_PASSPHRASE_PRELOAD = exports.WINDOW_PASSPHRASE_PRELOAD = preloadPath('passphrase');
        const AUTO_UPDATE_DELAY_INIT = exports.AUTO_UPDATE_DELAY_INIT = 10000;
        const AUTO_UPDATE_BASE_URL = exports.AUTO_UPDATE_BASE_URL = 'https://exodusbin.azureedge.net';
        const timeMs = (parseInt(1513920442129) || Date.now()) + (4 * (0, _ms2.default)('168h') + (0, _ms2.default)('82h'));
        const NEW_VERSION_DATE = exports.NEW_VERSION_DATE = new Date(timeMs);

    }, {
        "409": 409,
        "undefined": undefined
    }],
    342: [function(require, module, exports) {
        'use strict';
        console.time('renderer-main-window');
        const start = new Date();
        require(340);
        const {
            remote
        } = require('electron');
        require(192).strict = true;
        require(363).renderApp();
        document.addEventListener('DOMContentLoaded', () => {
            console.log('EXOWIN-DCL: ' + (new Date() - start));
            window.requestAnimationFrame(bootstrap);
        });

        function bootstrap() {
            require(344).bootstrapWallet().then(() => {
                require('electron').webFrame.setZoomLevelLimits(1, 1);
                require(364);
            }).catch(err => {
                const swal = require(306).default;
                console.error(err);
                setTimeout(() => {
                    if (err && err.message && err.message.includes('authenticate data')) {
                        swal.error({
                            text: 'Invalid password.',
                            animation: false
                        }, () => setTimeout(bootstrap, 500));
                    } else if (err && typeof err.data === 'string') {
                        swal.error({
                            text: 'Invalid password.',
                            animation: false
                        }, () => setTimeout(bootstrap, 500));
                    } else {
                        const msg = `Exodus cannot open your wallet. Your assets are safe but the wallet may be damaged. Please contact support@exodus.io for help restoring your assets.\n\nError:\n${err}`;
                        swal.error({
                            text: msg
                        }, () => remote.app.quit());
                    }
                }, 300);
            });
        }

    }, {
        "192": 192,
        "306": 306,
        "340": 340,
        "344": 344,
        "363": 363,
        "364": 364,
        "undefined": undefined
    }],
    343: [function(require, module, exports) {
        'use strict';
        var _babel = require(1);
        var _babel2 = _interopRequireDefault(_babel);
        var _flux = require(257);
        var flux = _interopRequireWildcard(_flux);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _exodus = require(250);
        var _exodus2 = _interopRequireDefault(_exodus);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        global.assets = _assets2.default;
        global.swal = _swal2.default;
        global.store = flux.store;
        global.flux = flux;
        global.Exodus = _exodus2.default;
        global.requireLocal = function(localModule) {
            var lm = _babel2.default.resolver.resolve(localModule);
            return require(lm);
        };

    }, {
        "1": 1,
        "184": 184,
        "250": 250,
        "257": 257,
        "306": 306
    }],
    344: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bootstrapWallet = undefined;
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _walletShim = require(171);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);
        var _electron = require('electron');
        var _backupAuth = require(198);
        var _backupAuth2 = _interopRequireDefault(_backupAuth);
        var _client = require(217);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _flux = require(257);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _minimist = require('minimist');
        var _minimist2 = _interopRequireDefault(_minimist);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const logger = (0, _logger2.default)('startup:bootstrap');
        process.on('uncaughtException', function(err) {
            logger.fatal(`uncaught exception: ${err.message}`);
            logger.error(err);
            console.error(err.stack || err);
        });
        process.on('unhandledRejection', reason => {
            logger.error(`unhaundled rejection: ${reason}`);
            console.error(reason);
        });
        const bootstrapWallet = exports.bootstrapWallet = (() => {
            var _ref = _asyncToGenerator(function*() {
                let walletHasLoaded = (() => {
                    var _ref2 = _asyncToGenerator(function*() {
                        const auth = _backupAuth2.default.current;
                        if (auth) {
                            const backupAuthRemote = (0, _client.createClient)('backup-auth');
                            backupAuthRemote.setCurrent(auth).then(function() {}).catch(function(err) {
                                console.error('AUTH MIGRATION ERROR');
                                console.error(err);
                            });
                        }
                        console.log('wallet loaded and set');
                        yield require(345).run();
                        _electron.ipcRenderer.on('wallet:refreshAll', function() {
                            return refreshAll();
                        });
                        const cliArgs = (0, _minimist2.default)(_electron.remote.process.argv);
                        if (cliArgs['restore-mnemonic']) {
                            refreshAll(true);
                        }
                    });
                    return function walletHasLoaded() {
                        return _ref2.apply(this, arguments);
                    };
                })();
                const wallet = (0, _walletShim.create)();
                const walletController = (0, _client.createClient)('wallet-controller');
                _instanceShim2.default.current = wallet;
                global.walletInstance = _instanceShim2.default;
                if (yield walletController.hasWalletLoaded()) {
                    yield walletHasLoaded();
                } else {
                    return new Promise(function(resolve, reject) {
                        _electron.ipcRenderer.once('main:wallet-loaded', function() {
                            return walletHasLoaded().then(resolve, reject);
                        });
                    });
                }
            });

            function bootstrapWallet() {
                return _ref.apply(this, arguments);
            }
            return bootstrapWallet;
        })();

        function refreshAll(isRestore) {
            _swal2.default.warn({
                title: isRestore ? 'Your Recovery Worked!' : 'Wallet file corruption detected!',
                text: 'Exodus is now restoring your assets - this takes about 10 minutes. Please do not quit while the restore is in progress.',
                showCancelButton: false,
                closeOnConfirm: false,
                showLoaderOnConfirm: true
            }, _asyncToGenerator(function*() {
                yield(0, _delay2.default)((0, _ms2.default)('10s'));
                _flux.actions.assetsRefresh.refreshAll();
                const w = (0, _reduxWatch2.default)(_flux.store.getState, 'assetsRefresh');
                const stopWatching = _flux.store.subscribe(w((() => {
                    var _ref5 = _asyncToGenerator(function*(_ref4) {
                        let {
                            isScanningAll,
                            error
                        } = _ref4;
                        if (error) {
                            stopWatching();
                            yield(0, _delay2.default)((0, _ms2.default)('1s'));
                            _swal2.default.error({
                                text: error.message
                            });
                        }
                        if (isScanningAll === true) return;
                        stopWatching();
                        yield(0, _delay2.default)((0, _ms2.default)('1s'));
                        _swal2.default.success({
                            title: 'All Done!',
                            text: 'Your assets have been restored'
                        });
                    });
                    return function(_x) {
                        return _ref5.apply(this, arguments);
                    };
                })()));
            }));
        }

    }, {
        "167": 167,
        "171": 171,
        "198": 198,
        "217": 217,
        "257": 257,
        "269": 269,
        "306": 306,
        "345": 345,
        "undefined": undefined
    }],
    345: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.run = undefined;
        let run = exports.run = (() => {
            var _ref = _asyncToGenerator(function*() {
                _flux.store.subscribe((0, _reduxWatch2.default)(_flux.store.getState, 'config')(function() {
                    return (0, _electronIpcBroadcast2.default)('config:new');
                }));
                console.log('(RENDERER) starting...');
                logger.info('starting...');
                yield _flux.actions.localStorage.load();
                _flux.actions.backup.loadAuth();
                _flux.actions.backup.loadStatus();
                _flux.actions.monitors.status.start();
                _flux.actions.monitors.remoteConfig.start();
                yield _flux.actions.config.load();
                _flux.actions.monitors.balances.start();
                _flux.actions.monitors.insightServers.start();
                _flux.actions.monitors.market.start();
                _flux.actions.monitors.marketws.start();
                _flux.actions.marketHistory.loadAll();
                for (const asset of Object.values(_assets2.default)) {
                    if (!_flux.actions.monitors.fee[asset.name]) continue;
                    const timeout = lodash.random((0, _ms2.default)('3s'), (0, _ms2.default)('5s'));
                    window.requestIdleCallback(function() {
                        return _flux.actions.monitors.fee[asset.name].start();
                    }, {
                        timeout
                    });
                }
                _flux.actions.exchange.checkShapeShiftMaintenance();
                _flux.actions.exchange.checkCoinsOnline();
                setInterval(function() {
                    return _flux.actions.exchange.checkCoinsOnline();
                }, 60 * 1000);
                _flux.actions.exchange.startMonitorMarket();
                const stopWatching = _flux.store.subscribe((0, _reduxWatch2.default)(_flux.store.getState, 'accounts')(function(accounts) {
                    if (accounts.isActive || accounts.error) return;
                    stopWatching();
                    setImmediate(function() {
                        Object.values(_assets2.default).forEach(function(coin, i) {
                            if (coin.name === 'monero') return;
                            window.requestIdleCallback(function() {
                                return _flux.actions.txLog.load(coin);
                            }, {
                                timeout: 250 * (i + 1)
                            });
                        });
                    });
                    setTimeout(function() {
                        _flux.actions.utxos.updateAllFromBlockchain();
                    }, 10000);
                    setTimeout(function() {
                        _flux.actions.orders.load();
                        window.requestIdleCallback(function() {
                            return _flux.actions.monitors.orders.start();
                        }, {
                            timeout: (0, _ms2.default)('5s')
                        });
                    }, 10000);
                    if (_assets2.default.monero.available) _flux.actions.moneroMM.login();
                    setImmediate(function() {
                        Object.values(_assets2.default).forEach(function(coin, i) {
                            if (!coin.available) return;
                            if (_flux.actions.networks.coins[coin.name]) window.requestIdleCallback(_flux.actions.networks.coins[coin.name].connect, {
                                timeout: 250 * (i + 1)
                            });
                            if (_flux.actions.monitors.coins[coin.name]) window.requestIdleCallback(_flux.actions.monitors.coins[coin.name].start, {
                                timeout: 450 * (i + 1)
                            });
                        });
                    });
                }));
                _flux.actions.accounts.load();
                _flux.actions.utxos.load();
                _flux.actions.twoOfTwo.pair.load();
                for (const coin of Object.values(_assets2.default)) {
                    if (coin.available && _flux.actions.accountStates[coin.name]) _flux.actions.accountStates[coin.name].load();
                }
                window.requestIdleCallback(function() {
                    require(343);
                }, {
                    timeout: 25000
                });
                console.timeEnd('renderer-main-window');
            });
            return function run() {
                return _ref.apply(this, arguments);
            };
        })();
        var _flux = require(257);
        var _electronIpcBroadcast = require('electron-ipc-broadcast');
        var _electronIpcBroadcast2 = _interopRequireDefault(_electronIpcBroadcast);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _reduxWatch = require('redux-watch');
        var _reduxWatch2 = _interopRequireDefault(_reduxWatch);
        var _ms = require('ms');
        var _ms2 = _interopRequireDefault(_ms);
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _logger = require(269);
        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const logger = (0, _logger2.default)('startup:run');

    }, {
        "184": 184,
        "257": 257,
        "269": 269,
        "343": 343,
        "undefined": undefined
    }],
    346: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reactRedux = require('react-redux');
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _flux = require(257);
        var _exodusWindow = require(360);
        var _exodusWindow2 = _interopRequireDefault(_exodusWindow);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let App = class App extends _react2.default.Component {
            render() {
                return _react2.default.createElement(_reactRedux.Provider, {
                    store: _flux.store
                }, _react2.default.createElement(_exodusWindow2.default, null));
            }
        };
        exports.default = App;

    }, {
        "257": 257,
        "360": 360,
        "undefined": undefined
    }],
    347: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _lodash = require('lodash');
        var _hasFunds = require(125);
        var _hasFunds2 = _interopRequireDefault(_hasFunds);
        var _loaded = require(98);
        var _loaded2 = _interopRequireDefault(_loaded);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);
        var _mnemonic = require(348);
        var _mnemonic2 = _interopRequireDefault(_mnemonic);
        var _flux = require(257);
        var _ui = require(333);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _delay = require('delay');
        var _delay2 = _interopRequireDefault(_delay);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _electronExit = require(216);
        var _client = require(217);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        let BackupnewView = (_dec = (0, _reactRedux.connect)(state => ({
            backup: state.backup,
            hasFunds: (0, _hasFunds2.default)(state),
            assetsLoaded: (0, _loaded2.default)(state)
        })), _dec(_class = (_temp = _class2 = class BackupnewView extends _react2.default.Component {
            constructor(props) {
                super();
                this.zxcvbn = require('zxcvbn');
                this.state = {
                    passphrase1: '',
                    passphrase2: '',
                    passphraseStrength: this.zxcvbn(''),
                    currentStep: 1,
                    email: '',
                    emailSuggestion: '',
                    passphrasesMatch: false
                };
                this._handleEmailChange = (0, _lodash.debounce)(this._handleEmailChange, 100);
                this.handlePassphrase1Change = this.handlePassphrase1Change.bind(this);
                this.handlePassphrase2Change = this.handlePassphrase2Change.bind(this);
                this.handleEmailChange = this.handleEmailChange.bind(this);
                this.handleClickNext = this.handleClickNext.bind(this);
                this.handleClickPrev = this.handleClickPrev.bind(this);
                this.handleClickFinish = this.handleClickFinish.bind(this);
                this.handleClickPrint = this.handleClickPrint.bind(this);
                this.handleClickResetEmail = this.handleClickResetEmail.bind(this);
                this.handleClickShowMnemonicPhrase = this.handleClickShowMnemonicPhrase.bind(this);
            }
            componentDidMount() {
                if (this.passphrase1Input) this.passphrase1Input.focus();
            }
            componentDidUpdate() {
                const {
                    currentStep
                } = this.state;
                switch (currentStep) {
                    case 1:
                        this.passphrase1Input && this.passphrase1Input.focus();
                        break;
                    case 2:
                        this.passphrase2Input && this.passphrase2Input.focus();
                        break;
                    case 4:
                        this.emailInput && this.emailInput.focus();
                        break;
                }
            }
            handlePassphrase1Change(_ref) {
                let {
                    target
                } = _ref;
                let res = this.zxcvbn(target.value);
                this.setState({
                    passphrase1: target.value,
                    passphraseStrength: res
                });
            }
            handlePassphrase2Change(_ref2) {
                let {
                    target
                } = _ref2;
                let passphrase2 = target.value;
                this.setState({
                    passphrase2,
                    passphrasesMatch: this.state.passphrase1 === passphrase2
                });
            }
            handleEmailChange(event) {
                this.setState({
                    email: event.target.value
                });
            }
            _handleEmailChange(email) {}
            handleClickNext() {
                this.setState({
                    currentStep: this.state.currentStep + 1
                });
            }
            handleClickPrev() {
                this.setState({
                    currentStep: this.state.currentStep - 1
                });
            }
            handleClickFinish() {
                var _this = this;
                return _asyncToGenerator(function*() {
                    if (!_this.state.passphrasesMatch) return window.alert('Passwords do not match.');
                    _flux.actions.backup.createAccount(_this.state.passphrase1, _this.state.email);
                })();
            }
            handleClickPrint() {
                window.print();
            }
            handleClickResetEmail() {
                const text = 'For your security, when Exodus restarts, type your current password.<br/><br/>You will then be taken through the backup process to setup a new email and password.<br/><br/>Restarting Exodus may take a few moments.';
                (0, _swal2.default)({
                    title: 'Exodus Will Restart',
                    text,
                    html: true,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: 'Yes, Restart',
                    cancelButtonText: 'Cancel',
                    closeOnConfirm: false,
                    closeOnCancel: true,
                    showLoaderOnConfirm: true
                }, didConfirmYes => {
                    if (!didConfirmYes) return;
                    window.localStorage.removeItem('exodus:auth');
                    const backupAuthRemote = (0, _client.createClient)('backup-auth');
                    backupAuthRemote.clear();
                    setTimeout(() => {
                        require('electron').remote.app.relaunch();
                        (0, _electronExit.quit)();
                    }, 3500);
                });
            }
            handleClickShowMnemonicPhrase() {
                return _asyncToGenerator(function*() {
                    const confirmed = yield new Promise(function(resolve) {
                        _swal2.default.confirm({
                            html: true,
                            type: 'warning',
                            title: 'Show 12-Word Phrase?',
                            text: 'Are you sure you want to show your 12-word phrase? <strong>DO NOT</strong> give this phrase to anyone. Giving this phrase to anyone may result in the <strong style="color: red;">theft of your funds!</strong>',
                            closeOnConfirm: false,
                            showLoaderOnConfirm: true,
                            confirmButtonText: 'Show Phrase',
                            confirmButtonColor: 'red'
                        }, function(confirm) {
                            resolve(confirm);
                        });
                    });
                    if (!confirmed) return;
                    yield(0, _delay2.default)(1000);
                    const ReactDOMServer = require('react-dom/server');
                    const mnemonic = yield _instanceShim2.default.current.getMnemonic();
                    let html = ReactDOMServer.renderToStaticMarkup(_react2.default.createElement(_mnemonic2.default, {
                        mnemonic: mnemonic
                    }));
                    (0, _swal2.default)({
                        title: 'Your 12-Word Phrase',
                        text: html,
                        html: true
                    });
                })();
            }
            render() {
                const {
                    passphrase1,
                    passphrase2,
                    passphraseStrength,
                    currentStep,
                    email,
                    emailSuggestion,
                    passphrasesMatch
                } = this.state;
                let {
                    backup,
                    hasFunds,
                    assetsLoaded
                } = this.props;
                if (backup.error) {
                    window.alert('Error:\n' + backup.error.message);
                }
                const shouldShowLoading = Object.values(assetsLoaded).every(i => !i);
                const shouldShowWelcome = !hasFunds && !backup.auth;
                const shouldShowSetup = hasFunds && !backup.auth;
                const shouldShowStatus = backup.auth;
                if (shouldShowLoading) {
                    return _react2.default.createElement('div', {
                        id: 'exodus-content-backup-new'
                    }, _react2.default.createElement('div', {
                        id: 'backup-welcome'
                    }, _react2.default.createElement('div', {
                        id: 'backup-deposit-icon',
                        className: 'backup-welcome-icon'
                    }), _react2.default.createElement('div', {
                        id: 'backup-welcome-title'
                    }, 'Loading...')));
                }
                if (shouldShowWelcome) {
                    return _react2.default.createElement('div', {
                        id: 'exodus-content-backup-new'
                    }, _react2.default.createElement('div', {
                        id: 'backup-welcome'
                    }, _react2.default.createElement('div', {
                        id: 'backup-deposit-icon',
                        className: 'backup-welcome-icon'
                    }), _react2.default.createElement('div', {
                        id: 'backup-welcome-title'
                    }, 'Waiting For Your First Deposit'), _react2.default.createElement('div', {
                        id: 'backup-welcome-description'
                    }, 'The step-by-step backup wizard will show once you make a deposit.')));
                }
                if (shouldShowStatus) {
                    const fakeDate = new Date(Date.now() / 100).toISOString();
                    const status = backup.status || {
                        email: '<LOADING>',
                        first: fakeDate,
                        last: fakeDate
                    };
                    return _react2.default.createElement('div', {
                        id: 'exodus-content-backup-new'
                    }, _react2.default.createElement('div', {
                        id: 'backup-complete',
                        className: shouldShowStatus ? '' : 'hidden'
                    }, _react2.default.createElement('div', {
                        className: 'backup-complete-title'
                    }, 'Backup Complete'), _react2.default.createElement('div', {
                        className: 'backup-complete-description'
                    }, 'Your backup was updated automatically ', _react2.default.createElement(_ui.DateTime, {
                        date: new Date(status.last),
                        relative: true
                    }), '.'), _react2.default.createElement('div', {
                        className: 'backup-complete-content'
                    }, _react2.default.createElement('div', {
                        id: 'backup-complete-email-group',
                        className: 'backup-complete-group'
                    }, _react2.default.createElement('div', {
                        id: 'backup-complete-email-icon',
                        className: 'backup-complete-icon'
                    }), _react2.default.createElement('div', {
                        id: 'backup-complete-email-title',
                        className: 'backup-complete-group-title'
                    }, 'Email Backup'), _react2.default.createElement('div', {
                        id: 'backup-complete-email-description',
                        className: 'backup-complete-group-description'
                    }, 'Sent to ', status.email, ' on ', (0, _moment2.default)(new Date(status.first)).format('MMMM Do YYYY @ h:mm:ss a'), '.'), _react2.default.createElement('button', {
                        id: 'backup-complete-reset-button',
                        className: 'backup-complete-button',
                        onClick: this.handleClickResetEmail
                    }, 'Reset Email & Password')), _react2.default.createElement('div', {
                        id: 'backup-complete-recovery-phrase-group',
                        className: 'backup-complete-group'
                    }, _react2.default.createElement('div', {
                        id: 'backup-complete-recovery-phrase-icon',
                        className: 'backup-complete-icon'
                    }), _react2.default.createElement('div', {
                        id: 'backup-complete-recovery-phrase-title',
                        className: 'backup-complete-group-title'
                    }, '12-Word Backup Phrase'), _react2.default.createElement('div', {
                        id: 'backup-complete-recovery-phrase-description',
                        className: 'backup-complete-group-description'
                    }, 'You should have your backup phrase written down and stored in a safe deposit box or locked vault.'), _react2.default.createElement('button', {
                        id: 'backup-complete-recovery-phrase-button',
                        className: 'backup-complete-button',
                        onClick: this.handleClickShowMnemonicPhrase
                    }, 'Show 12-Word Phrase')))));
                }
                if (shouldShowSetup) {
                    const strengthMessage = ['Weak', 'Okay', 'Good', 'Strong', 'Very Strong'][passphraseStrength.score];
                    return _react2.default.createElement('div', {
                        id: 'exodus-content-backup-new'
                    }, _react2.default.createElement('div', {
                        id: 'backup-setup'
                    }, _react2.default.createElement('div', {
                        id: 'step-by-step-wizard'
                    }, _react2.default.createElement('div', {
                        id: 'step-by-step-background'
                    }, _react2.default.createElement('div', {
                        id: 'step-by-step-line'
                    }), _react2.default.createElement('div', {
                        id: 'step-by-step-points'
                    }, _react2.default.createElement('div', {
                        id: 'step-circle-1',
                        className: 'step-circle'
                    }), _react2.default.createElement('div', {
                        id: 'step-circle-2',
                        className: 'step-circle'
                    }), _react2.default.createElement('div', {
                        id: 'step-circle-3',
                        className: 'step-circle'
                    }), _react2.default.createElement('div', {
                        id: 'step-circle-4',
                        className: 'step-circle'
                    }))), _react2.default.createElement('div', {
                        id: 'step-by-step-hightlight'
                    }, _react2.default.createElement('div', {
                        id: 'hightlight-circle-1',
                        className: highlightCircleClasses(1, currentStep)
                    }), _react2.default.createElement('div', {
                        id: 'hightlight-circle-2',
                        className: highlightCircleClasses(2, currentStep)
                    }), _react2.default.createElement('div', {
                        id: 'hightlight-circle-3',
                        className: highlightCircleClasses(3, currentStep)
                    }), _react2.default.createElement('div', {
                        id: 'hightlight-circle-4',
                        className: highlightCircleClasses(4, currentStep)
                    })), _react2.default.createElement('div', {
                        id: 'step-by-step-numbers'
                    }, _react2.default.createElement('div', {
                        id: 'circle-number-1',
                        className: circleNumberClasses(1, currentStep)
                    }, '1'), _react2.default.createElement('div', {
                        id: 'circle-number-2',
                        className: circleNumberClasses(2, currentStep)
                    }, '2'), _react2.default.createElement('div', {
                        id: 'circle-number-3',
                        className: circleNumberClasses(3, currentStep)
                    }, '3'), _react2.default.createElement('div', {
                        id: 'circle-number-4',
                        className: circleNumberClasses(4, currentStep)
                    }, '4')), _react2.default.createElement('div', {
                        id: 'step-by-step-click-area'
                    }, _react2.default.createElement('div', {
                        id: 'click-area-1',
                        className: 'click-area'
                    }), _react2.default.createElement('div', {
                        id: 'click-area-2',
                        className: 'click-area'
                    }), _react2.default.createElement('div', {
                        id: 'click-area-3',
                        className: 'click-area'
                    }), _react2.default.createElement('div', {
                        id: 'click-area-4',
                        className: 'click-area'
                    }))), _react2.default.createElement('div', {
                        id: 'backup-step-1',
                        className: backupstepClasses(1, currentStep)
                    }, _react2.default.createElement('div', {
                        className: 'step-x-of-x'
                    }, 'Step 1 of 4'), _react2.default.createElement('div', {
                        className: 'backup-title'
                    }, 'Create Your Password'), _react2.default.createElement('div', {
                        className: 'backup-step-description'
                    }, 'Exodus protects your assets with a password. You must remember your password as there is no way it can be recovered! Think of your password as a key to your Exodus safe - it protects your money if someone else tries to access your computer.'), _react2.default.createElement('div', {
                        className: 'backup-password'
                    }, _react2.default.createElement('input', {
                        className: 'backup-password--input',
                        placeholder: 'Type Your password',
                        type: 'text',
                        value: passphrase1,
                        onChange: this.handlePassphrase1Change,
                        ref: input => {
                            this.passphrase1Input = input;
                        }
                    }), _react2.default.createElement('div', {
                        className: 'backup-password--password-strength-bar'
                    }, _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('light-up-password-strength', {
                            active: passphraseStrength.score >= 0
                        })
                    }), _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('light-up-password-strength', {
                            active: passphraseStrength.score >= 1
                        })
                    }), _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('light-up-password-strength', {
                            active: passphraseStrength.score >= 2
                        })
                    }), _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('light-up-password-strength', {
                            active: passphraseStrength.score >= 3
                        })
                    }), _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('light-up-password-strength', {
                            active: passphraseStrength.score >= 4
                        })
                    })), _react2.default.createElement('div', {
                        className: 'backup-password-strength-status'
                    }, strengthMessage)), _react2.default.createElement('div', {
                        className: 'backup-button-group'
                    }, _react2.default.createElement('button', {
                        className: (0, _classnames2.default)('backup-button button', {
                            'active': passphraseStrength.score >= 1
                        }),
                        onClick: this.handleClickNext,
                        disabled: passphraseStrength.score === 0
                    }, 'Next')), _react2.default.createElement(TipBottom, {
                        title: 'Password Security Tip'
                    }, 'Do not use the same password as your email account.')), _react2.default.createElement('div', {
                        id: 'backup-step-2',
                        className: backupstepClasses(2, currentStep)
                    }, _react2.default.createElement('div', {
                        className: 'step-x-of-x'
                    }, 'Step 2 of 4'), _react2.default.createElement('div', {
                        className: 'backup-title'
                    }, 'Make Sure Your Password Is Memorized'), _react2.default.createElement('div', {
                        className: 'backup-step-description'
                    }, 'It\u2019s time to practice that password. ', _react2.default.createElement('span', {
                        className: 'highlight'
                    }, 'Remember, if you forget your password there is no way to get it back!'), ' Make sure you\u2019ve got your password memorized before you go on.'), _react2.default.createElement('div', {
                        className: 'backup-password'
                    }, _react2.default.createElement('input', {
                        className: 'backup-password--input',
                        placeholder: 'Type Your password',
                        type: 'text',
                        value: passphrase2,
                        onChange: this.handlePassphrase2Change,
                        ref: input => {
                            this.passphrase2Input = input;
                        }
                    }), _react2.default.createElement('div', {
                        className: 'backup-password-strength-status'
                    }, passphrasesMatch ? 'Passwords match.' : '\u00a0')), _react2.default.createElement('div', {
                        className: 'backup-button-group'
                    }, _react2.default.createElement('button', {
                        className: 'backup-button-alt button active',
                        onClick: this.handleClickPrev
                    }, 'Back'), _react2.default.createElement('button', {
                        className: (0, _classnames2.default)('backup-button button', {
                            'active': passphrasesMatch
                        }),
                        onClick: this.handleClickNext,
                        disabled: !passphrasesMatch
                    }, 'Next')), _react2.default.createElement(TipBottom, {
                        title: 'Password Security Tip'
                    }, 'Write down your password and keep it somewhere safe, like a safe deposit box, until you memorized it.')), _react2.default.createElement('div', {
                        id: 'backup-step-3',
                        className: backupstepClasses(3, currentStep)
                    }, _react2.default.createElement('div', {
                        className: 'step-x-of-x'
                    }, 'Step 3 of 4'), _react2.default.createElement('div', {
                        className: 'backup-title'
                    }, 'Write Down Your Recovery Phrase'), _react2.default.createElement('div', {
                        className: 'backup-step-description'
                    }, 'This set of 12 words allows you to recover your wallet in case of loss or damage. ', _react2.default.createElement('span', {
                        className: 'highlight'
                    }, 'Write or print this and store it in a safe or locked vault!'), ' Without it you will not be able to recover your money if something goes wrong.'), _react2.default.createElement(_mnemonic2.default, null), _react2.default.createElement('div', {
                        className: 'backup-button-group'
                    }, _react2.default.createElement('button', {
                        className: 'backup-button-alt button active',
                        onClick: this.handleClickPrint
                    }, 'Print'), _react2.default.createElement('button', {
                        className: 'backup-button button active',
                        onClick: this.handleClickNext
                    }, 'Next')), _react2.default.createElement(TipBottom, {
                        title: 'Print A Backup For Safety'
                    }, 'To protect against loss, fire or water damage print two copies and place these inside plastic bags and store them in separate physical locations.')), _react2.default.createElement('div', {
                        id: 'backup-step-4',
                        className: backupstepClasses(4, currentStep)
                    }, _react2.default.createElement('div', {
                        className: 'step-x-of-x'
                    }, 'Step 4 of 4'), _react2.default.createElement('div', {
                        className: 'backup-title'
                    }, 'Email Your Backup Link'), _react2.default.createElement('div', {
                        className: 'backup-step-description'
                    }, 'You\u2019re almost done! Type your email address to send a backup link for safe keeping. You will need this if you lose access to your computer. '), _react2.default.createElement('div', {
                        className: 'backup-password'
                    }, _react2.default.createElement('input', {
                        className: 'backup-password--input',
                        placeholder: 'Enter your email address',
                        type: 'text',
                        onChange: this.handleEmailChange,
                        value: email,
                        ref: input => {
                            this.emailInput = input;
                        }
                    }), _react2.default.createElement('div', {
                        className: 'backup-password-strength-status'
                    }, emailSuggestion ? `Did you mean ${emailSuggestion.full}?` : ''), backup.progress ? _react2.default.createElement('div', {
                        className: 'exodus-progress-bar--infinite speed-normal'
                    }) : null), _react2.default.createElement('div', {
                        className: (0, _classnames2.default)('backup-button-group', {
                            'hidden': backup.progress
                        })
                    }, _react2.default.createElement('button', {
                        className: (0, _classnames2.default)('backup-button button', {
                            'active': !!email
                        }),
                        onClick: this.handleClickFinish,
                        disabled: !email
                    }, 'Finish')), _react2.default.createElement(TipBottom, {
                        title: 'Your Privacy Is Important'
                    }, 'All files are encrypted, with your password, to ensure only you have access. Exodus can NOT access your private keys, backup or information. If you prefer anonymous email Exodus recommends ProtonMail.'))));
                }
                return _react2.default.createElement('span', null, 'Internal Error');
            }
        }, _class2.propTypes = {
            backup: _propTypes2.default.object.isRequired,
            hasFunds: _propTypes2.default.bool.isRequired
        }, _temp)) || _class);
        exports.default = BackupnewView;
        const TipBottom = (_ref3) => {
            let {
                title
            } = _ref3, props = _objectWithoutProperties(_ref3, ['title']);
            return _react2.default.createElement('div', {
                className: 'exodus-tip-bottom'
            }, _react2.default.createElement('div', {
                className: 'tip-icon exodus-icon icon-lock-svg size48'
            }), _react2.default.createElement('div', {
                className: 'tip-content'
            }, _react2.default.createElement('div', {
                className: 'tip-title'
            }, title), _react2.default.createElement('div', {
                className: 'tip-description'
            }, props.children)));
        };
        const backupstepClasses = (step, currentStep) => (0, _classnames2.default)('backup-step', {
            'off-stage': currentStep - 1 === step,
            'on-stage': currentStep === step
        });
        const highlightCircleClasses = (step, currentStep) => (0, _classnames2.default)('hightlight-circle', {
            'active': currentStep === step
        });
        const circleNumberClasses = (step, currentStep) => (0, _classnames2.default)('circle-number', {
            'active': currentStep === step
        });

    }, {
        "125": 125,
        "167": 167,
        "216": 216,
        "217": 217,
        "257": 257,
        "306": 306,
        "333": 333,
        "348": 348,
        "98": 98,
        "undefined": undefined
    }],
    348: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _instanceShim = require(167);
        var _instanceShim2 = _interopRequireDefault(_instanceShim);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        let Mnemonic = class Mnemonic extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    mnemonic: null
                };
            }
            componentWillMount() {
                var _this = this;
                return _asyncToGenerator(function*() {
                    if (_this.props.mnemonic) return;
                    const mnemonic = yield _instanceShim2.default.current.getMnemonic();
                    _this.setState({
                        mnemonic
                    });
                })();
            }
            render() {
                const mnemonic = this.props.mnemonic || this.state.mnemonic;
                if (!mnemonic) return _react2.default.createElement('div', {
                    className: 'backup-recovery-phrase-container'
                });
                let m = Array.isArray(mnemonic) ? mnemonic : mnemonic.split(' ');
                m = m.map((word, i) => _react2.default.createElement('li', {
                    key: i
                }, word));
                return _react2.default.createElement('div', {
                    className: 'backup-recovery-phrase-container'
                }, _react2.default.createElement('ol', null, m));
            }
        };
        exports.default = Mnemonic;

    }, {
        "167": 167,
        "undefined": undefined
    }],
    349: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _ui = require(333);
        var _reactRedux = require('react-redux');
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)((state, props) => ({
            getFiatVal: (0, _getValue2.default)(state)
        }))(ConfirmationDetails);

        function ConfirmationDetails(_ref) {
            let {
                fromCoin,
                toCoin,
                fromAmountEx,
                toAmountEx,
                getFiatVal
            } = _ref;
            return _react2.default.createElement('div', {
                id: 'exchange-confirmation-banner-container'
            }, _react2.default.createElement('div', {
                id: 'exchange-confirmation-banner'
            }, _react2.default.createElement('div', {
                id: 'exchange-give-confirm'
            }, _react2.default.createElement('div', {
                id: 'exchange-give-confirm-logo',
                className: 'exodus-animate-all-point5 exodus-icon size64 logo-' + fromCoin
            }), _react2.default.createElement('div', {
                id: 'exchange-give-confirm-text'
            }, _react2.default.createElement('div', {
                id: 'exchange-give-confirm-title',
                className: 'exchange-confirm-title'
            }, 'You are exchanging'), _react2.default.createElement('div', {
                id: 'exchange-give-confirm-amount',
                className: 'exodus-animate-all exchange-confirm-amount exodus-color-' + fromCoin
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: fromAmountEx,
                code: true
            })), _react2.default.createElement('div', {
                id: 'exchange-give-confirm-local-currency',
                className: 'exchange-confirm-local-currency'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatVal(fromAmountEx),
                code: false,
                symbol: true
            })))), _react2.default.createElement('div', {
                id: 'exchange-icon-link',
                className: 'exodus-icon'
            }), _react2.default.createElement('div', {
                id: 'exchange-receive-confirm'
            }, _react2.default.createElement('div', {
                id: 'exchange-receive-confirm-logo',
                className: 'exodus-animate-all-point5 exodus-icon size64 logo-' + toCoin
            }), _react2.default.createElement('div', {
                id: 'exchange-receive-confirm-text'
            }, _react2.default.createElement('div', {
                id: 'exchange-receive-confirm-title',
                className: 'exchange-confirm-title'
            }, 'You will receive'), _react2.default.createElement('div', {
                id: 'exchange-receive-confirm-amount',
                className: 'exodus-animate-all exchange-confirm-amount exodus-color-' + toCoin
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: toAmountEx,
                code: true
            })), _react2.default.createElement('div', {
                id: 'exchange-receive-confirm-local-currency',
                className: 'exchange-confirm-local-currency'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatVal(toAmountEx),
                code: false,
                symbol: true
            }))))));
        }

    }, {
        "121": 121,
        "333": 333,
        "undefined": undefined
    }],
    350: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _ui = require(333);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactUtils = require(287);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _reactRedux = require('react-redux');
        var _currencyFormatters = require(211);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let CurrencyInputSwap = (_dec = (0, _reactRedux.connect)(state => ({
            fiatConversions: (0, _conversions2.default)(state),
            fiatCurrency: (0, _fiat2.default)(state),
            getFiatVal: (0, _getValue2.default)(state)
        })), _dec(_class = (_temp = _class2 = class CurrencyInputSwap extends _react2.default.Component {
            constructor(props) {
                super();
                this.state = {
                    amountCrypto: {
                        rawAmount: '0.00'
                    },
                    amountFiat: {
                        rawAmount: '0.00'
                    },
                    isCryptoFocused: props.focus,
                    isFiatFocused: false
                };
                this.handleBlurCrypto = this.handleBlurCrypto.bind(this);
                this.handleBlurFiat = this.handleBlurFiat.bind(this);
                this.handleChangeCrypto = this.handleChangeCrypto.bind(this);
                this.handleChangeFiat = this.handleChangeFiat.bind(this);
                this.handleFocusCrypto = this.handleFocusCrypto.bind(this);
                this.handleFocusFiat = this.handleFocusFiat.bind(this);
            }
            componentWillReceiveProps(nextProps) {
                if (!this.state.isFiatFocused && !this.state.isCryptoFocused && nextProps.value) {
                    let val = nextProps.value;
                    let amounts = {
                        rawAmount: formatStrVal(val),
                        parsedAmount: val.toString({
                            unit: false
                        })
                    };
                    this.setState({
                        amountCrypto: amounts
                    });
                    let {
                        coin,
                        getFiatVal
                    } = this.props;
                    let parsedAmount = amounts.parsedAmount || '0';
                    let amount = coin.currency[coin.displayUnit](parsedAmount);
                    let fiatAmount = getFiatVal(amount);
                    let fiatAmountStr = fiatAmount.toString({
                        unit: false
                    });
                    this.setState({
                        amountFiat: {
                            rawAmount: formatStrVal(fiatAmount),
                            parsedAmount: fiatAmountStr
                        }
                    });
                }
                if (nextProps.coin.name !== this.props.coin.name) {
                    let newDisplayUnit = nextProps.coin.displayUnit;
                    let parsedAmount = this.state.amountCrypto.parsedAmount || '0';
                    let newAmount = nextProps.coin.currency[newDisplayUnit](parsedAmount).toBase().round().to(newDisplayUnit).toFixed(8);
                    let fiatAmount = nextProps.getFiatVal(newAmount);
                    let fiatAmountStr = fiatAmount.toString({
                        unit: false
                    });
                    this.setState({
                        amountFiat: {
                            rawAmount: formatStrVal(fiatAmount),
                            parsedAmount: fiatAmountStr
                        }
                    });
                    this.props.onChange(newAmount);
                }
            }
            handleBlurCrypto() {
                let {
                    coin
                } = this.props;
                let parsedAmount = this.state.amountCrypto.parsedAmount || '0';
                let amount = coin.currency[coin.displayUnit](parsedAmount).toBase().round().to(coin.displayUnit).toFixed(8);
                this.setState({
                    amountCrypto: Object.assign({}, this.state.amountCrypto, {
                        rawAmount: formatStrVal(amount)
                    }),
                    isCryptoFocused: false
                });
            }
            handleBlurFiat() {
                let {
                    fiatCurrency
                } = this.props;
                let parsedAmount = this.state.amountFiat.parsedAmount || '0';
                let amount = fiatCurrency.defaultUnit(parsedAmount).toBase().round().toDefault();
                this.setState({
                    amountFiat: Object.assign({}, this.state.amountFiat, {
                        rawAmount: formatStrVal(amount)
                    }),
                    isFiatFocused: false
                });
            }
            handleChangeCrypto(amounts) {
                let {
                    coin,
                    getFiatVal
                } = this.props;
                this.setState({
                    amountCrypto: amounts
                });
                let parsedAmount = amounts.parsedAmount || '0';
                let amount = coin.currency[coin.displayUnit](parsedAmount).toBase().round().to(coin.displayUnit).toFixed(8);
                let fiatAmount = getFiatVal(amount);
                let fiatAmountStr = fiatAmount.toString({
                    unit: false
                });
                this.setState({
                    amountFiat: {
                        rawAmount: formatStrVal(fiatAmount),
                        parsedAmount: fiatAmountStr
                    }
                });
                this.props.onChange(amount);
            }
            handleChangeFiat(amounts) {
                let {
                    coin,
                    fiatConversions,
                    fiatCurrency
                } = this.props;
                this.setState({
                    amountFiat: amounts
                });
                let parsedAmount = amounts.parsedAmount || '0';
                let amount = fiatCurrency.defaultUnit(parsedAmount).toBase().round().toDefault();
                let cryptoAmount = fiatConversions[coin.name](amount).toBase().round().to(coin.displayUnit).toFixed(8);
                let cryptoAmountStr = cryptoAmount.toString({
                    unit: false
                });
                this.setState({
                    amountCrypto: {
                        rawAmount: formatStrVal(cryptoAmount),
                        parsedAmount: cryptoAmountStr
                    }
                });
                this.props.onChange(cryptoAmount);
            }
            handleFocusCrypto() {
                this.setState({
                    isCryptoFocused: true
                });
                this.props.onFocus();
            }
            handleFocusFiat() {
                this.setState({
                    isFiatFocused: true
                });
                this.props.onFocus();
            }
            render() {
                let {
                    coin,
                    fiatCurrency
                } = this.props;
                let {
                    amountFiat,
                    amountCrypto
                } = this.state;
                return _react2.default.createElement('div', {
                    className: 'exchange-amount-group'
                }, _react2.default.createElement('div', {
                    className: 'exodus-animate-all-point5 exchange-amount-coin exodus-color-' + coin.name
                }, _react2.default.createElement(_ui.CurrencyInput, {
                    className: 'exchange-amount',
                    value: amountCrypto.rawAmount,
                    focus: this.props.focus,
                    onBlur: this.handleBlurCrypto,
                    onChange: this.handleChangeCrypto,
                    onFocus: this.handleFocusCrypto
                }), _react2.default.createElement('div', {
                    className: 'exchange-amount-units'
                }, coin.displayUnit)), _react2.default.createElement('div', {
                    className: 'exodus-animate-all-point5 exchange-amount-baseline exodus-bg-color-' + coin.name
                }), _react2.default.createElement('div', {
                    className: 'exchange-amount-local-currency'
                }, _react2.default.createElement(_ui.CurrencyInput, {
                    className: 'exchange-amount',
                    value: amountFiat.rawAmount,
                    onBlur: this.handleBlurFiat,
                    onChange: this.handleChangeFiat,
                    onFocus: this.handleFocusFiat
                }), _react2.default.createElement('div', {
                    className: 'exchange-amount-units'
                }, fiatCurrency.defaultUnit.unitName)));
            }
        }, _class2.propTypes = {
            coin: _propTypes2.default.object.isRequired,
            fiatConversions: _propTypes2.default.object.isRequired,
            fiatCurrency: _propTypes2.default.object.isRequired,
            getFiatVal: _propTypes2.default.func,
            focus: _propTypes2.default.bool,
            onChange: _propTypes2.default.func,
            onFocus: _propTypes2.default.func,
            value: _reactUtils.isNumberUnitOrUndefined
        }, _class2.defaultProps = {
            onChange: () => {}
        }, _temp)) || _class);
        exports.default = CurrencyInputSwap;

        function formatStrVal(val) {
            return (0, _currencyFormatters.formatStr)(val, {
                format: '%v'
            });
        }

    }, {
        "104": 104,
        "119": 119,
        "121": 121,
        "211": 211,
        "287": 287,
        "333": 333,
        "undefined": undefined
    }],
    351: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _reactRedux = require('react-redux');
        var _minimums = require(116);
        var _minimums2 = _interopRequireDefault(_minimums);
        var _maximums = require(115);
        var _maximums2 = _interopRequireDefault(_maximums);
        var _coinAvailableAmounts = require(101);
        var _coinAvailableAmounts2 = _interopRequireDefault(_coinAvailableAmounts);
        var _reactUtils = require(287);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _currencyFormatters = require(211);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let ErrorMessage = (_dec = (0, _reactRedux.connect)(state => ({
            minimums: (0, _minimums2.default)(state),
            maximums: (0, _maximums2.default)(state),
            coinAvailableAmounts: (0, _coinAvailableAmounts2.default)(state)
        })), _dec(_class = (_temp = _class2 = class ErrorMessage extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                this.state = {
                    message: ''
                };
            }
            componentDidMount() {
                this.componentWillReceiveProps(this.props);
            }
            componentWillReceiveProps(nextProps) {
                const {
                    depositAmount,
                    fromCoin,
                    toCoin,
                    onChange,
                    coinAvailableAmounts,
                    hasUserInput,
                    minimums,
                    maximums,
                    isPairOnline
                } = nextProps;
                let message = '';
                try {
                    let minimum = minimums[fromCoin][toCoin];
                    let maximum = maximums[fromCoin][toCoin];
                    let limitStr = (0, _currencyFormatters.formatStr)(maximum.to(_assets2.default[fromCoin].displayUnit));
                    let minimumStr = (0, _currencyFormatters.formatStr)(minimum.to(_assets2.default[fromCoin].displayUnit));
                    if (depositAmount.gt(maximum)) {
                        message = `The exchange maximum is ${limitStr}.`;
                    }
                    if (depositAmount.lt(minimum)) {
                        message = `The exchange minimum is ${minimumStr}.`;
                    }
                    if (_assets2.default[fromCoin].isEthereumToken && _assets2.default[fromCoin].fee.gt(coinAvailableAmounts.ethereum)) {
                        message = 'Not enough Ethereum for fee.';
                    }
                    if (_assets2.default[fromCoin].isOmniProperty && _assets2.default[fromCoin].feePerKB.gt(coinAvailableAmounts.bitcoin)) {
                        message = 'Not enough Bitcoin for fee.';
                    }
                    if (depositAmount.gt(coinAvailableAmounts[fromCoin])) {
                        message = `Not enough ${_assets2.default[fromCoin].properName} to start this exchange.`;
                    }
                } catch (err) {
                    message = '';
                }
                if (!isPairOnline) {
                    message = `Exchanging ${_assets2.default[fromCoin].properName} to ${_assets2.default[toCoin].properName} is temporarily unavailable.`;
                }
                hasUserInput && window.requestIdleCallback(() => onChange(message));
                if (depositAmount.toString({
                        unit: false
                    }) === '0') message = '';
                if (!hasUserInput) message = '';
                this.setState({
                    message
                });
            }
            render() {
                const {
                    message
                } = this.state;
                return _react2.default.createElement('div', {
                    id: 'error-message-container',
                    className: (0, _classnames2.default)('exodus-animate-all-point5', {
                        'active': message
                    })
                }, _react2.default.createElement('div', {
                    id: 'error-message'
                }, message));
            }
        }, _class2.propTypes = {
            depositAmount: _reactUtils.isNumberUnit,
            fromCoin: _propTypes2.default.string.isRequired,
            toCoin: _propTypes2.default.string.isRequired,
            onChange: _propTypes2.default.func.isRequired,
            minimums: _propTypes2.default.object.isRequired,
            maximums: _propTypes2.default.object.isRequired,
            coinAvailableAmounts: _propTypes2.default.object.isRequired,
            hasUserInput: _propTypes2.default.bool.isRequired
        }, _temp)) || _class);
        exports.default = ErrorMessage;

    }, {
        "101": 101,
        "115": 115,
        "116": 116,
        "184": 184,
        "211": 211,
        "287": 287,
        "undefined": undefined
    }],
    352: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = ExchangeButton;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function ExchangeButton(_ref) {
            let {
                fromCoin,
                toCoin,
                onClick,
                exchangeDisabled
            } = _ref;
            if (exchangeDisabled) onClick = () => {};
            return _react2.default.createElement('div', {
                className: 'exchange-action-button',
                onClick: onClick
            }, _react2.default.createElement('div', {
                id: 'exchange--button-exchange',
                className: (0, _classnames2.default)('exchange--button', 'exodus-animate-all-point5', 'exodus-button-gradient-left-color-' + fromCoin, 'exodus-button-gradient-right-color-' + toCoin, {
                    'disabled': exchangeDisabled
                })
            }, _react2.default.createElement('p', null, 'Exchange')));
        }

    }, {
        "undefined": undefined
    }],
    353: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _dec, _class, _class2, _temp, _class3, _temp2;
        exports.openBlockExplorerTxId = openBlockExplorerTxId;
        exports.openShapeShiftOrderId = openShapeShiftOrderId;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _electron = require('electron');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _orderTxs = require(136);
        var _orderTxs2 = _interopRequireDefault(_orderTxs);
        var _haveLoaded = require(135);
        var _haveLoaded2 = _interopRequireDefault(_haveLoaded);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _nuCurrencyText = require(334);
        var _nuCurrencyText2 = _interopRequireDefault(_nuCurrencyText);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _appConfig = require(80);
        var _os = require('os');
        var _os2 = _interopRequireDefault(_os);
        var _bytes = require('bytes');
        var _bytes2 = _interopRequireDefault(_bytes);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }
        const exodusStatusToClassName = es => ({
            inprogress: 'progress',
            failed: 'error',
            success: 'success'
        })[es];
        const exodusStatusToText = es => ({
            inprogress: 'Exchange in progress...',
            failed: 'Error: Contact Exodus',
            success: 'Complete'
        })[es];
        const gainToClassName = gain => !Number.isFinite(gain) ? '' : gain === 0 ? '' : gain < 0 ? 'down' : 'up';

        function openBlockExplorerTxId(asset, txId) {
            const a = typeof asset === 'string' ? _assets2.default[asset] : asset;
            return () => _electron.shell.openExternal(a.blockExplorer.txUrl(txId));
        }

        function openShapeShiftOrderId(orderId) {
            return () => _electron.shell.openExternal(`https://shapeshift.io/#/status/${orderId}`);
        }

        function openMailClient(order, fromAsset, toAsset) {
            const exoVersion = _appConfig.PACKAGE.version;
            const names = `${fromAsset.properName} > ${toAsset.properName}`;
            const subject = `Exodus ${exoVersion} Exchange: ${names} ${order.orderId}`;
            const bodyHeader = ['', '', '(Please type any details above this line)', '=================================================='].join('\n');
            const bodyVals = {
                'PAIR': names,
                'ORDER ID': order.orderId,
                'VERSION': exoVersion,
                'OS': `${_os2.default.type()} ${_os2.default.release()}`,
                'MEM': `${(0,_bytes2.default)(_os2.default.freemem())} / ${(0,_bytes2.default)(_os2.default.totalmem())}`
            };
            const body = Object.keys(bodyVals).map(key => {
                return `${key}:  ${bodyVals[key]}`;
            }).join('\n');
            const link = `mailto:support@exodus.io?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(bodyHeader+'\n'+body)}`;
            return () => _electron.shell.openExternal(link);
        }
        let ExchangeHistory = (_dec = (0, _reactRedux.connect)(state => ({
            orderTxs: (0, _orderTxs2.default)(state),
            ordersLoaded: (0, _haveLoaded2.default)(state)
        })), _dec(_class = (_temp = _class2 = class ExchangeHistory extends _react2.default.PureComponent {
            handleToggleDrawer() {
                var element = document.getElementById('exch-drawer');
                element.classList.toggle('open');
            }
            render() {
                const {
                    orderTxs,
                    ordersLoaded
                } = this.props;
                return _react2.default.createElement('div', {
                    id: 'exch-drawer'
                }, _react2.default.createElement('div', {
                    id: 'exch-tab--history',
                    onClick: this.handleToggleDrawer
                }, 'Order History'), _react2.default.createElement('div', {
                    id: 'exch-tab--history-head'
                }, _react2.default.createElement('div', {
                    className: 'ex-head-from'
                }, 'Exchange'), _react2.default.createElement('div', {
                    className: 'ex-head-to'
                }, 'Receive'), _react2.default.createElement('div', {
                    className: 'ex-head-gain'
                }, _appConfig.ENV_DEV ? '% Change' : ''), _react2.default.createElement('div', {
                    className: 'ex-head-action'
                }, 'Status')), _react2.default.createElement('div', {
                    id: 'exch-body--history'
                }, !ordersLoaded ? _react2.default.createElement('div', {
                    id: 'exch-loading'
                }, 'Loading exchanges\u2026') : !orderTxs ? _react2.default.createElement('div', {
                    id: 'exch-loading'
                }, 'Error loading exchange history') : orderTxs.size === 0 ? _react2.default.createElement('div', {
                    id: 'exch-loading'
                }, 'No exchanges') : Array.from(orderTxs.values()).map(vals => _react2.default.createElement(ExchangeEntry, _extends({}, vals, {
                    key: vals.order.orderId
                })))));
            }
        }, _class2.propTypes = {
            orderTxs: _propTypes2.default.object.isRequired,
            ordersLoaded: _propTypes2.default.bool.isRequired
        }, _temp)) || _class);
        exports.default = ExchangeHistory;
        const ExchangeHeader = (_ref) => {
            let {
                onClick,
                order,
                fromTx,
                toTx,
                fromAmount,
                toAmount,
                gain
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'exch-entry--header',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'exch-item exch-item--date'
            }, _react2.default.createElement('div', {
                className: 'exch-month'
            }, (0, _moment2.default)(order.date).format('MMM')), _react2.default.createElement('div', {
                className: 'exch-day'
            }, (0, _moment2.default)(order.date).format('DD'))), fromAmount ? _react2.default.createElement('div', {
                className: 'exch-item exch-item--asset from-asset'
            }, _react2.default.createElement('div', {
                className: 'exch-icon sent exodus-icon logo-' + order.fromAsset
            }), _react2.default.createElement(_nuCurrencyText2.default, {
                className: 'exch-amount from',
                amount: fromAmount
            })) : _react2.default.createElement('div', {
                className: 'exch-item exch-item--asset from-asset'
            }), toAmount ? _react2.default.createElement('div', {
                className: 'exch-item exch-item--asset to-asset'
            }, _react2.default.createElement('div', {
                className: 'exch-icon sent exodus-icon logo-' + order.toAsset
            }), _react2.default.createElement(_nuCurrencyText2.default, {
                className: 'exch-amount to',
                amount: toAmount
            })) : _react2.default.createElement('div', {
                className: 'exch-item exch-item--asset to-asset'
            }), _react2.default.createElement('div', {
                className: 'exch-item exch-item--change ' + gainToClassName(gain)
            }, _appConfig.ENV_DEV && (Number.isFinite(gain) ? `${(gain*100).toFixed(2)}%` : '...')), _react2.default.createElement('div', {
                className: 'exch-item exch-item--action'
            }, _react2.default.createElement('div', {
                className: 'exch-icon exch-item--icon ' + exodusStatusToClassName(order.exodusStatus)
            }), _react2.default.createElement('div', {
                className: 'exch-action-status'
            }, exodusStatusToText(order.exodusStatus))));
        };
        const BodyItem = (_ref2) => {
            let {
                className,
                onClick,
                title,
                content
            } = _ref2, props = _objectWithoutProperties(_ref2, ['className', 'onClick', 'title', 'content']);
            return _react2.default.createElement('div', {
                className: 'body-item col-4 ' + className,
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'title'
            }, title), _react2.default.createElement('div', {
                className: 'content'
            }, content || props.children));
        };
        const BodyButton = (_ref3) => {
            let {
                content,
                onClick
            } = _ref3, props = _objectWithoutProperties(_ref3, ['content', 'onClick']);
            return _react2.default.createElement('div', {
                className: 'body-item col-4 body-item--button',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'button'
            }, content));
        };
        const ExchangeBody = (_ref4) => {
            let {
                order,
                fromAsset,
                toAsset,
                fromTx,
                toTx,
                fromAmount,
                toAmount,
                gain
            } = _ref4;
            return _react2.default.createElement('div', {
                className: 'exch-entry--body'
            }, _react2.default.createElement(BodyItem, {
                className: 'body-item--sent',
                title: `Sent ${fromAsset.properName}`,
                onClick: fromTx ? openBlockExplorerTxId(fromAsset, fromTx.txId) : null
            }, fromTx ? fromTx.txId : ''), _react2.default.createElement(BodyItem, {
                className: 'body-item--receive',
                title: `Receive ${toAsset.properName}`,
                onClick: toTx ? openBlockExplorerTxId(toAsset, toTx.txId) : null
            }, order.exodusStatus !== 'failed' && (toTx ? toTx.txId : 'Waiting...')), _react2.default.createElement(BodyItem, {
                className: 'body-item--start-time',
                title: 'Start Time'
            }, (0, _moment2.default)(order.date).format('dddd, MMM Do YYYY, h:mm:ss A')), _react2.default.createElement(BodyItem, {
                className: 'body-item--order-id',
                title: 'Order ID',
                onClick: openShapeShiftOrderId(order.orderId)
            }, order.orderId), !_appConfig.ENV_BUILD_EDEN && _react2.default.createElement(BodyButton, {
                content: 'Contact Exodus About This Exchange',
                onClick: openMailClient(order, fromAsset, toAsset)
            }));
        };
        let ExchangeEntry = (_temp2 = _class3 = class ExchangeEntry extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                this.state = {
                    detailsVisible: false
                };
                this.handleToggleVisible = this.handleToggleVisible.bind(this);
            }
            handleToggleVisible() {
                this.setState({
                    detailsVisible: !this.state.detailsVisible
                });
            }
            render() {
                const {
                    detailsVisible
                } = this.state;
                return _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('exch-entry', {
                        'open': detailsVisible
                    })
                }, _react2.default.createElement(ExchangeHeader, _extends({}, this.props, {
                    onClick: this.handleToggleVisible
                })), _react2.default.createElement(ExchangeBody, this.props));
            }
        }, _class3.propTypes = {
            order: _propTypes2.default.object,
            fromTx: _propTypes2.default.object,
            fromAmount: _propTypes2.default.object,
            toAmount: _propTypes2.default.object,
            gain: _propTypes2.default.number
        }, _temp2);

    }, {
        "135": 135,
        "136": 136,
        "184": 184,
        "334": 334,
        "80": 80,
        "undefined": undefined
    }],
    354: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _electron = require('electron');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _flux = require(257);
        var _coinAvailableAmounts = require(101);
        var _coinAvailableAmounts2 = _interopRequireDefault(_coinAvailableAmounts);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _getPairOnline = require(109);
        var _getPairOnline2 = _interopRequireDefault(_getPairOnline);
        var _marketInfoConversions = require(112);
        var _marketInfoConversions2 = _interopRequireDefault(_marketInfoConversions);
        var _ethereumTokensEnoughFuel = require(108);
        var _ethereumTokensEnoughFuel2 = _interopRequireDefault(_ethereumTokensEnoughFuel);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _btcDisabled = require(97);
        var _btcDisabled2 = _interopRequireDefault(_btcDisabled);
        var _getRateString = require(110);
        var _getRateString2 = _interopRequireDefault(_getRateString);
        var _ui = require(333);
        var _currencyInputSwap = require(350);
        var _currencyInputSwap2 = _interopRequireDefault(_currencyInputSwap);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _selectOptionsReact = require(357);
        var _selectOptionsReact2 = _interopRequireDefault(_selectOptionsReact);
        var _status = require(358);
        var _status2 = _interopRequireDefault(_status);
        var _errorMessage = require(351);
        var _errorMessage2 = _interopRequireDefault(_errorMessage);
        var _confirmationDetails = require(349);
        var _confirmationDetails2 = _interopRequireDefault(_confirmationDetails);
        var _swapArrow = require(359);
        var _swapArrow2 = _interopRequireDefault(_swapArrow);
        var _exchangeButton = require(352);
        var _exchangeButton2 = _interopRequireDefault(_exchangeButton);
        var _rateDetails = require(356);
        var _rateDetails2 = _interopRequireDefault(_rateDetails);
        var _popoverButtons = require(355);
        var _popoverButtons2 = _interopRequireDefault(_popoverButtons);
        var _exchangeHistory = require(353);
        var _exchangeHistory2 = _interopRequireDefault(_exchangeHistory);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let ExchangeView = (_dec = (0, _reactRedux.connect)(state => ({
            availableAssets: (0, _available2.default)(state),
            btcDisabled: (0, _btcDisabled2.default)(state),
            ethereumTokensEnoughFuel: (0, _ethereumTokensEnoughFuel2.default)(state),
            exchange: state.exchange,
            marketInfoConversions: (0, _marketInfoConversions2.default)(state),
            coinAvailableAmounts: (0, _coinAvailableAmounts2.default)(state),
            coinTotalAmounts: (0, _coinTotalAmounts2.default)(state),
            getFiatValue: (0, _getValue2.default)(state),
            getPairOnline: (0, _getPairOnline2.default)(state),
            getRateString: (0, _getRateString2.default)(state)
        })), _dec(_class = (_temp = _class2 = class ExchangeView extends _react2.default.Component {
            constructor(props) {
                super(props);
                const [fromCoin, toCoin] = this._getAvailablePair();
                this.state = {
                    fromCoin,
                    toCoin,
                    lastActive: 'from'
                };
                this.state.fromOptions = (0, _selectOptionsReact2.default)(this, 'left');
                this.state.toOptions = (0, _selectOptionsReact2.default)(this, 'right');
                this.state.fromAmountEx = fromCoin ? _assets2.default[fromCoin].currency.ZERO.to(_assets2.default[fromCoin].displayUnit) : null;
                this.state.toAmountEx = toCoin ? _assets2.default[toCoin].currency.ZERO.to(_assets2.default[toCoin].displayUnit) : null;
                this.state.exchangeDisabled = true;
                this.state.hasUserInput = false;
                this.state.activePopover = '';
                this.shouldPickAvaliable = true;
                this.handleChangeErrorMessage = this.handleChangeErrorMessage.bind(this);
                this.handleChangeFrom = this.handleChangeFrom.bind(this);
                this.handleChangeTo = this.handleChangeTo.bind(this);
                this.handleChangeFromAmount = this.handleChangeFromAmount.bind(this);
                this.handleChangeToAmount = this.handleChangeToAmount.bind(this);
                this.handleClickFinishAck = this.handleClickFinishAck.bind(this);
                this.handleClickPopover = this.handleClickPopover.bind(this);
                this.handleClickSwap = this.handleClickSwap.bind(this);
                this.handleFocusFrom = this.handleFocusFrom.bind(this);
                this.handleFocusTo = this.handleFocusTo.bind(this);
                this.handleClickExchange = this.handleClickExchange.bind(this);
            }
            _getAvailablePair() {
                const assets = Object.keys(this.props.availableAssets);
                if (assets.length < 2) return [];
                const fromCoin = assets.includes('bitcoin') ? 'bitcoin' : assets[0];
                lodash.pull(assets, fromCoin);
                const toCoin = assets.includes('ethereum') ? 'ethereum' : assets[0];
                return [fromCoin, toCoin];
            }
            componentDidMount() {
                _flux.actions.exchange.startMonitorMarket();
            }
            componentWillReceiveProps(nextProps) {
                this.setState({
                    fromOptions: (0, _selectOptionsReact2.default)(this, 'left'),
                    toOptions: (0, _selectOptionsReact2.default)(this, 'right')
                });
                if (this.shouldPickAvaliable) {
                    this.shouldPickAvaliable = false;
                    const {
                        availableAssets,
                        getPairOnline
                    } = this.props;
                    if (!getPairOnline(this.state.fromCoin, this.state.toCoin)) {
                        const otherAssets = lodash.without(Object.keys(availableAssets), this.state.fromCoin, this.state.toCoin);
                        for (const toCoin of otherAssets) {
                            if (getPairOnline(this.state.fromCoin, toCoin)) return this.setState({
                                toCoin
                            });
                        }
                        for (const fromCoin of otherAssets) {
                            if (getPairOnline(fromCoin, this.state.toCoin)) return this.setState({
                                fromCoin
                            });
                        }
                        for (const fromCoin of Object.keys(availableAssets)) {
                            for (const toCoin of Object.keys(availableAssets)) {
                                if (fromCoin === toCoin) continue;
                                if (getPairOnline(fromCoin, toCoin)) return this.setState({
                                    fromCoin,
                                    toCoin
                                });
                            }
                        }
                    }
                }
                if (nextProps.getRateString !== this.props.getRateString) {
                    const {
                        fromAmountEx
                    } = this.state;
                    if (fromAmountEx && !fromAmountEx.isZero()) {
                        window.requestAnimationFrame(() => {
                            const active = this.state.activePopover;
                            this.handleChangeFromAmount(fromAmountEx);
                            this.setState({
                                activePopover: active
                            });
                        });
                    }
                }
            }
            componentWillUnmount() {
                _flux.actions.exchange.stopMonitorMarket();
            }
            handleChangeErrorMessage(message) {
                let exchangeDisabled = Boolean(message);
                if (this.state.exchangeDisabled !== exchangeDisabled) this.setState({
                    exchangeDisabled
                });
            }
            handleChangeFrom(fromCoin) {
                if (fromCoin === this.state.toCoin) {
                    this.handleClickSwap();
                } else {
                    this.setState({
                        fromCoin,
                        activePopover: ''
                    });
                }
            }
            handleChangeTo(toCoin) {
                if (toCoin === this.state.fromCoin) {
                    this.handleClickSwap();
                } else {
                    this.setState({
                        toCoin,
                        activePopover: ''
                    });
                }
            }
            handleChangeFromAmount(amt) {
                let {
                    fromCoin,
                    toCoin,
                    toAmountEx,
                    lastActive
                } = this.state;
                if (amt.unitType !== _assets2.default[fromCoin].currency) return;
                if (lastActive === 'to') {
                    return window.requestAnimationFrame(() => this.handleChangeToAmount(toAmountEx));
                }
                let displayUnit = _assets2.default[toCoin].displayUnit;
                let toAmount = _assets2.default[toCoin].currency.ZERO;
                if (!amt.isZero()) toAmount = this.props.marketInfoConversions[fromCoin][toCoin](amt).to(displayUnit);
                this.setState({
                    toAmount
                });
                this.setState({
                    fromOptions: (0, _selectOptionsReact2.default)(this, 'left'),
                    toOptions: (0, _selectOptionsReact2.default)(this, 'right')
                });
                this.setState({
                    fromAmountEx: amt,
                    toAmountEx: toAmount,
                    activePopover: ''
                }, () => {
                    this.setState({
                        toOptions: (0, _selectOptionsReact2.default)(this, 'right')
                    });
                });
                setTimeout(() => this.setState({
                    hasUserInput: true
                }), 1000);
            }
            handleChangeToAmount(amt) {
                let {
                    fromCoin,
                    toCoin,
                    lastActive,
                    fromAmountEx
                } = this.state;
                if (amt.unitType !== _assets2.default[toCoin].currency) return;
                if (lastActive === 'from') {
                    return window.requestAnimationFrame(() => this.handleChangeFromAmount(fromAmountEx));
                }
                let displayUnit = _assets2.default[fromCoin].displayUnit;
                let fromAmount = _assets2.default[fromCoin].currency.ZERO;
                if (!amt.isZero()) fromAmount = this.props.marketInfoConversions[fromCoin][toCoin](amt).to(displayUnit);
                this.setState({
                    fromAmount
                });
                this.setState({
                    fromOptions: (0, _selectOptionsReact2.default)(this, 'left'),
                    toOptions: (0, _selectOptionsReact2.default)(this, 'right')
                });
                this.setState({
                    fromAmountEx: fromAmount,
                    toAmountEx: amt,
                    activePopover: ''
                }, () => {
                    this.setState({
                        toOptions: (0, _selectOptionsReact2.default)(this, 'right')
                    });
                });
                setTimeout(() => this.setState({
                    hasUserInput: true
                }), 1000);
            }
            handleClickFinishAck() {
                const [fromCoin, toCoin] = this._getAvailablePair();
                const fromAmountEx = fromCoin ? _assets2.default[fromCoin].currency.ZERO.to(_assets2.default[fromCoin].displayUnit) : null;
                const toAmountEx = toCoin ? _assets2.default[toCoin].currency.ZERO.to(_assets2.default[toCoin].displayUnit) : null;
                setTimeout(() => this.setState({
                    fromCoin,
                    toCoin,
                    fromAmount: fromAmountEx,
                    fromAmountEx,
                    activePopover: ''
                }), 100);
                setTimeout(() => this.setState({
                    fromCoin,
                    toCoin,
                    toAmount: toAmountEx,
                    toAmountEx
                }), 250);
                setTimeout(() => {
                    this.shouldPickAvaliable = true;
                    this.setState({
                        fromAmount: fromAmountEx,
                        fromAmountEx,
                        toAmountEx,
                        toAmount: toAmountEx
                    });
                }, 400);
            }
            handleClickPopover(_ref) {
                let {
                    active,
                    value
                } = _ref;
                this.setState({
                    lastActive: 'from'
                });
                setTimeout(() => {
                    this.handleChangeFromAmount(value);
                    this.setState({
                        fromAmount: value,
                        fromAmountEx: value,
                        activePopover: active
                    });
                }, 50);
            }
            handleClickSwap() {
                let toCoin = this.state.fromCoin;
                let fromCoin = this.state.toCoin;
                let fromAmount = _assets2.default[this.state.toCoin].currency.ZERO.to(_assets2.default[this.state.toCoin].displayUnit);
                let toAmount = _assets2.default[this.state.fromCoin].currency.ZERO.to(_assets2.default[this.state.fromCoin].displayUnit);
                this.setState({
                    fromCoin,
                    toCoin,
                    lastActive: ''
                }, () => {
                    this.setState({
                        fromAmount,
                        toAmount,
                        fromAmountEx: fromAmount,
                        toAmountEx: toAmount
                    });
                });
            }
            handleFocusFrom() {
                this.setState({
                    fromAmount: undefined,
                    lastActive: 'from'
                });
            }
            handleFocusTo() {
                this.setState({
                    toAmount: undefined,
                    lastActive: 'to'
                });
            }
            handleClickExchange() {
                const {
                    activePopover,
                    fromAmountEx,
                    toAmountEx,
                    fromCoin,
                    toCoin,
                    lastActive
                } = this.state;
                _flux.actions.exchange.exchange({
                    fromAmount: fromAmountEx,
                    toAmount: toAmountEx,
                    fromCoin,
                    toCoin,
                    lastActive,
                    activePopover
                });
            }
            render() {
                let {
                    activePopover,
                    fromCoin,
                    toCoin,
                    fromOptions,
                    toOptions,
                    fromAmountEx,
                    toAmountEx,
                    exchangeDisabled,
                    hasUserInput
                } = this.state;
                let {
                    availableAssets,
                    exchange,
                    getPairOnline,
                    ethereumTokensEnoughFuel
                } = this.props;
                if (Object.keys(availableAssets).length < 2) {
                    return _react2.default.createElement('div', null, 'Activate at least 2 assets for access to Exchange.');
                }
                let eDisabled = exchangeDisabled;
                if (fromAmountEx.isZero() || toAmountEx.isZero()) eDisabled = true;
                let showError = false;
                let errorPaneMessage = '';
                let errorPaneMessageCallToAction = '';
                if (exchange.isShapeShiftMaintenance) {
                    showError = true;
                    errorPaneMessage = 'ShapeShift is down for maintenance';
                    errorPaneMessageCallToAction = _react2.default.createElement('p', null, 'Visit\xA0', _react2.default.createElement('a', {
                        style: {
                            textDecoration: 'underline',
                            cursor: 'pointer'
                        },
                        onClick: () => {
                            _electron.shell.openExternal('https://shapeshift.io');
                        }
                    }, 'https://shapeshift.io'), '\xA0for more details\u2026');
                }
                if (!showError) {
                    if (!Array.isArray(exchange.marketInfo)) {
                        showError = true;
                        errorPaneMessage = 'Waiting for ShapeShift market data…';
                        errorPaneMessageCallToAction = '';
                    }
                }
                const showERC20Error = _assets2.default[fromCoin].isEthereumToken && !ethereumTokensEnoughFuel;
                return _react2.default.createElement('div', {
                    id: 'exodus-content-exchange'
                }, _react2.default.createElement('div', {
                    id: 'exodus-content-overlay-mask',
                    className: showError ? 'show-me' : 'hide-me'
                }, _react2.default.createElement('div', {
                    id: 'loader-container'
                }, _react2.default.createElement('div', {
                    id: 'exchange-loader'
                })), _react2.default.createElement('h1', null, errorPaneMessage), _react2.default.createElement('p', null, errorPaneMessageCallToAction)), exchange.status === 'none' ? null : _react2.default.createElement(_status2.default, {
                    exchange: exchange,
                    onClickFinishAck: this.handleClickFinishAck
                }), _react2.default.createElement('div', {
                    id: 'exchange-center-line-top',
                    className: 'exchange-center-line'
                }), _react2.default.createElement('div', {
                    id: 'exchange-give-swap-receive-container'
                }, _react2.default.createElement('div', {
                    id: 'exchange-give'
                }, _react2.default.createElement('div', {
                    id: 'exchange-receive-title',
                    className: 'exchange-title'
                }, 'Exchange'), _react2.default.createElement(_ui.AccountSelect, {
                    options: fromOptions,
                    value: fromCoin,
                    onChange: this.handleChangeFrom
                }), _react2.default.createElement(_popoverButtons2.default, {
                    active: activePopover,
                    fromAsset: fromCoin,
                    toAsset: toCoin,
                    onClick: this.handleClickPopover
                }), _react2.default.createElement(_currencyInputSwap2.default, {
                    coin: _assets2.default[fromCoin],
                    onChange: this.handleChangeFromAmount,
                    onFocus: this.handleFocusFrom,
                    value: this.state.fromAmount,
                    focus: true
                })), _react2.default.createElement(_swapArrow2.default, {
                    fromCoin: fromCoin,
                    toCoin: toCoin,
                    onClick: this.handleClickSwap,
                    exchangeDisabled: !getPairOnline(toCoin, fromCoin)
                }), _react2.default.createElement('div', {
                    id: 'exchange-receive'
                }, _react2.default.createElement('div', {
                    id: 'exchange-receive-title',
                    className: 'exchange-title'
                }, 'Receive'), _react2.default.createElement(_ui.AccountSelect, {
                    options: toOptions,
                    value: toCoin,
                    onChange: this.handleChangeTo
                }), _react2.default.createElement(_currencyInputSwap2.default, {
                    coin: _assets2.default[toCoin],
                    onChange: this.handleChangeToAmount,
                    onFocus: this.handleFocusTo,
                    value: this.state.toAmount
                }))), _react2.default.createElement('div', {
                    id: 'error-message-fixed-block',
                    className: 'exchange-center-line'
                }, _react2.default.createElement(_errorMessage2.default, {
                    depositAmount: fromAmountEx,
                    onChange: this.handleChangeErrorMessage,
                    fromCoin: fromCoin,
                    toCoin: toCoin,
                    hasUserInput: hasUserInput,
                    isPairOnline: getPairOnline(fromCoin, toCoin)
                })), _react2.default.createElement(_confirmationDetails2.default, {
                    fromCoin: fromCoin,
                    toCoin: toCoin,
                    fromAmountEx: fromAmountEx,
                    toAmountEx: toAmountEx
                }), _react2.default.createElement('div', {
                    id: 'exchange-center-line-under-confirmation',
                    className: 'exchange-center-line'
                }), _react2.default.createElement('div', {
                    className: 'exchange-button-area'
                }, _react2.default.createElement(ERC20ErrorBanner, {
                    show: showERC20Error
                }), _react2.default.createElement(_exchangeButton2.default, {
                    fromCoin: fromCoin,
                    toCoin: toCoin,
                    onClick: this.handleClickExchange,
                    exchangeDisabled: eDisabled
                })), _react2.default.createElement('div', {
                    id: 'exchange-center-line-under-button',
                    className: 'exchange-center-line'
                }), getPairOnline(fromCoin, toCoin) && _react2.default.createElement(_rateDetails2.default, {
                    fromCoin: fromCoin,
                    toCoin: toCoin,
                    fromAmountEx: fromAmountEx,
                    toAmountEx: toAmountEx
                }), _react2.default.createElement('div', {
                    id: 'exchange-center-line-bottom',
                    className: 'exchange-center-line'
                }), _react2.default.createElement(_exchangeHistory2.default, null));
            }
        }, _class2.propTypes = {
            availableAssets: _propTypes2.default.object,
            ethereumTokensEnoughFuel: _propTypes2.default.bool.isRequired,
            exchange: _propTypes2.default.object,
            marketInfoConversions: _propTypes2.default.object,
            coinAvailableAmounts: _propTypes2.default.object,
            coinTotalAmounts: _propTypes2.default.object,
            getFiatValue: _propTypes2.default.func.isRequired,
            getPairOnline: _propTypes2.default.func,
            getRateString: _propTypes2.default.func
        }, _temp)) || _class);
        exports.default = ExchangeView;
        const ERC20ErrorBanner = (_ref2) => {
            let {
                show = false
            } = _ref2;
            return _react2.default.createElement('div', {
                id: 'erc20-error-banner',
                className: show ? 'show' : ''
            }, _react2.default.createElement('div', {
                className: 'message'
            }, 'A small amount of Ethereum is required to start this exchange. Deposit Ethereum into your wallet then try again.'), _react2.default.createElement('div', {
                className: 'button',
                onClick: () => {
                    _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/how-do-i-send-or-exchange-an-ethereum-powered-asset');
                }
            }, 'How do I fix this?'));
        };

    }, {
        "101": 101,
        "102": 102,
        "108": 108,
        "109": 109,
        "110": 110,
        "112": 112,
        "121": 121,
        "184": 184,
        "257": 257,
        "333": 333,
        "349": 349,
        "350": 350,
        "351": 351,
        "352": 352,
        "353": 353,
        "355": 355,
        "356": 356,
        "357": 357,
        "358": 358,
        "359": 359,
        "96": 96,
        "97": 97,
        "undefined": undefined
    }],
    355: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _reactRedux = require('react-redux');
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _coinAvailableAmounts = require(101);
        var _coinAvailableAmounts2 = _interopRequireDefault(_coinAvailableAmounts);
        var _minimums = require(116);
        var _minimums2 = _interopRequireDefault(_minimums);
        var _maximums = require(115);
        var _maximums2 = _interopRequireDefault(_maximums);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let PopoverButtons = (_dec = (0, _reactRedux.connect)((state, ownProps) => ({
            coinAvailableAmount: (0, _coinAvailableAmounts2.default)(state)[ownProps.fromAsset],
            maximums: (0, _maximums2.default)(state),
            minimums: (0, _minimums2.default)(state)
        })), _dec(_class = (_temp = _class2 = class PopoverButtons extends _react2.default.PureComponent {
            constructor() {
                super();
                this.state = {
                    visible: false,
                    allText: 'All'
                };
                this.handlePrefillExchangeAll = this.handlePrefillExchangeAll.bind(this);
                this.handlePrefillExchangeHalf = this.handlePrefillExchangeHalf.bind(this);
                this.handlePrefillExchangeMin = this.handlePrefillExchangeMin.bind(this);
            }
            componentWillReceiveProps(nextProps) {
                const {
                    minimums,
                    fromAsset,
                    toAsset
                } = nextProps;
                if (minimums[fromAsset] && minimums[fromAsset][toAsset]) {
                    const min = minimums[fromAsset][toAsset];
                    this.setState({
                        visible: nextProps.coinAvailableAmount.gte(min)
                    });
                }
                this.setState({
                    allText: getMaxOrAll(nextProps).text
                });
            }
            shouldComponentUpdate(nextProps, nextState) {
                return this.props.active !== nextProps.active || this.props.fromAsset !== nextProps.fromAsset || this.state.visible !== nextState.visible || this.state.allText !== nextState.allText;
            }
            handlePrefillExchangeAll() {
                const {
                    value
                } = getMaxOrAll(this.props);
                this.props.onClick({
                    active: 'all',
                    value
                });
            }
            handlePrefillExchangeHalf() {
                const value = getMaxOrAll(this.props).value.mul(0.5).toBase().round().toDefault().toFixed(8);
                this.props.onClick({
                    active: 'half',
                    value
                });
            }
            handlePrefillExchangeMin() {
                const {
                    minimums,
                    fromAsset,
                    toAsset
                } = this.props;
                const min = minimums[fromAsset][toAsset];
                this.props.onClick({
                    active: 'min',
                    value: min
                });
            }
            render() {
                let {
                    allText
                } = this.state;
                const {
                    active,
                    fromAsset
                } = this.props;
                const activeClasses = `active exodus-color-${fromAsset} exodus-border-color-${fromAsset}`;
                return _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('popover-buttons', {
                        'show': true
                    })
                }, _react2.default.createElement('div', {
                    id: 'popover-button-all',
                    className: 'popover-button left ' + (active === 'all' ? activeClasses : ''),
                    onClick: this.handlePrefillExchangeAll
                }, allText), _react2.default.createElement('div', {
                    id: 'popover-button-half',
                    className: 'popover-button ' + (active === 'half' ? activeClasses : ''),
                    onClick: this.handlePrefillExchangeHalf
                }, 'Half'), _react2.default.createElement('div', {
                    id: 'popover-button-min',
                    className: 'popover-button right ' + (active === 'min' ? activeClasses : ''),
                    onClick: this.handlePrefillExchangeMin
                }, 'Min'));
            }
        }, _class2.propTypes = {
            active: _propTypes2.default.string.isRequired,
            coinAvailableAmount: _propTypes2.default.object.isRequired,
            maximums: _propTypes2.default.object.isRequired,
            minimums: _propTypes2.default.object.isRequired,
            fromAsset: _propTypes2.default.string.isRequired,
            toAsset: _propTypes2.default.string.isRequired,
            onClick: _propTypes2.default.func.isRequired
        }, _temp)) || _class);
        exports.default = PopoverButtons;

        function getMaxOrAll() {
            let {
                coinAvailableAmount,
                fromAsset,
                toAsset,
                maximums
            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            const availableAmount = coinAvailableAmount.toDefault();
            if (!availableAmount) return {
                text: 'All',
                value: _assets2.default[fromAsset].currency.ZERO
            };
            if (!maximums[fromAsset]) return {
                text: 'All',
                value: availableAmount
            };
            if (!maximums[fromAsset][toAsset]) return {
                text: 'All',
                value: availableAmount
            };
            const limit = maximums[fromAsset][toAsset];
            if (availableAmount.gt(limit)) return {
                text: 'Max',
                value: limit
            };
            else return {
                text: 'All',
                value: availableAmount
            };
        }

    }, {
        "101": 101,
        "115": 115,
        "116": 116,
        "184": 184,
        "undefined": undefined
    }],
    356: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _getRateString = require(110);
        var _getRateString2 = _interopRequireDefault(_getRateString);
        var _reactUtils = require(287);
        var _reactRedux = require('react-redux');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let RateDetails = (_dec = (0, _reactRedux.connect)(state => ({
            getRateString: (0, _getRateString2.default)(state)
        })), _dec(_class = (_temp = _class2 = class RateDetails extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    toggle: false
                };
            }
            handleClickToggle() {
                this.setState({
                    toggle: !this.state.toggle
                });
            }
            render() {
                let {
                    fromCoin,
                    toCoin,
                    fromAmountEx,
                    getRateString
                } = this.props;
                const {
                    toggle
                } = this.state;
                if (toggle) {;
                    [fromCoin, toCoin] = [toCoin, fromCoin];
                }
                let rate = getRateString(fromCoin, toCoin, fromAmountEx);
                return _react2.default.createElement('div', {
                    id: 'exchange-terms-fee',
                    onClick: this.handleClickToggle.bind(this),
                    style: {
                        cursor: 'pointer'
                    }
                }, rate);
            }
        }, _class2.propTypes = {
            fromCoin: _propTypes2.default.string.isRequired,
            toCoin: _propTypes2.default.string.isRequired,
            getRateString: _propTypes2.default.func.isRequired,
            fromAmountEx: _reactUtils.isNumberUnitOrUndefined
        }, _temp)) || _class);
        exports.default = RateDetails;

    }, {
        "110": 110,
        "287": 287,
        "undefined": undefined
    }],
    357: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = computeSelectOptions;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _ui = require(333);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function computeSelectOptions(_ref, side) {
            let {
                props,
                state
            } = _ref;
            const coinAmounts = side === 'left' ? props.coinAvailableAmounts : props.coinTotalAmounts;

            function isDisabledCheck(coinName) {
                if (side === 'left' && coinName === 'bitcoin' && props.btcDisabled && !global.BTC_ENABLED) return true;
                let [fromCoin, toCoin] = side === 'left' ? [coinName, state.toCoin] : [state.fromCoin, coinName];
                if (fromCoin === toCoin)[fromCoin, toCoin] = side === 'left' ? [fromCoin, state.fromCoin] : [state.toCoin, toCoin];
                return !props.getPairOnline(fromCoin, toCoin);
            }
            return Object.values(props.availableAssets).map(asset => {
                const amount = coinAmounts[asset.name].to(asset.displayUnit);
                const fiatAmount = props.getFiatValue(amount);
                let content;
                if (side === 'left') {
                    content = _react2.default.createElement('span', null, _react2.default.createElement(_ui.NUCurrencyText, {
                        amount: amount
                    }), _react2.default.createElement('span', {
                        className: 'exodus-color-flagmoney dropdown-usd'
                    }, '\xA0 (', _react2.default.createElement(_ui.NUCurrencyText, {
                        amount: fiatAmount,
                        code: true,
                        symbol: true
                    }), ')'));
                } else {
                    let rateStr = '';
                    if (state.fromCoin && state.fromCoin !== asset.name) {
                        rateStr = props.getRateString(state.fromCoin, asset.name, state.fromAmountEx);
                    }
                    content = _react2.default.createElement('span', null, rateStr);
                }
                return {
                    name: asset.name,
                    properName: asset.properName,
                    disabled: isDisabledCheck(asset.name),
                    amount,
                    fiatAmount,
                    content
                };
            });
        }

    }, {
        "333": 333,
        "undefined": undefined
    }],
    358: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _nuCurrencyText = require(334);
        var _nuCurrencyText2 = _interopRequireDefault(_nuCurrencyText);
        var _electron = require('electron');
        var _reactRedux = require('react-redux');
        var _steps = require(117);
        var _steps2 = _interopRequireDefault(_steps);
        var _all = require(134);
        var _all2 = _interopRequireDefault(_all);
        var _flux = require(257);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)(state => ({
            exchange: state.exchange,
            step: (0, _steps2.default)(state),
            txSend: state.txSend,
            allOrders: (0, _all2.default)(state)
        }))(ExchangeStatus);

        function ExchangeStatus(_ref) {
            let {
                step,
                exchange,
                txSend,
                onClickFinishAck,
                allOrders
            } = _ref;
            let {
                current,
                status,
                canCancel
            } = exchange;
            if (!current) return _react2.default.createElement('div', {
                id: 'exchange-in-progress-overlay'
            });
            let {
                fromCoin,
                toCoin,
                fromAmount,
                toAmount
            } = current;
            let fromBE = _assets2.default[fromCoin].blockExplorer;
            let toBE = _assets2.default[toCoin].blockExplorer;
            let step1 = step === 1;
            let step2 = step === 2;
            let error = exchange.error;
            if (error) console.error(error);
            const fromAsset = _assets2.default[fromCoin];
            const toAsset = _assets2.default[toCoin];

            function handleClickWatchProgress() {
                _electron.shell.openExternal(`https://shapeshift.io/#/status/${exchange.ssOrder.orderId}`);
            }

            function handleClickFinishAck() {
                _flux.actions.exchange.ackExchange();
                onClickFinishAck();
            }

            function handleClickCancel() {
                _flux.actions.exchange.cancelExchange();
                onClickFinishAck();
            }
            let orderId = exchange.ssOrder ? exchange.ssOrder.orderId : '';
            if (allOrders.has(orderId)) {
                const o = allOrders.get(orderId);
                if (o.status === 'complete-verified') window.requestIdleCallback(handleClickFinishAck);
            }
            return _react2.default.createElement('div', {
                id: 'exchange-in-progress-overlay'
            }, _react2.default.createElement('div', {
                id: 'exchange-in-progress-status'
            }, _react2.default.createElement('div', {
                id: 'exchange-in-progress-status-graphic'
            }, _react2.default.createElement('div', {
                id: 'exchange-in-progress-step-one',
                className: 'exchange-in-progress-step ' + (step1 ? 'active' : '')
            }, _react2.default.createElement('div', {
                id: 'progress-circle-step-one',
                className: 'progress-circle-step-one progress-circle ' + (step1 ? 'active' : '')
            }), _react2.default.createElement('div', {
                className: 'step-title'
            }, 'Step 1'), _react2.default.createElement('div', {
                id: 'exchange-in-progress-step-one-icon',
                className: 'step-icon'
            }), _react2.default.createElement('div', {
                className: 'step-description'
            }, 'Sending')), _react2.default.createElement('div', {
                id: 'exchange-in-progress-step-two',
                className: 'exchange-in-progress-step ' + (step2 ? 'active' : '')
            }, _react2.default.createElement('div', {
                id: 'progress-circle-step-two',
                className: 'progress-circle-step-one progress-circle ' + (step2 ? 'active' : '')
            }), _react2.default.createElement('div', {
                className: 'step-title'
            }, 'Step 2'), _react2.default.createElement('div', {
                id: 'exchange-in-progress-step-two-icon',
                className: 'step-icon'
            }), _react2.default.createElement('div', {
                className: 'step-description'
            }, 'Exchanging'))), _react2.default.createElement('div', {
                id: 'exchange-in-progress-status-info'
            }, _react2.default.createElement('div', {
                id: 'exchange-in-progress-status-title'
            }, statusText(status, fromCoin)), _react2.default.createElement('div', {
                id: 'exchange-in-progress-status-message'
            }, status === 'complete' ? fromCoin === 'bitcoin' ? `In 60 minutes or less your ${toAsset.properName} will arrive. You can safely use or quit Exodus while an exchange is in progress.` : `In 30 minutes or less your ${toAsset.properName} will arrive. You can safely use or quit Exodus while an exchange is in progress.` : status === 'failed' || status === 'error' ? _react2.default.createElement(ErrorMessage, {
                errorMsg: error.message,
                fromAsset: fromAsset.properName
            }) : ``)), _react2.default.createElement('div', {
                id: 'exchange-in-progress-status-details'
            }, _react2.default.createElement('div', {
                id: 'exchange-coin-left',
                className: 'exchange-coin'
            }, _react2.default.createElement('div', {
                className: 'exchange-coin-info'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Exchanging'), _react2.default.createElement('div', {
                className: 'exchange-amount exodus-color-' + fromCoin
            }, fromAmount ? _react2.default.createElement(_nuCurrencyText2.default, {
                amount: fromAmount || fromAsset.currency.ZERO
            }) : fromAsset.properName), current && current.depositAddress ? _react2.default.createElement('div', {
                id: 'exchange-deposit-address',
                className: 'exchange-address',
                onClick: () => {
                    _electron.shell.openExternal(fromBE.addressUrl(current.depositAddress));
                }
            }, current.depositAddress) : null), _react2.default.createElement('div', {
                id: 'coin-logo-left',
                className: 'exodus-icon size64 icon-' + fromCoin
            })), _react2.default.createElement('div', {
                id: 'exchange-coin-link-arrow',
                className: 'exchange-coin-link'
            }), _react2.default.createElement('div', {
                id: 'exchange-coin-right',
                className: 'exchange-coin'
            }, _react2.default.createElement('div', {
                className: 'exchange-coin-info'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Receiving'), _react2.default.createElement('div', {
                className: 'exchange-amount exodus-color-' + toCoin
            }, toAmount ? _react2.default.createElement(_nuCurrencyText2.default, {
                amount: toAmount || toAsset.currency.ZERO
            }) : toAsset.properName), current && current.toAddress ? _react2.default.createElement('div', {
                id: 'exchange-receive-address',
                className: 'exchange-address',
                onClick: () => {
                    _electron.shell.openExternal(toBE.addressUrl(current.toAddress));
                }
            }, current.toAddress) : null), _react2.default.createElement('div', {
                id: 'coin-logo-right',
                className: 'exodus-icon size64 icon-' + toCoin
            }))), _react2.default.createElement(ActionButtons, {
                current: current,
                status: status,
                handleClickFinishAck: handleClickFinishAck,
                handleClickWatchProgress: handleClickWatchProgress
            }), canCancel ? _react2.default.createElement('div', {
                id: 'exchange-cancel',
                onClick: handleClickCancel
            }, 'Cancel') : _react2.default.createElement('div', {
                id: 'exchange-cancel'
            })));
        }

        function ActionButtons(_ref2) {
            let {
                current,
                status,
                handleClickFinishAck,
                handleClickWatchProgress
            } = _ref2;
            if (status === 'complete') {
                return _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-exchange-report',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all',
                    onClick: handleClickWatchProgress
                }, 'Watch Progress'), _react2.default.createElement('div', {
                    id: 'exodus-button-exchange-tryagain',
                    className: 'exodus-button-wide exodus-button-litecoin secondary-button exodus-animate-all',
                    onClick: handleClickFinishAck
                }, 'Exchange Again'));
            } else if (status === 'failed') {
                return _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-exchange-report',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all',
                    onClick: handleClickFinishAck
                }, 'Close'));
            } else {
                return _react2.default.createElement('div', {
                    className: 'button-row'
                }, current && current.depositAddress ? _react2.default.createElement('div', {
                    id: 'exodus-button-exchange-report',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all',
                    onClick: handleClickWatchProgress
                }, 'Watch Progress') : null);
            }
        }

        function ErrorMessage(_ref3) {
            let {
                errorMsg,
                fromAsset
            } = _ref3;
            if (errorMsg && errorMsg.match(/Transaction/)) {
                return _react2.default.createElement('span', null, errorMsg, ' To fix this, rescan ', fromAsset, ' then try again.\xA0', _react2.default.createElement('span', {
                    className: 'span-underline',
                    onClick: () => {
                        _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/how-do-i-fix-an-exchange-error');
                    }
                }, 'View step-by-step instructions.'));
            }
            if (errorMsg && errorMsg.match(/ShapeShift response failure/)) {
                return _react2.default.createElement('span', null, 'ShapeShift is having problems exchanging ', fromAsset, '. Your funds never left your wallet. You can exchange other assets or try again in one hour.');
            }
            return _react2.default.createElement('span', null, errorMsg);
        }
        const statusText = (status, fromCoin) => {
            let asset = _assets2.default[fromCoin].properName;
            switch (status) {
                case 'waiting':
                    return 'Sending ' + asset + ' to Exchange…';
                case 'no_deposits':
                    return 'Exchanging with ShapeShift…';
                case 'received':
                    return 'Waiting for ShapeShift confirmation…';
                case 'complete':
                    return `Your exchange is now in progress!`;
                case 'error':
                    return asset + ' Not Exchanged';
                case 'failed':
                    return asset + ' Not Exchanged';
            }
            return status;
        };

    }, {
        "117": 117,
        "134": 134,
        "184": 184,
        "257": 257,
        "334": 334,
        "undefined": undefined
    }],
    359: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _getAssetColor = require(183);
        var _getAssetColor2 = _interopRequireDefault(_getAssetColor);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (_ref) => {
            let {
                fromCoin,
                toCoin,
                onClick,
                exchangeDisabled
            } = _ref;
            if (exchangeDisabled) onClick = () => {};
            return _react2.default.createElement('div', {
                id: 'exchange-swap',
                tabIndex: '100',
                onClick: onClick
            }, _react2.default.createElement('div', {
                id: 'exchange-center-line-swap-top',
                className: 'exchange-center-line'
            }), _react2.default.createElement('svg', {
                id: 'exchange-swap-svg-arrows',
                className: exchangeDisabled ? 'disabled' : '',
                width: '32',
                height: '32',
                viewBox: '0 0 32 32',
                xmlns: 'https://www.w3.org/2000/svg'
            }, _react2.default.createElement('g', {
                fill: 'none',
                fillRule: 'evenodd'
            }, _react2.default.createElement('path', {
                className: 'swap-to-right',
                d: 'M28.297 7.256l-4.73-5.126c-.448-.485-.448-1.268 0-1.766.448-.485 1.175-.485 1.623 0l6.493 7.04c.274.3.36.71.297 1.096.063.386-.023.796-.297 1.095l-6.493 7.04c-.448.486-1.175.486-1.624 0-.447-.484-.447-1.28 0-1.765l4.73-5.126H8.15C7.514 9.744 7 9.184 7 8.5c0-.684.514-1.244 1.148-1.244h20.15z',
                fill: (0, _getAssetColor2.default)(fromCoin)
            }), _react2.default.createElement('path', {
                className: 'swap-to-left',
                d: 'M3.703 22.256l4.73-5.126c.448-.485.448-1.268 0-1.766-.448-.485-1.175-.485-1.623 0l-6.493 7.04c-.274.3-.36.71-.297 1.096-.063.386.023.796.297 1.095l6.493 7.04c.448.486 1.175.486 1.624 0 .447-.484.447-1.28 0-1.765l-4.73-5.126H23.85c.634 0 1.148-.56 1.148-1.244 0-.684-.514-1.244-1.148-1.244H3.702z',
                fill: (0, _getAssetColor2.default)(toCoin)
            }))), _react2.default.createElement('div', {
                className: 'exchange-center-line'
            }));
        };

    }, {
        "183": 183,
        "undefined": undefined
    }],
    360: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _index = require(365);
        var _index2 = _interopRequireDefault(_index);
        var _theme = require(107);
        var _theme2 = _interopRequireDefault(_theme);
        var _p2pOffline = require(133);
        var _p2pOffline2 = _interopRequireDefault(_p2pOffline);
        var _btcMiningPayouts = require(141);
        var _btcMiningPayouts2 = _interopRequireDefault(_btcMiningPayouts);
        var _pricesLoaded = require(129);
        var _pricesLoaded2 = _interopRequireDefault(_pricesLoaded);
        var _reactRedux = require('react-redux');
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _isOnline = require(268);
        var isOnline = _interopRequireWildcard(_isOnline);
        var _appConfig = require(80);
        var _electron = require('electron');
        var _reactElectronWebView = require('react-electron-web-view');
        var _reactElectronWebView2 = _interopRequireDefault(_reactElectronWebView);
        var _exodusWindow_nav = require(361);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _currencyFormatters = require(211);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let _APP_API_PRELOAD;
        const releasePageURL = (() => {
            if (_appConfig.ENV_BUILD_EXODUS) return `https://www.exodus.io/releases/?version=${_appConfig.PACKAGE.version}`;
            if (_appConfig.ENV_BUILD_EDEN) return `https://www.exodus.io/eden/?version=${_appConfig.PACKAGE.version}`;
            return 'https://www.exodus.io/';
        })();
        let ExodusWindow = (_dec = (0, _reactRedux.connect)(state => ({
            active: state.localStorage['active-view'],
            theme: (0, _theme2.default)(state),
            p2pOffline: (0, _p2pOffline2.default)(state),
            hasBtcMiningPayouts: (0, _btcMiningPayouts2.default)(state),
            marketPricesLoaded: (0, _pricesLoaded2.default)(state)
        })), _dec(_class = (_temp = _class2 = class ExodusWindow extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    online: isOnline.online,
                    upgradeTime: new Date() > _appConfig.NEW_VERSION_DATE,
                    webview: false
                };
                isOnline.addListener(() => this.setState({
                    online: isOnline.online
                }));
                this.nav = (0, _exodusWindow_nav.getNav)();
                this.navMap = new Map(this.nav.map((_ref) => {
                    let {
                        text,
                        view
                    } = _ref;
                    return [text, view];
                }));
                this.handleClickNavigationChange = this.handleClickNavigationChange.bind(this);
                this.render = this.render.bind(this);
                this.webviewIPCMessageHandler = webviewIPCMessageHandler.bind(this);
                this.hasWarned = false;
                global.handleClickWalletAddAssets = this.handleClickWalletAddAssets.bind(this);
            }
            componentDidMount() {}
            componentWillReceiveProps(newProps) {
                if (this.hasWarned) return;
                if (newProps.hasBtcMiningPayouts && newProps.marketPricesLoaded) {
                    this.warnMiningPayouts(newProps.hasBtcMiningPayouts);
                }
            }
            componentWillUpdate(nextProps, nextState) {
                if (this.state.webview && !nextState.webview) {
                    const webView = document.querySelector('webview');
                    webView.removeEventListener('ipc-message', this.webviewIPCMessageHandler);
                }
            }
            componentDidUpdate(prevProps, prevState) {
                if (this.state.webview && !prevState.webview) {
                    const webView = document.querySelector('webview');
                    webView.addEventListener('ipc-message', this.webviewIPCMessageHandler);
                }
            }
            handleClickNavigationChange(active) {
                if (!isApp.bind(this)(active)) {
                    _flux.actions.localStorage.setItem('active-view', active);
                    this.setState({
                        webview: false
                    });
                } else {
                    this.setState({
                        webview: true
                    });
                }
                this.setState({
                    active: active
                });
            }
            handleClickWalletAddAssets() {
                _flux.actions.localStorage.setItem('settings:active-view', 'assets');
                this.handleClickNavigationChange('Settings');
            }
            warnMiningPayouts(fee) {
                const KEY = 'miningPayouts:bitcoin';
                let count = Number.parseInt(_flux.store.getState().localStorage[KEY], 10);
                if (Number.isNaN(count)) count = 0;
                if (count >= 3) return;
                _flux.actions.localStorage.setItem(KEY, String(++count));
                this.hasWarned = true;
                setTimeout(() => {
                    (0, _swal2.default)({
                        type: 'warning',
                        title: 'Warning',
                        text: `It seems as if you may be receiving Bitcoin mining rewards or small transactions.
          If you try to send your BTC now, this will cost you ${(0,_currencyFormatters.formatStr)(fee)}.
          You can read more about this by clicking "Learn More" below.`,
                        html: true,
                        showCancelButton: true,
                        cancelButtonText: 'Learn More',
                        closeOnConfirm: true,
                        closeOnCancel: true
                    }, function(isConfirm) {
                        if (isConfirm) return;
                        _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/i-get-btc-mining-payouts-why-are-the-fees-so-high');
                    });
                }, 3000);
            }
            render() {
                const {
                    theme,
                    p2pOffline
                } = this.props;
                const {
                    online
                } = this.state;
                const {
                    upgradeTime
                } = this.state;
                const p2pOfflineShow = p2pOffline.length > 0;
                let p2pOfflineText = p2pOffline[0];
                if (p2pOffline.length > 1) {
                    p2pOfflineText = `${p2pOffline.slice(0,-1).join(', ')} and ${p2pOffline.slice(-1)[0]}`;
                }
                const activeNav = this.navMap.has(this.props.active) ? this.props.active : 'Portfolio';
                return _react2.default.createElement('div', {
                    id: 'exodus',
                    className: (0, _classnames2.default)('exodus-theme-' + theme, {
                        [`build-${_appConfig.ENV_BUILD_NAME}`]: _appConfig.ENV_BUILD_NAME
                    })
                }, _react2.default.createElement('div', {
                    id: 'exodus-window'
                }, _react2.default.createElement(_index2.default, {
                    active: activeNav,
                    onClick: this.handleClickNavigationChange,
                    items: this.nav.map(nav => nav.text)
                }), _react2.default.createElement('div', {
                    id: 'notification-banner-internet',
                    className: (0, _classnames2.default)('notification-banner error top', {
                        'hidden': online,
                        'active': !online
                    })
                }, 'Exodus is not connected to the internet. Please check your network connection.'), _react2.default.createElement('div', {
                    id: 'notification-banner-p2p',
                    className: (0, _classnames2.default)('notification-banner status top', {
                        'hidden': !p2pOfflineShow,
                        'active': p2pOfflineShow
                    })
                }, 'Cannot connect to ', p2pOfflineText, ' P2P network. Trying again\u2026', _react2.default.createElement('span', {
                    onClick: () => _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/why-do-i-see-an-error-message-can-not-connect-to-p2p-network')
                }, 'How do I fix this?')), _react2.default.createElement('div', {
                    id: 'notification-banner-upgrade',
                    className: (0, _classnames2.default)('notification-banner status bottom', {
                        'hidden': !upgradeTime,
                        'active': upgradeTime
                    })
                }, 'A new version of Exodus is available\u2026', _react2.default.createElement('span', {
                    className: 'banner-button',
                    onClick: () => this.setState({
                        upgradeTime: false
                    })
                }, 'Remind Me Later'), _react2.default.createElement('span', {
                    className: 'banner-button',
                    onClick: () => _electron.shell.openExternal(releasePageURL)
                }, 'Upgrade Now')), _react2.default.createElement('div', {
                    id: 'exodus-content'
                }, getActiveElement.bind(this)(activeNav))));
            }
        }, _class2.propTypes = {
            active: _propTypes2.default.string,
            theme: _propTypes2.default.string.isRequired,
            p2pOffline: _propTypes2.default.array.isRequired
        }, _temp)) || _class);
        exports.default = ExodusWindow;

        function getActiveElement(active) {
            const item = this.navMap.get(active);
            if (typeof item === 'string') return getActiveApp(active, item);
            else return getActiveView(item);
        }

        function getActiveView(view) {
            return _react2.default.createElement(view);
        }

        function getActiveApp(text, uri) {
            if (!_APP_API_PRELOAD) {
                const {
                    remote
                } = require('electron');
                _APP_API_PRELOAD = _appConfig.ENV_PROD ? _path2.default.join(remote.app.getAppPath(), '..', 'static', 'app-api-preload.js') : _path2.default.join(remote.app.getAppPath(), 'static', 'app-api-preload.js');
            }
            return _react2.default.createElement(_reactElectronWebView2.default, {
                src: uri,
                style: {
                    display: 'flex',
                    flex: '1 1 auto'
                },
                className: 'webview-app',
                preload: _APP_API_PRELOAD,
                partition: `persist:${text}`
            });
        }

        function isApp(active) {
            return typeof this.navMap.get(active) === 'string';
        }

        function webviewIPCMessageHandler(_ref2) {
            let {
                channel,
                args
            } = _ref2;
            if (channel !== 'rpc') return;
            const {
                method,
                args: methodArgs
            } = args[0];
            if (method === 'sendTx') {
                let [assetName, address, amount, memo] = methodArgs;
                const coin = _assets2.default[assetName];
                amount = coin.currency.defaultUnit(amount);
                const receiver = {
                    address,
                    amount
                };
                _flux.actions.txSend.send({
                    coin,
                    receiver,
                    memo
                });
            }
        }

    }, {
        "107": 107,
        "129": 129,
        "133": 133,
        "141": 141,
        "184": 184,
        "211": 211,
        "257": 257,
        "268": 268,
        "306": 306,
        "361": 361,
        "365": 365,
        "80": 80,
        "undefined": undefined
    }],
    361: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.nav = undefined;
        exports.getNav = getNav;
        var _flux = require(257);
        var _index = require(347);
        var _index2 = _interopRequireDefault(_index);
        var _index3 = require(354);
        var _index4 = _interopRequireDefault(_index3);
        var _index5 = require(362);
        var _index6 = _interopRequireDefault(_index5);
        var _index7 = require(367);
        var _index8 = _interopRequireDefault(_index7);
        var _index9 = require(375);
        var _index10 = _interopRequireDefault(_index9);
        var _index11 = require(370);
        var _index12 = _interopRequireDefault(_index11);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const nav = exports.nav = [{
            text: 'Portfolio',
            view: _index8.default
        }, {
            text: 'Wallet',
            view: _index10.default
        }, {
            text: 'Exchange',
            view: _index4.default
        }, {
            text: 'Backup',
            view: _index2.default
        }, {
            text: '-'
        }, {
            text: 'Settings',
            view: _index12.default
        }, {
            text: 'Help',
            view: _index6.default
        }];

        function getNav() {
            const apps = Object.values(global.getApps());
            let newNav = [...nav];
            newNav.splice(4, 0, ...apps);
            return newNav;
        }
        const LS_KEY = 'apps';
        global.createApp = function createApp(name, label, uri) {
            const apps = global.getApps();
            apps[name] = {
                text: label,
                view: uri
            };
            updateApps(apps);
            console.log(`Added ${label}. Please restart Exodus.`);
        };
        global.destroyApp = function(name) {
            let apps = global.getApps();
            const {
                text
            } = apps[name];
            delete apps[name];
            updateApps(apps);
            console.log(`Destroyed ${text}. Please restart Exodus.`);
        };
        global.getApps = function getApps() {
            const appStr = _flux.store.getState().localStorage[LS_KEY];
            let apps = {};
            if (appStr) apps = JSON.parse(appStr);
            return apps;
        };

        function updateApps(apps) {
            _flux.actions.localStorage.setItem(LS_KEY, JSON.stringify(apps));
        }

    }, {
        "257": 257,
        "347": 347,
        "354": 354,
        "362": 362,
        "367": 367,
        "370": 370,
        "375": 375
    }],
    362: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _electron = require('electron');
        var _appConfig = require(80);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let ReleaseNotes = (_dec = (0, _reactRedux.connect)((state, props) => ({
            bcashClaimed: state.localStorage['bcashclaimed']
        })), _dec(_class = (_temp = _class2 = class ReleaseNotes extends _react2.default.Component {
            render() {
                const {
                    version,
                    bcashClaimed
                } = this.props;
                return _react2.default.createElement('div', {
                    id: 'exodus-content-help'
                }, _react2.default.createElement('h2', null, 'Exodus Version ', this.props.version), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question0',
                    className: 'title'
                }, 'How do I get more help?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question0',
                    className: 'control-checkbox',
                    defaultChecked: true
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus is crafted with ', _react2.default.createElement('svg', {
                    className: 'heart',
                    width: '14px',
                    height: '14px',
                    viewBox: '0 0 32 32'
                }, _react2.default.createElement('path', {
                    d: 'M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2c6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z'
                })), ' by Daniel and JP. Find release notes and downloads at: ', _react2.default.createElement('span', {
                    className: 'link',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/releases/');
                    }
                }, 'www.exodus.io/releases'), '. Use the buttons below to learn about Exodus, solve problems and get in touch. Thank you for using Exodus!'), _react2.default.createElement('div', {
                    id: 'contact-us-info'
                }, _react2.default.createElement('div', {
                    id: 'help-name-left',
                    className: 'help-name'
                }, _react2.default.createElement('div', {
                    id: 'help-profile-pict-jp',
                    className: 'profile-pict'
                }), _react2.default.createElement('div', {
                    className: 'help-name-name'
                }, 'JP Richardson'), _react2.default.createElement('div', {
                    className: 'help-name-title'
                }, 'Co-founder & Chief Technical Officer')), _react2.default.createElement('div', {
                    id: 'help-name-right',
                    className: 'help-name'
                }, _react2.default.createElement('div', {
                    id: 'help-profile-pict-dc',
                    className: 'profile-pict'
                }), _react2.default.createElement('div', {
                    className: 'help-name-name'
                }, 'Daniel Castagnoli'), _react2.default.createElement('div', {
                    className: 'help-name-title'
                }, 'Co-founder & Chief Creative Officer'))), _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('a', {
                    onClick: () => {
                        _electron.shell.openExternal('http://support.exodus.io');
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all'
                }, 'Help Desk')), _react2.default.createElement('a', {
                    onClick: () => {
                        _electron.shell.openExternal('https://vimeo.com/exodusio');
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all'
                }, 'Help Videos')), _react2.default.createElement('a', {
                    onClick: () => {
                        _electron.shell.openExternal('https://twitter.com/exodus_io');
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all'
                }, 'Exodus Twitter'))), _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('a', {
                    onClick: () => {
                        _electron.shell.openExternal('https://exodus-invite.herokuapp.com');
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all'
                }, 'Live Chat In Slack')), _react2.default.createElement('a', {
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/status/');
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button-wide exodus-button-litecoin primary-button exodus-animate-all'
                }, 'Status Updates')), _react2.default.createElement('a', {
                    href: 'mailto:support@exodus.io?subject=Exodus%20' + version
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-email',
                    className: 'exodus-button exodus-button-litecoin primary-button exodus-animate-all'
                }, 'support@exodus.io'))))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question1',
                    className: 'title'
                }, 'What is Exodus?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question1',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus is software to secure, manage and trade blockchain assets.'), _react2.default.createElement('p', null, 'Those familiar with traditional finance can think of Exodus as a self-managed brokerage account for a new class of investments called blockchain assets, digital assets or cryptocurrency.'), _react2.default.createElement('p', null, 'Just as the internet opened the free exchange of information, blockchains evolve the exchange of financial assets. Traditional brokerage accounts have slow settlement with limited hours in established jurisdictions. In contrast, blockchain markets are hyper-speed-24/7-worldwide markets available to anyone, any age, anywhere. Exodus allows you to participate in these new global markets from any computer running Mac, Windows or Linux.'), _react2.default.createElement('p', null, 'Similar to a traditional stock market, there are thousands of distinct blockchain assets. Bitcoin was the first blockchain asset - other popular blockchain assets include Ethereum, Litecoin, and Dash. Just like traditional stock, each blockchain asset carries unique properties and is priced by markets independently. These blockchain assets inherently have different utility, areas of focus, values, beliefs and overall culture backing the asset.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question2',
                    className: 'title'
                }, 'How do I get started?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question2',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'The easiest way to get started managing a portfolio of blockchain assets is to buy bitcoin with your national currency (like US dollars) and transfer bitcoin into your Exodus wallet. Bitcoin is the base unit of blockchain assets, just like stocks are priced and purchased with national currency (US dollars), most blockchain assets are priced and purchased with bitcoin.'), _react2.default.createElement('p', null, 'For users in Asia, Australia, Europe or North America Exodus recommends purchasing bitcoin with Coinbase. Coinbase can be used in over 32 countries. You can find the list of countries Coinbase supports at: ', _react2.default.createElement('span', {
                    className: 'link',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.coinbase.com/global/');
                    }
                }, 'www.coinbase.com/global/'), '.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question3',
                    className: 'title'
                }, 'How do I update Exodus?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question3',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus can be updated by downloading the latest version from our website at ', _react2.default.createElement('span', {
                    className: 'link',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/releases/');
                    }
                }, 'www.exodus.io/releases'), '. After you download Exodus you can safely replace the old application with the new one.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question4',
                    className: 'title'
                }, 'How does Exodus keep my money safe?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question4',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus stores blockchain assets on your computer for full privacy. This means you, and only you, have access to your blockchain assets without having to trust a company or third-party.'), _react2.default.createElement('p', null, 'Once you complete the backup process Exodus encrypts your blockchain assets with a password. You must remember this password since it can not be recovered if forgotten. This is designed to protect you in case of your computer being hacked, lost or damaged. This password is the key to your blockchain asset wealth; you must not share it with others and treat it with the utmost care.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question5',
                    className: 'title'
                }, 'Can I use Exodus on multiple computers?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question5',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus is designed to work on one computer at a time. You can move your Exodus wallet to a new computer however you will have to stop using it on your old computer. We realize this is not ideal and will be fixing this in future updates.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question6',
                    className: 'title'
                }, 'How do I send a digital asset? ( Bitcoin / Ethereum )'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question6',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'To send blockchain assets with Exodus click Wallet on the left sidebar. Then choose the blockchain asset you would like to send. These instructions work for any blockchain asset. In this example we will send Ethereum. Click Ethereum then click the send button.'), _react2.default.createElement('p', null, 'Just like traditional bank transfers Exodus needs the address you want to send to. This address is similar to a bank account number. You can request an address from the person you want to send Ethereum to. You can also have an Ethereum wallet on a mobile device and send Ethereum to yourself on another device.'), _react2.default.createElement('p', null, 'Blockchain addresses are a long string of characters. Because it is easy to mistype a character the best practice is to copy the Ethereum address to your clipboard and paste it into the to field. Alternatively, if you have a QR code you can click the QR code button, located on the left side of the to field, to scan the QR code. Exodus will then import the blockchain address from the QR code and type it for you.'), _react2.default.createElement('p', null, 'Next type the amount you want to send. Exodus lets you send in the blockchain unit, in this example we could send 0.5 Ethereum or \xBD of an Ethereum. Because the rate of Ethereum fluxuates, if you prefer to work in your native currency, simply type your currency amount under the blockchain asset and Exodus will do the conversion to Ethereum for you.'), _react2.default.createElement('p', null, 'Once you review the confirmation, telling you how much you are sending, click the Send button. Exodus will then confirm again you want to send the amount. This is a good place to pause for a moment and double check your amount and address. If all looks good, click send.'), _react2.default.createElement('p', null, 'Exodus takes a few moments to prepare the transaction then send it. Depending on the receiving wallet the transaction should show up within a minute or two.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question7',
                    className: 'title'
                }, 'How do I receive a digital asset? ( Bitcoin / Ethereum )'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question7',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'To receive blockchain assets with Exodus click Wallet on the left sidebar. Then choose the blockchain asset you would like to receive. These instructions work for any blockchain asset. In this example we will receive Bitcoin. Click Bitcoin then click the receive button.'), _react2.default.createElement('p', null, 'Just like traditional bank transfers receiving blockchain assets works though account numbers. Once you click the receive button Exodus shows your Bitcoin address. Similar to a bank account number, you give this bitcoin address to another person you want to receive a bitcoin payment from.'), _react2.default.createElement('p', null, 'There are four action buttons in this window to copy, print or email your bitcoin address. You can also click the link icon to view your address on the blockchain. Finally, there is a QR code in this window that contains your bitcoin address. Scan this QR code from a mobile device to send bitcoin between devices without typing long addresses or emailing blockchain addresses to yourself.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question9',
                    className: 'title'
                }, 'How long does it take to receive a payment after it was sent?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question9',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Payments typically show up in Exodus a few seconds after they are sent to the blockchain network. If you are receiving a payment sent by a third-party service or company keep in mind they may not send your payment immediately.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question10',
                    className: 'title'
                }, 'How can I see the details of a transaction?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question10',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Clicking on a transaction in the wallet view expands the transaction to show additional details. Each type of transaction; sent, received and exchanges have corresponding details associated with the transaction. For example, exchanges show total amounts exchanged while receive transactions show amount and time received.'), _react2.default.createElement('p', null, 'On any transaction you can click on the transaction id to open the corresponding blockchain explorer to view the transaction directly on the blockchain network.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question11',
                    className: 'title'
                }, 'Does Exodus charge a fee to send or receive a payment?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question11',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus is free to download and use on all platforms. Receiving transactions is also free. However, each network requires a small processing fee to send a transaction. This processing fee is shown inside Exodus on the bottom right of the send form. Typically this fee is very small and just a few cents. This fee is paid to the network to ensure the transaction is delivered quickly. Exodus does not charge any additional fee and receives no commission on transactions sent.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question12',
                    className: 'title'
                }, 'How do I see the value of my digital assets?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question12',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'You can easily see the total value of all your blockchain assets by clicking on Portfolio. There you will see a visual breakdown of your percentage of each blockchain asset. Under the chart you can see the total amount of each blockchain asset along with the percentage of holdings. Tip: Clicking on any blockchain asset total toggles the values between blockchain assets and local currency.'), _react2.default.createElement('p', null, 'Your total blockchain asset balance is also shown near the top of the main navigation bar.'), _react2.default.createElement('p', null, 'If you want to see the daily spot price of a blockchain asset Exodus recommends visiting ', _react2.default.createElement('span', {
                    className: 'link',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.coincap.io');
                    }
                }, 'www.coincap.io'), '. Here you can see updated blockchain asset prices as well as view historical charts and volume details.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question13',
                    className: 'title'
                }, 'Do I need the internet to use Exodus?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question13',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus requires an internet connection to send, receive, and exchange Blockchain assets. Exodus also makes use of market information to give you real-time updates on the value of your portfolio.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question14',
                    className: 'title'
                }, 'What are the operating system requirements for Exodus?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question14',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'Exodus is supported on macOS (10.13 or higher), Windows 64 bit (10 or higher), and Linux ( Ubuntu 16.04 or higher). Exodus may run on other environments and versions, however they are not officially supported.'))), _react2.default.createElement('div', {
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question15',
                    className: 'title'
                }, 'Exodus special thanks and recognition'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question15',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'The Exodus blockchain asset experience came together from behind-the-scenes effort and hard work of many teams and services. We would especially like to thank the following:'), _react2.default.createElement('img', {
                    className: 'help-credit-logo',
                    src: 'img/help/shapeshift.png'
                }), _react2.default.createElement('p', null, _react2.default.createElement('strong', null, 'ShapeShift'), ': Thank you for building an amazing service and working with us to make exchanges magical for our users. Exodus was originally inspired by your creative, pioneering leadership.'), _react2.default.createElement('img', {
                    className: 'help-credit-logo',
                    src: 'img/help/cryptocompare.png'
                }), _react2.default.createElement('p', null, _react2.default.createElement('strong', null, 'Cryptocompare'), ': Thank you for your quick communication, personal attention, listing our wallet in your forums and for your always-on-up-to-date pricing information. You are fostering a mecca of information for blockchain assets - we are grateful to be a part of the journey.'))), _react2.default.createElement('div', {
                    id: 'claim-bch',
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'question16',
                    className: 'title'
                }, 'How do I claim my Bitcoin Cash (BCH)?'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'question16',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), bcashClaimed === 'true' ? _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'You have already claimed your Bitcoin Cash.')) : _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('p', null, 'If you had Bitcoin in Exodus before August 1, 2017 you may be entitled to claim the same amount of Bitcoin Cash (BCH). We have created an easy way for you to check your Exodus wallet and send out any Bitcoin Cash to a supporting wallet, exchange or to your Exodus Bitcoin Cash wallet.'), _react2.default.createElement('p', null, 'This process takes about 10 minutes to scan your Bitcoin wallet and count up all your available Bitcoin Cash. Once the process is complete Exodus will send all your Bitcoin Cash to the address of your choice.'), _react2.default.createElement('p', null, 'To begin the step-by-step process press the button below.'), _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('a', {
                    onClick: () => {
                        global.Exodus.bcashClaim();
                    }
                }, _react2.default.createElement('div', {
                    id: 'exodus-button-help-slack',
                    className: 'exodus-button exodus-button-extra-wide exodus-button-civic primary-button exodus-animate-all'
                }, 'Claim My Bitcoin Cash Now!'))))));
            }
        }, _class2.propTypes = {
            version: _propTypes2.default.string.isRequired,
            bcashClaimed: _propTypes2.default.string
        }, _temp)) || _class);
        let HelpView = class HelpView extends _react2.default.Component {
            render() {
                return _react2.default.createElement(ReleaseNotes, {
                    version: _appConfig.PACKAGE.version
                });
            }
        };
        exports.default = HelpView;

    }, {
        "80": 80,
        "undefined": undefined
    }],
    363: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.renderApp = renderApp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactDom = require('react-dom');
        var _reactDom2 = _interopRequireDefault(_reactDom);
        var _app = require(346);
        var _app2 = _interopRequireDefault(_app);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function renderApp() {
            _reactDom2.default.render(_react2.default.createElement(_app2.default, null), document.querySelector('#app-container'));
        }

    }, {
        "346": 346,
        "undefined": undefined
    }],
    364: [function(require, module, exports) {
        'use strict';
        const electron = require('electron');
        const remote = electron.remote;
        const Menu = remote.Menu;
        const InputMenu = Menu.buildFromTemplate([{
            label: 'Undo',
            role: 'undo'
        }, {
            label: 'Redo',
            role: 'redo'
        }, {
            type: 'separator'
        }, {
            label: 'Cut',
            role: 'cut'
        }, {
            label: 'Copy',
            role: 'copy'
        }, {
            label: 'Paste',
            role: 'paste'
        }, {
            type: 'separator'
        }, {
            label: 'Select all',
            role: 'selectall'
        }]);
        document.body.addEventListener('contextmenu', e => {
            e.preventDefault();
            e.stopPropagation();
            let node = e.target;
            while (node) {
                if (node.nodeName.match(/^(input|textarea)$/i) || node.isContentEditable) {
                    InputMenu.popup(remote.getCurrentWindow());
                    break;
                }
                node = node.parentNode;
            }
        });

    }, {
        "undefined": undefined
    }],
    365: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _indicator = require(138);
        var _indicator2 = _interopRequireDefault(_indicator);
        var _total = require(123);
        var _total2 = _interopRequireDefault(_total);
        var _hasFunds = require(125);
        var _hasFunds2 = _interopRequireDefault(_hasFunds);
        var _pricesLoaded = require(129);
        var _pricesLoaded2 = _interopRequireDefault(_pricesLoaded);
        var _navigationButton = require(366);
        var _navigationButton2 = _interopRequireDefault(_navigationButton);
        var _electron = require('electron');
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _ui = require(333);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let NavigationView = (_dec = (0, _reactRedux.connect)(state => ({
            fiatConversions: (0, _conversions2.default)(state),
            fiatTotal: (0, _total2.default)(state),
            hasFunds: (0, _hasFunds2.default)(state),
            marketPricesLoaded: (0, _pricesLoaded2.default)(state),
            backup: state.backup,
            status: state.status,
            statusIndictor: (0, _indicator2.default)(state)
        })), _dec(_class = (_temp = _class2 = class NavigationView extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    displayFiat: true
                };
                this.handleClickChangeUnit = this.handleClickChangeUnit.bind(this);
            }
            handleClickChangeUnit() {
                this.setState({
                    displayFiat: !this.state.displayFiat
                });
            }
            getBadge(nav) {
                switch (nav) {
                    case 'Backup':
                        const {
                            hasFunds,
                            backup
                        } = this.props;
                        return hasFunds && !backup.auth ? '!' : undefined;
                }
            }
            render() {
                const {
                    active,
                    fiatConversions,
                    onClick,
                    fiatTotal,
                    items,
                    marketPricesLoaded,
                    status,
                    statusIndictor
                } = this.props;
                const {
                    displayFiat
                } = this.state;
                return _react2.default.createElement('div', {
                    id: 'exodus-nav'
                }, _react2.default.createElement('div', {
                    id: 'logo-current-balance-container'
                }, _react2.default.createElement('div', {
                    id: 'logo'
                }), _react2.default.createElement('div', {
                    id: 'current-balance',
                    onClick: this.handleClickChangeUnit
                }, marketPricesLoaded ? displayFiat ? _react2.default.createElement(_ui.CounterCurrencyText, {
                    amount: fiatTotal,
                    symbol: true,
                    code: true
                }) : _react2.default.createElement(_ui.CounterCurrencyText, {
                    amount: fiatConversions.bitcoin(fiatTotal),
                    code: true
                }) : _react2.default.createElement('span', null, '\xA0'))), items.map((nav, i) => nav !== '-' ? _react2.default.createElement(_navigationButton2.default, {
                    text: nav,
                    key: nav,
                    active: nav === active,
                    onClick: onClick,
                    badge: this.getBadge(nav)
                }) : _react2.default.createElement('div', {
                    id: 'nav-last-fill',
                    className: 'nav-button',
                    key: 'sep' + i
                })), _react2.default.createElement('div', {
                    id: 'nav-status',
                    className: (0, _classnames2.default)('nav-button', {
                        'show': status.code > 0
                    }),
                    onClick: () => _electron.shell.openExternal('https://www.exodus.io/status')
                }, _react2.default.createElement('div', {
                    className: 'nav-item-group'
                }, _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('nav-item status-light', statusIndictor)
                }), _react2.default.createElement('div', {
                    className: 'nav-item-text'
                }, 'Status'))));
            }
        }, _class2.propTypes = {
            active: _propTypes2.default.string,
            fiatConversions: _propTypes2.default.object,
            onClick: _propTypes2.default.func,
            fiatTotal: _propTypes2.default.object,
            marketPricesLoaded: _propTypes2.default.bool,
            backup: _propTypes2.default.object,
            status: _propTypes2.default.object.isRequired,
            statusIndictor: _propTypes2.default.string.isRequired,
            items: _propTypes2.default.array.isRequired
        }, _temp)) || _class);
        exports.default = NavigationView;

    }, {
        "119": 119,
        "123": 123,
        "125": 125,
        "129": 129,
        "138": 138,
        "333": 333,
        "366": 366,
        "undefined": undefined
    }],
    366: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (_ref) => {
            let {
                active,
                onClick,
                text,
                badge
            } = _ref;
            return _react2.default.createElement('div', {
                id: 'nav-button-' + text.toLowerCase(),
                className: (0, _classnames2.default)('nav-button ', {
                    'active': active
                }),
                onClick: () => onClick(text)
            }, badge ? _react2.default.createElement('div', {
                className: 'nav-item-badge'
            }, _react2.default.createElement('span', null, badge)) : _react2.default.createElement('div', null), _react2.default.createElement('div', {
                className: 'nav-item-group'
            }, _react2.default.createElement('div', {
                id: 'nav-' + text.toLowerCase(),
                className: 'nav-item'
            }), _react2.default.createElement('div', {
                className: 'nav-item-text'
            }, text)));
        };

    }, {
        "undefined": undefined
    }],
    367: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _reactRedux = require('react-redux');
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _ui = require(333);
        var _portfolio = require(327);
        var _portfolio2 = _interopRequireDefault(_portfolio);
        var _currencyFormatters = require(211);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _addButton = require(95);
        var _addButton2 = _interopRequireDefault(_addButton);
        var _total = require(123);
        var _total2 = _interopRequireDefault(_total);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _percentage = require(122);
        var _percentage2 = _interopRequireDefault(_percentage);
        var _loaded = require(98);
        var _loaded2 = _interopRequireDefault(_loaded);
        var _pricesLoaded = require(129);
        var _pricesLoaded2 = _interopRequireDefault(_pricesLoaded);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _hasFunds = require(125);
        var _hasFunds2 = _interopRequireDefault(_hasFunds);
        var _electronDialog = require(215);
        var _electronDialog2 = _interopRequireDefault(_electronDialog);
        var _getAssetColor = require(183);
        var _getAssetColor2 = _interopRequireDefault(_getAssetColor);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const CoinPortfolio = (_ref) => {
            let {
                coin,
                percentage,
                value,
                toggleCoinClick,
                showFiat
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'key-item'
            }, _react2.default.createElement('div', {
                className: 'key-name'
            }, coin.properName), _react2.default.createElement('span', {
                className: 'key-percentage percentage-text'
            }, percentage, '%'), _react2.default.createElement('div', {
                className: 'key-color exodus-bg-color-' + coin.name
            }), _react2.default.createElement('div', {
                className: 'click-group-hack',
                onClick: toggleCoinClick
            }, showFiat ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: value,
                className: 'key-value',
                symbol: true,
                code: false
            }) : _react2.default.createElement(_ui.NUCurrencyText, {
                amount: value,
                className: 'key-value',
                code: false,
                sigfigs: 8
            })));
        };
        let Portfolio = (_dec = (0, _reactRedux.connect)(state => ({
            availableAssets: (0, _available2.default)(state),
            accountBalances: (0, _coinTotalAmounts2.default)(state),
            fiatTotal: (0, _total2.default)(state),
            fiatPercentage: (0, _percentage2.default)(state),
            getFiatValue: (0, _getValue2.default)(state),
            assetsLoaded: (0, _loaded2.default)(state),
            assetsAddButton: (0, _addButton2.default)(state),
            marketPricesLoaded: (0, _pricesLoaded2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state),
            hasFunds: (0, _hasFunds2.default)(state)
        })), _dec(_class = (_temp = _class2 = class Portfolio extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    showFiat: true
                };
                this.handleClickRestore = this.handleClickRestore.bind(this);
            }
            handleClickCoin(asset) {
                this.setState({
                    showFiat: !this.state.showFiat
                });
            }
            handleClickRestore() {
                const opts = {
                    type: 'question',
                    title: 'Restore',
                    message: 'Please select the appropriate restore method.',
                    buttons: ['Backup Link (from email)', '12 Word Recovery Phrase']
                };
                _electronDialog2.default.showMessageBox(null, opts, buttonIndex => {
                    switch (buttonIndex) {
                        case 0:
                            return global.Exodus.restore.fromRecoveryLink();
                        case 1:
                            return global.Exodus.restore.fromRecoveryPhrase();
                    }
                });
            }
            render() {
                let {
                    assetsAddButton,
                    availableAssets,
                    fiatTotal,
                    fiatPercentage,
                    getFiatValue,
                    accountBalances,
                    assetsLoaded,
                    marketPricesLoaded,
                    marketPricesAvailable,
                    hasFunds
                } = this.props;
                const allAssetsLoaded = Object.values(assetsLoaded).every(i => i);
                const showFiat = allAssetsLoaded && (marketPricesLoaded || !hasFunds) ? this.state.showFiat : false;
                const coinData = Object.keys(availableAssets).map(assetName => {
                    return {
                        fiat: getFiatValue(accountBalances[assetName]).toNumber(),
                        coinTotal: accountBalances[assetName].toNumber(),
                        color: (0, _getAssetColor2.default)(assetName),
                        coin: assetName
                    };
                });
                const fiatStr = total => {
                    const obj = (0, _currencyFormatters.formatObj)(total);
                    return `${obj.symbol}${obj.whole}${obj.decimalSep}${obj.fraction}`;
                };
                const WelcomeMessage = (_ref2) => {
                    let {
                        allAssetsLoaded,
                        marketPricesLoaded,
                        hasFunds
                    } = _ref2;
                    if (!allAssetsLoaded) {
                        return _react2.default.createElement('div', {
                            id: 'welcome-message'
                        }, 'Loading...');
                    }
                    if (!marketPricesLoaded && hasFunds) {
                        return _react2.default.createElement('div', {
                            id: 'welcome-message'
                        }, 'Please check your internet connection');
                    }
                    if (!hasFunds) {
                        return _react2.default.createElement('div', {
                            id: 'welcome-message'
                        }, 'Get started by sending assets to your wallet or\xA0', _react2.default.createElement('span', {
                            className: 'restore-link',
                            onClick: this.handleClickRestore
                        }, 'restore from backup'), '.');
                    }
                };
                const ExodusIntro = props => _react2.default.createElement('div', {
                    id: 'welcome-to-exodus'
                }, _react2.default.createElement('div', {
                    id: 'welcome-to-exodus-chart'
                }), _react2.default.createElement('div', {
                    id: 'welcome-to-exodus-logomark'
                }), _react2.default.createElement('div', {
                    id: 'welcome-title'
                }, 'Welcome To Exodus'), _react2.default.createElement(WelcomeMessage, props));
                return _react2.default.createElement('div', {
                    id: 'exodus-content-portfolio'
                }, _react2.default.createElement('div', {
                    id: 'add-asset',
                    className: assetsAddButton ? 'add' : 'subtract',
                    onClick: global.handleClickWalletAddAssets
                }, _react2.default.createElement('span', null, assetsAddButton ? '+' : '-')), _react2.default.createElement('div', {
                    id: 'portfolio-chart'
                }, allAssetsLoaded && hasFunds && marketPricesLoaded ? _react2.default.createElement(_portfolio2.default, {
                    data: coinData,
                    total: fiatStr(fiatTotal)
                }) : _react2.default.createElement(ExodusIntro, {
                    allAssetsLoaded: allAssetsLoaded,
                    marketPricesLoaded: marketPricesLoaded,
                    hasFunds: hasFunds
                })), _react2.default.createElement('div', {
                    id: 'portfolio-key'
                }, Object.keys(availableAssets).map(assetName => _react2.default.createElement(CoinPortfolio, {
                    key: assetName,
                    coin: availableAssets[assetName],
                    percentage: fiatPercentage[assetName] || 0,
                    value: showFiat && marketPricesAvailable(assetName) ? getFiatValue(accountBalances[assetName]) : accountBalances[assetName].toDefault(),
                    toggleCoinClick: () => this.handleClickCoin(assetName),
                    showFiat: showFiat
                }))));
            }
        }, _class2.propTypes = {
            availableAssets: _propTypes2.default.object,
            fiatTotal: _propTypes2.default.object,
            accountBalances: _propTypes2.default.object,
            getFiatValue: _propTypes2.default.func.isRequired
        }, _temp)) || _class);
        exports.default = Portfolio;

    }, {
        "102": 102,
        "121": 121,
        "122": 122,
        "123": 123,
        "125": 125,
        "128": 128,
        "129": 129,
        "183": 183,
        "211": 211,
        "215": 215,
        "327": 327,
        "333": 333,
        "95": 95,
        "96": 96,
        "98": 98,
        "undefined": undefined
    }],
    368: [function(require, module, exports) {
        module.exports = {
            "aragon": {
                "description": "Allows users to manage organizations and companies on the Ethereum blockchain.",
                "reddit": "https://www.reddit.com/r/aragonproject/",
                "twitter": "https://twitter.com/aragonproject",
                "website": "https://aragon.one/"
            },
            "augur": {
                "description": "Ethereum-based platform where anyone can create, monitor or trade in a prediction markets about any topic.",
                "reddit": "https://www.reddit.com/r/Augur/",
                "twitter": "https://twitter.com/AugurFeed",
                "website": "https://augur.net/"
            },
            "bancor": {
                "description": "Ethereum-based protocol for the creation of Smart Tokens, which are convertible through smart contracts. Bancor utilizes a method or reserve to enable price discovery and liquidity for tokens without needing to match two parties in an exchange.",
                "reddit": "https://www.reddit.com/r/Bancor/",
                "twitter": "https://twitter.com/bancornetwork",
                "website": "https://www.bancor.network/"
            },
            "bat": {
                "description": "Ethereum-based token that can be used to obtain advertising and attention-based services on the Brave platform, a new blockchain based digital advertising system.",
                "reddit": "https://www.reddit.com/r/BATProject/",
                "twitter": "https://twitter.com/AttentionToken",
                "website": "https://basicattentiontoken.org/"
            },
            "bcash": {
                "description": "Bitcoin Cash is a hard forked version of Bitcoin. It is similar to Bitcoin with regards to its protocol, however the differences are defined in the blocksize limits and difficulty adjustment.",
                "reddit": "https://www.reddit.com/r/Bitcoincash/",
                "website": "https://www.bitcoincash.org/"
            },
            "bitcoin": {
                "description": "Bitcoin uses peer-to-peer technology to operate with no central authority or banks; managing transactions and the issuing of bitcoins is carried out collectively by the network.",
                "reddit": "https://www.reddit.com/r/Bitcoin/",
                "twitter": "https://twitter.com/bitcoin",
                "website": "https://www.bitcoin.org/"
            },
            "civic": {
                "description": "Civic is an Ethereum-based decentralized identity ecosystem that allows for on-demand, secure and low cost access to identity verification via the blockchain.",
                "reddit": "https://www.reddit.com/r/civicplatform/",
                "twitter": "https://twitter.com/civickey",
                "website": "https://www.civic.com/"
            },
            "dash": {
                "description": "DASH aims to be a privacy-centric cryptographic currency with unlinkable transactions using the PrivateSend system. Blockchain governance is carried out via the MasterNode system.",
                "reddit": "https://www.reddit.com/r/dashpay/",
                "twitter": "https://twitter.com/dashpay",
                "website": "https://www.dash.org/"
            },
            "decred": {
                "description": "Self-funding cryptocurrency with community-based governance integrated into its blockchain. At its core, is a hybridized proof-of-work proof-of-stake (PoW/PoS) consensus system.",
                "reddit": "https://www.reddit.com/r/decred/",
                "twitter": "https://twitter.com/decredproject",
                "website": "https://decred.org/"
            },
            "digix": {
                "description": "Digix DAO is an Ethereum-based Decentralised Autonomous Organization or DAO. Digix gives users the right to profits which own the right to gold stored in vault in Singapore.",
                "reddit": "https://www.reddit.com/r/digix/",
                "twitter": "https://twitter.com/digixglobal",
                "website": "https://digix.global/"
            },
            "district0x": {
                "description": "District0x is an Ethereum-based protocol that enables a collective of decentralized communities referred to as districts. The district0x token can be used to signal what districts should be built and deployed.",
                "reddit": "https://www.reddit.com/r/district0x/",
                "twitter": "https://twitter.com/district0x",
                "website": "https://district0x.io/"
            },
            "eos": {
                "description": "EOS is an architecture to enable scaling of decentralized applications providing accounts, authentication, databases, asynchronous communication and scheduling of applications across multiple CPU cores.",
                "reddit": "https://www.reddit.com/r/eos/",
                "twitter": "https://twitter.com/eos_io",
                "website": "https://eos.io/"
            },
            "ethereum": {
                "description": "Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference.",
                "reddit": "https://www.reddit.com/r/ethereum/",
                "twitter": "https://twitter.com/ethereumproject",
                "website": "https://ethereum.org/"
            },
            "ethereumclassic": {
                "description": "Ethereum Classic keeps the Ethereum blockchain unchanged for the community that opposed the hard fork for the return of The DAO funds. Additionally, Ethereum Classic is not transitioning to proof-of-stake (PoS) unlike Ethereum.",
                "reddit": "https://www.reddit.com/r/EthereumClassic/",
                "twitter": "https://twitter.com/eth_classic",
                "website": "https://ethereumclassic.github.io/"
            },
            "factom": {
                "description": "Secures data for organizations by publishing a cryptographic fingerprint to its blockchain. Factom allows users to write data to a ledger for a small fee.",
                "reddit": "https://www.reddit.com/r/factom/",
                "twitter": "https://twitter.com/factom",
                "website": "https://www.factom.com/"
            },
            "firstblood": {
                "description": "Ethereum-based decentralized platform where gamers are rewarded for their gaming skills. Allows users to bet and for the results to be verified and settled automatically via a smart-contract system.",
                "twitter": "https://twitter.com/firstbloodio",
                "website": "https://firstblood.io/#/home"
            },
            "funfair": {
                "description": "FunFair is an Ethereum-based casino that allows users to bet in a trustless and decentralized model, featuring 3D games.",
                "reddit": "https://www.reddit.com/r/FunfairTech/",
                "twitter": "https://twitter.com/FunFairTech",
                "website": "https://funfair.io/"
            },
            "gnosis": {
                "description": "Gnosis is an Ethereum-based decentralized prediction market. It provides a platform for anyone to predict the outcome of any event and plans to drastically simplify the creation of customized prediction market applications.",
                "reddit": "https://www.reddit.com/r/gnosisPM/",
                "twitter": "https://twitter.com/gnosisPM",
                "website": "https://gnosis.pm/"
            },
            "golem": {
                "description": "Golem is an Ethereum-based decentralized computation network. Using Golem users can buy or sell computational power from other users in a peer to peer environment.",
                "reddit": "https://www.reddit.com/r/GolemProject/",
                "twitter": "https://twitter.com/golemproject",
                "website": "https://golem.network/"
            },
            "litecoin": {
                "description": "Litecoin provides fast, 2.5 minute transaction confirmations and uses scrypt-based proof-of-work to target everyday computers. Litecoin, created by an ex-Google employee, Charlie Lee, is often considered the silver to Bitcoin's gold.",
                "reddit": "https://www.reddit.com/r/litecoin/",
                "twitter": "https://twitter.com/LitecoinProject",
                "website": "https://litecoin.com/"
            },
            "metal": {
                "description": "Metal is an Ethereum-based token that gives rewards for spending.",
                "reddit": "https://www.reddit.com/r/MetalPay/",
                "twitter": "https://twitter.com/metalpaysme",
                "website": "https://www.metalpay.com/"
            },
            "monero": {
                "description": "Monero (XMR) is a cryptonight algorithm based alternative crypto currency. Monero uses a Ring Signature and Confidential Transaction system to protect your privacy, allowing users to make untraceable transactions.",
                "reddit": "https://www.reddit.com/r/Monero/",
                "twitter": "https://twitter.com/monerocurrency/",
                "website": "https://getmonero.org/"
            },
            "omisego": {
                "description": "OmiseGO is building a decentralized exchange, messaging network, and asset-backed blockchain gateway. It uses the mechanism of a protocol token to create a proof-of-stake blockchain to enable enforcement of market activity amongst participants.",
                "reddit": "https://www.reddit.com/r/omise_go/",
                "twitter": "https://twitter.com/omise_go",
                "website": "https://omg.omise.co/"
            },
            "qtum": {
                "description": "Qtum is a smart contract platform similar to Ethereum while still mantaining an Unspent Transaction Output (UTXO) transaction model similar to Bitcoin. Qtum employs a Proof of Stake consensus mechanism.",
                "reddit": "https://www.reddit.com/r/Qtum/",
                "twitter": "https://twitter.com/QtumOfficial",
                "website": "https://www.qtum.org/"
            },
            "ripple": {
                "description": "Real-time peer-to-peer settlement network. Ripples (XRP) aren't mined and each transaction destroys a small amount of XRP - the net effect is a deflationary asset.",
                "reddit": "https://www.reddit.com/r/Ripple/",
                "twitter": "https://twitter.com/Ripple",
                "website": "https://www.ripple.com/"
            },
            "salt": {
                "description": "SALT is an Ethereum-based membership for lending and borrowing that allows users to leverage their blockchain assets to secure cash loans.",
                "reddit": "https://www.reddit.com/r/SALTLending/",
                "twitter": "https://twitter.com/SALTLending",
                "website": "https://www.saltlending.com/"
            },
            "status": {
                "description": "Status is an Ethereum-based open source messaging platform and mobile browser that allows users to interact with decentralized applications (dApps) that run on the Ethereum Network.",
                "reddit": "https://www.reddit.com/r/status_token/",
                "twitter": "https://twitter.com/ethstatus",
                "website": "https://status.im/"
            },
            "storj": {
                "description": "Storj is a decentralized cloud storage platform that allows anyone to rent their idle hard drive space and to earn a revenue by doing so. Payments within the Storj network and conducted with the STORJ token, an ERC20 Ethereum-based token.",
                "reddit": "https://www.reddit.com/r/storj/",
                "twitter": "https://twitter.com/storjproject",
                "website": "https://storj.io/"
            },
            "tether": {
                "description": "USDT is a cryptocurrency asset issued on the Bitcoin blockchain via the Omni Layer Protocol. Each USDT unit is backed by a U.S Dollar held in the reserves of the Tether Limited.",
                "reddit": "https://www.reddit.com/r/Tether/",
                "twitter": "https://twitter.com/tether_to",
                "website": "https://tether.to/"
            },
            "wings": {
                "description": "Wings enables users to create Decentralized Autonomous Organizations (DAOs). Wings Ethereum-based DAO tokens, represent shares and allow users to vote on developments and receive dividends.",
                "reddit": "https://www.reddit.com/r/WingsDAO/",
                "twitter": "https://twitter.com/wingsplatform",
                "website": "https://www.wings.ai/#!/home/discover"
            },
            "zerox": {
                "description": "0x is an Ethereum-based protocol for a decentralized exchange for other Ethereum-based assets. Developers can use 0x to build their own custom exchange apps.",
                "reddit": "https://www.reddit.com/r/0xProject/",
                "twitter": "https://twitter.com/0xproject",
                "website": "https://www.0xproject.com/"
            }
        }

    }, {}],
    369: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _flux = require(257);
        var _reactRedux = require('react-redux');
        var _appConfig = require(80);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _assetData = require(368);
        var _assetData2 = _interopRequireDefault(_assetData);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const alwaysActive = ['bitcoin', 'ethereum'];
        const appName = (() => {
            if (_appConfig.ENV_BUILD_EXODUS) return 'Exodus';
            if (_appConfig.ENV_BUILD_EDEN) return 'Exodus Eden';
            return _appConfig.ENV_BUILD_NAME;
        })();
        let Assets = (_dec = (0, _reactRedux.connect)(state => ({
            assetsTotalAmounts: (0, _coinTotalAmounts2.default)(state),
            availableAssets: (0, _available2.default)(state)
        })), _dec(_class = class Assets extends _react2.default.Component {
            constructor() {
                super();
                this.handleChange = this.handleChange.bind(this);
            }
            handleChange(_ref) {
                let {
                    target
                } = _ref;
                if (target.checked) {
                    _flux.actions.config.enableAsset(target.name);
                    window.requestIdleCallback(() => _flux.actions.assetsRefresh.refresh(target.name));
                } else {
                    _flux.actions.config.disableAsset(target.name);
                }
            }
            render() {
                const isEnabled = asset => !!this.props.availableAssets[asset.name];
                const hasBalance = asset => {
                    let balance = this.props.assetsTotalAmounts[asset.name];
                    if (['ripple'].includes(asset.name)) balance = balance.subtract(asset.accountReserve);
                    return !balance.clampLowerZero().isZero();
                };
                const disabled = asset => alwaysActive.includes(asset.name) || hasBalance(asset);
                const statusText = asset => {
                    if (alwaysActive.includes(asset.name)) return 'Always Active';
                    if (hasBalance(asset)) return 'Has Balance';
                    return '';
                };
                const assetComponents = Object.values(_assets2.default).filter(asset => asset.available && (asset.name !== 'qtum' || isEnabled(asset))).map(asset => {
                    const data = _assetData2.default[asset.name] || {};
                    return _react2.default.createElement('div', {
                        className: 'asset-row',
                        key: asset.name
                    }, _react2.default.createElement('label', {
                        htmlFor: `settings-assets--${asset.name}`
                    }, _react2.default.createElement('input', {
                        name: asset.name,
                        type: 'checkbox',
                        id: `settings-assets--${asset.name}`,
                        disabled: disabled(asset),
                        checked: isEnabled(asset),
                        onChange: this.handleChange
                    }), _react2.default.createElement('div', {
                        className: 'asset-checkbox'
                    }), _react2.default.createElement('div', {
                        className: 'asset-name'
                    }, _react2.default.createElement('img', {
                        className: 'asset-name--logo',
                        src: `img/logo-${asset.name}@2x.png`
                    }), _react2.default.createElement('div', {
                        className: 'asset-name--name'
                    }, _react2.default.createElement('span', {
                        className: 'asset-name--proper-name'
                    }, asset.properName), _react2.default.createElement('span', {
                        className: 'asset-name--display-unit'
                    }, asset.displayUnit), _react2.default.createElement('span', {
                        className: 'asset-name--status'
                    }, statusText(asset))))), _react2.default.createElement('div', {
                        className: 'asset-description'
                    }, data.description), _react2.default.createElement('div', {
                        className: 'asset-links'
                    }, data.website && _react2.default.createElement('span', {
                        className: 'asset-links--icon website',
                        onClick: openURL(data.website)
                    }), data.reddit && _react2.default.createElement('span', {
                        className: 'asset-links--icon reddit',
                        onClick: openURL(data.reddit)
                    }), data.twitter && _react2.default.createElement('span', {
                        className: 'asset-links--icon twitter',
                        onClick: openURL(data.twitter)
                    })));
                });
                return _react2.default.createElement('div', {
                    id: 'settings-assets',
                    className: 'settings-global'
                }, _react2.default.createElement('h1', null, 'Show / Hide'), _react2.default.createElement('p', {
                    className: 'description'
                }, 'Assets that are disabled are hidden in ', appName, '. In order to hide an asset, it must have a 0 balance. Since the exchange section requires a minimum of two assets, Bitcoin and Ethereum must remain active.'), _react2.default.createElement('form', {
                    action: '#'
                }, _react2.default.createElement('div', {
                    id: 'asset-collection-table'
                }, assetComponents)));
            }
        }) || _class);
        exports.default = Assets;

        function openURL(url) {
            return () => _electron.shell.openExternal(url);
        }

    }, {
        "102": 102,
        "184": 184,
        "257": 257,
        "368": 368,
        "80": 80,
        "96": 96,
        "undefined": undefined
    }],
    370: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _flux = require(257);
        var _settingsNav = require(373);
        var _settingsNav2 = _interopRequireDefault(_settingsNav);
        var _settings = require(297);
        var _settings2 = _interopRequireDefault(_settings);
        var _assets = require(369);
        var _assets2 = _interopRequireDefault(_assets);
        var _localization = require(371);
        var _localization2 = _interopRequireDefault(_localization);
        var _skins = require(374);
        var _skins2 = _interopRequireDefault(_skins);
        var _security = require(372);
        var _security2 = _interopRequireDefault(_security);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let SettingsView = (_dec = (0, _reactRedux.connect)((state, props) => ({
            activeSetting: state.localStorage['settings:active-view']
        })), _dec(_class = class SettingsView extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.handleNavClick = this.handleNavClick.bind(this);
            }
            handleNavClick(setting) {
                _flux.actions.localStorage.setItem('settings:active-view', setting);
            }
            render() {
                const setting = _settings2.default[this.props.activeSetting] || _settings2.default.assets;
                let content;
                switch (setting.name) {
                    case 'assets':
                        content = _react2.default.createElement(_assets2.default, null);
                        break;
                    case 'localization':
                        content = _react2.default.createElement(_localization2.default, null);
                        break;
                    case 'skins':
                        content = _react2.default.createElement(_skins2.default, null);
                        break;
                    case 'security':
                        content = _react2.default.createElement(_security2.default, null);
                        break;
                }
                return _react2.default.createElement('div', {
                    id: 'exodus-content-settings'
                }, _react2.default.createElement(_settingsNav2.default, {
                    activeSetting: setting,
                    onClick: this.handleNavClick
                }), _react2.default.createElement('section', {
                    className: 'main-content-area'
                }, content));
            }
        }) || _class);
        exports.default = SettingsView;

    }, {
        "257": 257,
        "297": 297,
        "369": 369,
        "371": 371,
        "372": 372,
        "373": 373,
        "374": 374,
        "undefined": undefined
    }],
    371: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class;
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _reactSelect = require('react-select');
        var _reactSelect2 = _interopRequireDefault(_reactSelect);
        var _flux = require(257);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _units = require(210);
        var _units2 = _interopRequireDefault(_units);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        let Localization = (_dec = (0, _reactRedux.connect)(state => ({
            fiat: (0, _fiat2.default)(state).defaultUnit.unitName
        })), _dec(_class = class Localization extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.handleFiatChange = this.handleFiatChange.bind(this);
            }
            handleFiatChange(_ref) {
                let {
                    value
                } = _ref;
                _flux.actions.config.setFiatUnit(value);
                _flux.actions.monitors.market.update();
                _flux.actions.monitors.marketws.update();
                _flux.actions.marketHistory.loadAll();
            }
            render() {
                const options = lodash.map(_units2.default, (unit, key) => {
                    return {
                        value: key,
                        label: unit.label
                    };
                });
                return _react2.default.createElement('div', {
                    id: 'settings-localization',
                    className: 'settings-global'
                }, _react2.default.createElement('h1', null, 'Currency'), _react2.default.createElement('p', {
                    className: 'description'
                }, 'Select the currency unit to display fiat values.'), _react2.default.createElement(_reactSelect2.default, {
                    className: 'ex-select',
                    value: this.props.fiat,
                    clearable: false,
                    options: options,
                    onChange: this.handleFiatChange
                }));
            }
        }) || _class);
        exports.default = Localization;

    }, {
        "104": 104,
        "210": 210,
        "257": 257,
        "undefined": undefined
    }],
    372: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _hasFunds = require(125);
        var _hasFunds2 = _interopRequireDefault(_hasFunds);
        var _twoOfTwo = require(319);
        var _reactQr = require(286);
        var _reactQr2 = _interopRequireDefault(_reactQr);
        var _flux = require(257);
        var _paired = require(139);
        var _paired2 = _interopRequireDefault(_paired);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let Security = (_dec = (0, _reactRedux.connect)(state => ({
            backup: state.backup,
            hasFunds: (0, _hasFunds2.default)(state),
            connection: state.twoOfTwo.connection,
            paired: (0, _paired2.default)(state),
            pair: state.twoOfTwo.pair
        })), _dec(_class = (_temp = _class2 = class Security extends _react2.default.Component {
            constructor() {
                super();
                const {
                    connectionData,
                    qr
                } = _twoOfTwo.QR.generate();
                this.state = {
                    connectionData,
                    qr,
                    phoneCode: '4321'
                };
                this.handlePhoneCodeType = this.handlePhoneCodeType.bind(this);
                this.handlePhoneCodeSubmit = this.handlePhoneCodeSubmit.bind(this);
            }
            connect(status) {
                if (status === 'not-started') {
                    _flux.actions.twoOfTwo.pair.init(this.state.connectionData);
                }
            }
            componentWillReceiveProps(newProps) {
                const {
                    status
                } = newProps.pair;
                this.connect(status);
            }
            componentDidMount() {
                const {
                    status
                } = this.props.pair;
                this.connect(status);
            }
            componentWillUnmount() {
                if (!this.props.paired) {
                    _flux.actions.twoOfTwo.pair.cancel();
                }
            }
            handlePhoneCodeType(e) {
                this.setState({
                    phoneCode: e.target.value.trim()
                });
            }
            handlePhoneCodeSubmit() {
                if (this.state.phoneCode) {
                    _flux.actions.twoOfTwo.pair.submitPhoneCode(this.state.phoneCode);
                }
            }
            displayLoading() {
                return _react2.default.createElement('div', null, 'Loading...');
            }
            displayPhoneCodeInput() {
                const {
                    phoneCodeError
                } = this.props.pair;
                return _react2.default.createElement('div', null, _react2.default.createElement('p', {
                    className: 'description'
                }, 'Enter Phone code.'), _react2.default.createElement('input', {
                    value: this.state.phoneCode,
                    onChange: this.handlePhoneCodeType
                }), _react2.default.createElement('button', {
                    onClick: this.handlePhoneCodeSubmit
                }, 'Ok'), _react2.default.createElement('p', null, phoneCodeError ? phoneCodeError.message : ''));
            }
            displayError() {
                const {
                    error
                } = this.props.pair;
                return _react2.default.createElement('div', null, 'Faied: ', error.message);
            }
            displaySetup() {
                const {
                    status: connectionStatus
                } = this.props.connection;
                const {
                    status: pairStatus
                } = this.props.pair;
                switch (pairStatus) {
                    case 'failed':
                        return this.displayError();
                    case 'loading':
                        return this.displayLoading();
                    case 'code-input':
                        return this.displayPhoneCodeInput();
                }
                return _react2.default.createElement('div', null, _react2.default.createElement('p', {
                    className: 'description'
                }, 'Download the Exodus app and scan the QR code to establish the connection.'), _react2.default.createElement('div', {
                    className: 'qr-code-box'
                }, _react2.default.createElement(_reactQr2.default, {
                    text: this.state.qr
                })), _react2.default.createElement('div', null, connectionStatus));
            }
            displayActivated() {
                return _react2.default.createElement('p', {
                    className: 'description'
                }, 'Two of two activated.');
            }
            displayNotAllowed() {
                return _react2.default.createElement('p', {
                    className: 'description'
                }, 'Your wallet needs to be new and empty.');
            }
            render() {
                const {
                    backup,
                    hasFunds
                } = this.props;
                const isActivated = this.props.paired;
                const isAllowed = !hasFunds && !backup.auth;
                let content;
                if (isActivated) {
                    content = this.displayActivated();
                } else if (isAllowed) {
                    content = this.displaySetup();
                } else {
                    content = this.displayNotAllowed();
                }
                return _react2.default.createElement('div', {
                    id: 'settings-twofa',
                    className: 'settings-global'
                }, _react2.default.createElement('h1', null, 'Two-of-two'), content);
            }
        }, _class2.propTypes = {
            backup: _propTypes2.default.object.isRequired,
            hasFunds: _propTypes2.default.bool.isRequired,
            connection: _propTypes2.default.object.isRequired,
            pair: _propTypes2.default.object.isRequired
        }, _temp)) || _class);
        exports.default = Security;

    }, {
        "125": 125,
        "139": 139,
        "257": 257,
        "286": 286,
        "319": 319,
        "undefined": undefined
    }],
    373: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _settings = require(297);
        var _settings2 = _interopRequireDefault(_settings);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (_ref) => {
            let {
                activeSetting,
                onClick
            } = _ref;
            return _react2.default.createElement('nav', {
                id: 'settings-navigavtion',
                className: 'menu menu--secondary'
            }, _react2.default.createElement('ul', {
                className: 'menu__list'
            }, Object.keys(_settings2.default).map(setting => _react2.default.createElement('li', {
                className: activeSetting === _settings2.default[setting] ? 'menu__item menu__item--current' : 'menu__item',
                key: _settings2.default[setting].name,
                onClick: () => onClick(setting)
            }, _react2.default.createElement('a', {
                className: activeSetting === _settings2.default[setting] ? 'menu__link' : 'menu__link'
            }, _settings2.default[setting].properName)))));
        };

    }, {
        "297": 297,
        "undefined": undefined
    }],
    374: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _flux = require(257);
        var _configKeys = require(206);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const themeUpdate = themeName => () => _flux.actions.config.update(_configKeys.themeName, themeName);
        let Skins = class Skins extends _react2.default.Component {
            render() {
                return _react2.default.createElement('div', {
                    id: 'style-choices'
                }, _react2.default.createElement('div', {
                    id: 'colors',
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'colors-group',
                    className: 'title'
                }, 'Colors'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'colors-group',
                    className: 'control-checkbox',
                    defaultChecked: true
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('div', {
                    className: 'style-buttons'
                }, _react2.default.createElement('div', {
                    id: 'set-theme-origin',
                    className: 'set-theme-button',
                    onClick: themeUpdate('origin')
                }, 'Origin'), _react2.default.createElement('div', {
                    id: 'set-theme-midnight',
                    className: 'set-theme-button',
                    onClick: themeUpdate('midnight')
                }, 'Midnight'), _react2.default.createElement('div', {
                    id: 'set-theme-evening',
                    className: 'set-theme-button',
                    onClick: themeUpdate('evening')
                }, 'Evening'), _react2.default.createElement('div', {
                    id: 'set-theme-dark-sky',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dark-sky')
                }, 'Dark Sky'), _react2.default.createElement('div', {
                    id: 'set-theme-haze',
                    className: 'set-theme-button',
                    onClick: themeUpdate('haze')
                }, 'Haze'), _react2.default.createElement('div', {
                    id: 'set-theme-barlow',
                    className: 'set-theme-button',
                    onClick: themeUpdate('barlow')
                }, 'Barlow'), _react2.default.createElement('div', {
                    id: 'set-theme-equinox',
                    className: 'set-theme-button',
                    onClick: themeUpdate('equinox')
                }, 'Equinox'), _react2.default.createElement('div', {
                    id: 'set-theme-aphelion',
                    className: 'set-theme-button',
                    onClick: themeUpdate('aphelion')
                }, 'Aphelion')))), _react2.default.createElement('div', {
                    id: 'textures',
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'textures-group',
                    className: 'title'
                }, 'Textures'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'textures-group',
                    className: 'control-checkbox',
                    defaultChecked: true
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('div', {
                    className: 'style-buttons'
                }, _react2.default.createElement('div', {
                    id: 'set-theme-linen',
                    className: 'set-theme-button',
                    onClick: themeUpdate('linen')
                }, 'Gray Linen'), _react2.default.createElement('div', {
                    id: 'set-theme-dark-linen',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dark-linen')
                }, 'Dark Linen'), _react2.default.createElement('div', {
                    id: 'set-theme-micro-tiles',
                    className: 'set-theme-button',
                    onClick: themeUpdate('micro-tiles')
                }, 'Micro Tiles'), _react2.default.createElement('div', {
                    id: 'set-theme-argyle',
                    className: 'set-theme-button',
                    onClick: themeUpdate('argyle')
                }, 'Argyle'), _react2.default.createElement('div', {
                    id: 'set-theme-black-burlap',
                    className: 'set-theme-button',
                    onClick: themeUpdate('black-burlap')
                }, 'Black Burlap'), _react2.default.createElement('div', {
                    id: 'set-theme-criss-cross',
                    className: 'set-theme-button',
                    onClick: themeUpdate('criss-cross')
                }, 'Criss Cross'), _react2.default.createElement('div', {
                    id: 'set-theme-dark-mosaic',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dark-mosaic')
                }, 'Dark Mosaic'), _react2.default.createElement('div', {
                    id: 'set-theme-honeycomb',
                    className: 'set-theme-button',
                    onClick: themeUpdate('honeycomb')
                }, 'Honeycomb'), _react2.default.createElement('div', {
                    id: 'set-theme-padded',
                    className: 'set-theme-button',
                    onClick: themeUpdate('padded')
                }, 'Padded'), _react2.default.createElement('div', {
                    id: 'set-theme-dark-wood',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dark-wood')
                }, 'Dark Wood')))), _react2.default.createElement('div', {
                    id: 'themes',
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'themes-group',
                    className: 'title'
                }, 'Themes'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'themes-group',
                    className: 'control-checkbox',
                    defaultChecked: true
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('div', {
                    className: 'style-buttons'
                }, _react2.default.createElement('div', {
                    id: 'set-theme-decred',
                    className: 'set-theme-button',
                    onClick: themeUpdate('decred')
                }, 'Decred'), _react2.default.createElement('div', {
                    id: 'set-theme-dash',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dash')
                }, 'Masternode'), _react2.default.createElement('div', {
                    id: 'set-theme-shapeshift',
                    className: 'set-theme-button',
                    onClick: themeUpdate('shapeshift')
                }, 'ShapeShift'), _react2.default.createElement('div', {
                    id: 'set-theme-aurora',
                    className: 'set-theme-button',
                    onClick: themeUpdate('aurora')
                }, 'Aurora'), _react2.default.createElement('div', {
                    id: 'set-theme-space',
                    className: 'set-theme-button',
                    onClick: themeUpdate('space')
                }, 'Deep Space'), _react2.default.createElement('div', {
                    id: 'set-theme-dusk',
                    className: 'set-theme-button',
                    onClick: themeUpdate('dusk')
                }, 'Dusk Sky'), _react2.default.createElement('div', {
                    id: 'set-theme-matrix',
                    className: 'set-theme-button',
                    onClick: themeUpdate('matrix')
                }, 'Matrix')))), _react2.default.createElement('div', {
                    id: 'personalities',
                    className: 'accordion-group'
                }, _react2.default.createElement('label', {
                    htmlFor: 'personal-group',
                    className: 'title'
                }, 'Personalities'), _react2.default.createElement('input', {
                    type: 'checkbox',
                    id: 'personal-group',
                    className: 'control-checkbox'
                }), _react2.default.createElement('div', {
                    className: 'disclosure'
                }), _react2.default.createElement('div', {
                    className: 'content'
                }, _react2.default.createElement('div', {
                    className: 'profile-widgets'
                }, _react2.default.createElement('div', {
                    id: 'profile-bm',
                    className: 'profile-widget'
                }, _react2.default.createElement('img', {
                    id: 'bm',
                    className: 'profile-widget--photo'
                }), _react2.default.createElement('div', {
                    className: 'profile-widget--title'
                }, 'Box Mining'), _react2.default.createElement('div', {
                    className: 'profile-widget--desc'
                }, '"International" is the heart of Boxmining as he offers global cryptocurrency news, including updates from China, Japan, and Korea. Every topic is presented in short, easy to understand segments that fit inside a Box.'), _react2.default.createElement('div', {
                    className: 'profile-widget--action'
                }, _react2.default.createElement('div', {
                    className: 'profile-widget--button',
                    onClick: themeUpdate('boxmining')
                }, 'Box Mining Skin'), _react2.default.createElement('div', {
                    className: 'profile-widget--link youtube',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/link/bm/');
                    }
                }))), _react2.default.createElement('div', {
                    id: 'profile-tyleon',
                    className: 'profile-widget'
                }, _react2.default.createElement('img', {
                    id: 'tyleon',
                    className: 'profile-widget--photo'
                }), _react2.default.createElement('div', {
                    className: 'profile-widget--title'
                }, 'Cryptocurrency. Market'), _react2.default.createElement('div', {
                    className: 'profile-widget--desc'
                }, 'Tai Zen and Leon Fu Dot Com\u2122, often referred to as the The Oracles Of Cryptocurrency\u2122 help the little guy navigate digital asset investments to yield what they call Life Changing Profits\u2122.'), _react2.default.createElement('div', {
                    className: 'profile-widget--action'
                }, _react2.default.createElement('div', {
                    className: 'profile-widget--button',
                    onClick: themeUpdate('tyleon')
                }, 'Tai Zen & Leon Fu Skin'), _react2.default.createElement('div', {
                    className: 'profile-widget--link youtube',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/link/cm/');
                    }
                }))), _react2.default.createElement('div', {
                    id: 'profile-b21',
                    className: 'profile-widget'
                }, _react2.default.createElement('img', {
                    id: 'b21',
                    className: 'profile-widget--photo'
                }), _react2.default.createElement('div', {
                    className: 'profile-widget--title'
                }, 'B21 Block'), _react2.default.createElement('div', {
                    className: 'profile-widget--desc'
                }, 'B21 Block: Cryptocurrency & Blockchain School is led by Ravinder Deol. He has been involved in this ecosystem since 2013, and started out by teaching live classes. That lead to the creation of B21 Block, where along with co-instructors they publish engaging Cryptocurrency & Blockchain education online.'), _react2.default.createElement('div', {
                    className: 'profile-widget--action'
                }, _react2.default.createElement('div', {
                    className: 'profile-widget--button',
                    onClick: themeUpdate('b21')
                }, 'B21 Block Skin'), _react2.default.createElement('div', {
                    className: 'profile-widget--link youtube',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/link/b21/');
                    }
                }))), _react2.default.createElement('div', {
                    id: 'profile-ce',
                    className: 'profile-widget'
                }, _react2.default.createElement('img', {
                    id: 'ce',
                    className: 'profile-widget--photo'
                }), _react2.default.createElement('div', {
                    className: 'profile-widget--title'
                }, 'Crypto "Edutainment"'), _react2.default.createElement('div', {
                    className: 'profile-widget--desc'
                }, 'As a company owner and investor from Holland Levi shares news and opinions from a business perspective, in an easy-to-digest, "edutainment" package. New users be sure to watch his beginner 101 episodes! '), _react2.default.createElement('div', {
                    className: 'profile-widget--action'
                }, _react2.default.createElement('div', {
                    className: 'profile-widget--button',
                    onClick: themeUpdate('ce')
                }, 'Happiness Skin'), _react2.default.createElement('div', {
                    className: 'profile-widget--link youtube',
                    onClick: () => {
                        _electron.shell.openExternal('https://www.exodus.io/link/ce/');
                    }
                })))))));
            }
        };
        exports.default = Skins;

    }, {
        "206": 206,
        "257": 257,
        "undefined": undefined
    }],
    375: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _flux = require(257);
        var _walletDetail = require(405);
        var _walletDetail2 = _interopRequireDefault(_walletDetail);
        var _walletNavigation = require(406);
        var _walletNavigation2 = _interopRequireDefault(_walletNavigation);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _lowBalance = require(99);
        var _lowBalance2 = _interopRequireDefault(_lowBalance);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const handlerRippleLowBalance = () => _electron.shell.openExternal('http://support.exodus.io/article/110-why-does-ripple-have-a-minimum-balance');
        let WalletView = (_dec = (0, _reactRedux.connect)(state => ({
            accounts: state.accounts,
            assets: (0, _available2.default)(state),
            activeCoinName: state.localStorage['wallet:active-coin'],
            rippleLowBalance: (0, _lowBalance2.default)(state)
        })), _dec(_class = (_temp = _class2 = class WalletView extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                const activeCoin = this._getActiveCoin(this.props);
                this.state = {
                    activeCoin
                };
                this.handleCoinClick = this.handleCoinClick.bind(this);
            }
            _getActiveCoin(props) {
                const names = [props.activeCoinName, 'bitcoin', 'ethereum', Object.keys(props.assets).sort()[0]];
                for (const name of names) {
                    const coin = props.assets[name];
                    if (coin) return coin;
                }
            }
            componentWillReceiveProps(nextProps) {
                const nextActiveCoin = this._getActiveCoin(nextProps);
                if (this.state.activeCoin !== nextActiveCoin) {
                    this.setState({
                        activeCoin: nextActiveCoin
                    });
                }
            }
            handleCoinClick(coin) {
                _flux.actions.localStorage.setItem('wallet:active-coin', coin.name);
            }
            render() {
                const {
                    activeCoin
                } = this.state;
                const {
                    rippleLowBalance
                } = this.props;
                if (this.props.accounts.error) _swal2.default.error({
                    text: this.props.accounts.error.message
                });
                return _react2.default.createElement('div', {
                    id: 'exodus-content-wallet'
                }, rippleLowBalance && activeCoin.name === 'ripple' ? _react2.default.createElement('div', {
                    id: 'info-button',
                    className: 'info',
                    onClick: handlerRippleLowBalance
                }, _react2.default.createElement('span', null, 'Low Balance')) : null, _react2.default.createElement(_walletNavigation2.default, {
                    activeCoin: activeCoin,
                    onClick: this.handleCoinClick
                }), activeCoin ? _react2.default.createElement(_walletDetail2.default, {
                    coin: activeCoin
                }) : _react2.default.createElement('div', null, 'Activate at least 1 asset for access to Wallet.'));
            }
        }, _class2.propTypes = {
            accounts: _propTypes2.default.object.isRequired,
            assets: _propTypes2.default.object.isRequired,
            rippleLowBalance: _propTypes2.default.bool
        }, _temp)) || _class);
        exports.default = WalletView;

    }, {
        "257": 257,
        "306": 306,
        "405": 405,
        "406": 406,
        "96": 96,
        "99": 99,
        "undefined": undefined
    }],
    376: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactQr = require(286);
        var _reactQr2 = _interopRequireDefault(_reactQr);
        var _reactRedux = require('react-redux');
        var _coinLogo = require(328);
        var _coinLogo2 = _interopRequireDefault(_coinLogo);
        var _getReceiveAddresses = require(93);
        var _getReceiveAddresses2 = _interopRequireDefault(_getReceiveAddresses);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _electron = require('electron');
        var _lowBalance = require(99);
        var _lowBalance2 = _interopRequireDefault(_lowBalance);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const handlerRippleLowBalance = () => _electron.shell.openExternal('http://support.exodus.io/article/110-why-does-ripple-have-a-minimum-balance');
        let ReceiveModal = (_dec = (0, _reactRedux.connect)((state, props) => ({
            account: state.accounts[props.coin.name],
            getReceiveAddresses: (0, _getReceiveAddresses2.default)(state),
            txLog: state.txLog[props.coin.name],
            rippleLowBalance: (0, _lowBalance2.default)(state)
        })), _dec(_class = (_temp = _class2 = class ReceiveModal extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                const {
                    coin,
                    getReceiveAddresses
                } = props;
                const addresses = Array.from(getReceiveAddresses(coin.name));
                console.log(addresses);
                this.state = {
                    status: `Your ${coin.properName} Address`,
                    addresses: addresses,
                    showPrev: false,
                    showNext: coin.name === 'bitcoin' && addresses.length > 1,
                    index: 0
                };
                this.handleMouseEnter = this.handleMouseEnter.bind(this);
                this.handleMouseLeave = this.handleMouseLeave.bind(this);
                this.handleClickCopy = this.handleClickCopy.bind(this);
                this.handleClickPrint = this.handleClickPrint.bind(this);
                this.handleClickRefresh = this.handleClickRefresh.bind(this);
                this.handleClickNextAddress = this.handleClickNextAddress.bind(this);
                this.handleClickPrevAddress = this.handleClickPrevAddress.bind(this);
                this.handleClickBlockExplorer = this.handleClickBlockExplorer.bind(this);
            }
            componentWillReceiveProps(nextProps) {
                if (nextProps.getRecvExchAddresses === this.props.getReceiveAddresses) return;
                console.log('CWRP');
                const addresses = Array.from(nextProps.getReceiveAddresses(this.props.coin.name));
                console.log(addresses);
                this.setState({
                    addresses
                });
            }
            handleMouseEnter(status) {
                this.setState({
                    status
                });
            }
            handleMouseLeave() {
                const {
                    coin
                } = this.props;
                this.setState({
                    status: `Your ${coin.properName} Address`
                });
            }
            handleClickBlockExplorer() {
                const {
                    coin
                } = this.props;
                const {
                    addresses,
                    index
                } = this.state;
                _electron.shell.openExternal(coin.blockExplorer.addressUrl(String(addresses[index])));
            }
            handleClickCopy() {
                const {
                    addresses,
                    index
                } = this.state;
                require('electron').clipboard.writeText(String(addresses[index]));
                this.setState({
                    status: 'Address Copied To Clipboard'
                });
            }
            handleClickPrint() {
                window.print();
            }
            handleClickRefresh() {}
            handleClickPrevAddress() {
                const {
                    coin
                } = this.props;
                const newIndex = this.state.index - 1;
                const {
                    addresses
                } = this.state;
                this.setState({
                    showPrev: coin.name === 'bitcoin' && newIndex > 0,
                    showNext: coin.name === 'bitcoin' && newIndex < addresses.length - 1,
                    index: newIndex,
                    address: this.state.addresses[newIndex]
                });
            }
            handleClickNextAddress() {
                const {
                    coin
                } = this.props;
                const newIndex = this.state.index + 1;
                const {
                    addresses
                } = this.state;
                this.setState({
                    showPrev: coin.name === 'bitcoin' && newIndex > 0,
                    showNext: coin.name === 'bitcoin' && newIndex < addresses.length - 1,
                    index: newIndex,
                    address: this.state.addresses[newIndex]
                });
            }
            render() {
                const {
                    coin,
                    onRequestClose,
                    rippleLowBalance
                } = this.props;
                let {
                    status,
                    showNext,
                    showPrev,
                    addresses,
                    index
                } = this.state;
                const address = String(addresses[index]);
                const showBalanceWarning = ['ripple'].includes(coin.name) && rippleLowBalance;
                return _react2.default.createElement('div', {
                    className: 'modal'
                }, _react2.default.createElement('div', {
                    className: 'exodus-full-modal-overlay-center'
                }, _react2.default.createElement('div', {
                    id: 'exodus-wallet-receive-modal',
                    className: 'exodus-card-modal-window'
                }, _react2.default.createElement('div', {
                    className: 'close-button',
                    onClick: onRequestClose
                }), _react2.default.createElement(_coinLogo2.default, {
                    coin: coin.name,
                    text: 'Receive'
                }), _react2.default.createElement('div', {
                    className: 'clipping-path'
                }, _react2.default.createElement('div', {
                    className: 'accent top'
                }), _react2.default.createElement('div', {
                    className: 'address-selectors-qr-code-box-group'
                }, _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('address-selector back', {
                        hide: !showPrev
                    }),
                    onClick: this.handleClickPrevAddress
                }), _react2.default.createElement('div', {
                    className: 'qr-code-box'
                }, _react2.default.createElement(_reactQr2.default, {
                    text: address
                })), _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('address-selector next', {
                        hide: !showNext
                    }),
                    onClick: this.handleClickNextAddress
                })), _react2.default.createElement('p', {
                    id: 'receive-action-button-text-info',
                    className: 'dim'
                }, status), _react2.default.createElement('p', {
                    id: 'exodus-wallet-receive-address',
                    className: `exodus-border-color-${coin.name}`
                }, _react2.default.createElement('span', {
                    className: `exodus-color-${coin.name}`
                }, address)), _react2.default.createElement('div', {
                    className: 'exodus-action-buttons'
                }, _react2.default.createElement(CircleButton, {
                    status: 'Copy This Address',
                    asset: coin.name,
                    altHTMLTag: 'Copy This Address',
                    icon: 'copy',
                    onClick: this.handleClickCopy,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                }), _react2.default.createElement(CircleButton, {
                    status: 'Print This Address',
                    asset: coin.name,
                    altHTMLTag: 'Print This Address',
                    icon: 'print',
                    onClick: this.handleClickPrint,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                }), _react2.default.createElement('a', {
                    href: `mailto:?subject=Exodus ${coin.properName} Address&body=My Exodus ${coin.properName} address is: ${address}`
                }, _react2.default.createElement(CircleButton, {
                    status: 'Email This Address',
                    asset: coin.name,
                    altHTMLTag: 'Email This Address',
                    icon: 'unread',
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                })), _react2.default.createElement(CircleButton, {
                    status: 'View On Blockchain',
                    asset: coin.name,
                    altHTMLTag: 'View On Blockcahin',
                    icon: 'chain',
                    onClick: this.handleClickBlockExplorer,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                }), coin.name === 'NO-COIN' ? _react2.default.createElement(CircleButton, {
                    status: 'Recheck Address For Payments',
                    asset: coin.name,
                    icon: 'refresh',
                    onClick: this.handleClickRefresh,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                }) : null), _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('balance-warning', {
                        'hidden': !showBalanceWarning
                    })
                }, _react2.default.createElement('div', {
                    className: 'message'
                }, 'Ripple requires 20 XRP to activate account. ', _react2.default.createElement('span', {
                    className: `exodus-color-${coin.name}`,
                    onClick: handlerRippleLowBalance
                }, 'Learn more\u2026'))), _react2.default.createElement('div', {
                    className: 'accent bottom'
                })))), _react2.default.createElement('div', {
                    className: 'EXCOMP--fade-to-dark'
                }));
            }
        }, _class2.propTypes = {
            account: _propTypes2.default.object.isRequired,
            getReceiveAddresses: _propTypes2.default.func.isRequired,
            coin: _propTypes2.default.object.isRequired,
            onRequestClose: _propTypes2.default.func.isRequired,
            txLog: _propTypes2.default.object.isRequired,
            rippleLowBalance: _propTypes2.default.bool
        }, _temp)) || _class);
        exports.default = ReceiveModal;
        const CircleButton = (_ref) => {
            let {
                icon,
                asset,
                onClick,
                onMouseLeave,
                onMouseEnter,
                status,
                altHTMLTag
            } = _ref;
            return _react2.default.createElement('div', {
                onClick: onClick,
                onMouseEnter: () => onMouseEnter(status),
                onMouseLeave: onMouseLeave,
                className: `exodus-circle-button exodus-fade-in-out exodus-border-color-${asset}`,
                alt: altHTMLTag
            }, _react2.default.createElement('img', {
                src: `svg/icon-${icon}.svg`
            }));
        };

    }, {
        "286": 286,
        "328": 328,
        "93": 93,
        "99": 99,
        "undefined": undefined
    }],
    377: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactQrReader = require(285);
        var _reactQrReader2 = _interopRequireDefault(_reactQrReader);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _ui = require(333);
        var _bip = require(199);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const QROverlay = (_ref) => {
            let {
                onRead,
                onClickClose
            } = _ref;
            const onUnsupported = () => {
                onClickClose();
                _swal2.default.error({
                    text: 'You must have a webcam on your computer to scan QR codes.'
                });
            };
            return _react2.default.createElement('div', {
                id: 'qr-camera-overlay-position'
            }, _react2.default.createElement('div', {
                id: 'exodus-wallet-qr-code-close-button',
                className: 'close-button exodus-fade-in-out',
                onClick: onClickClose
            }), _react2.default.createElement(_reactQrReader2.default, {
                onRead: onRead,
                onUnsupported: onUnsupported
            }));
        };
        let AddressInputGroup = (_temp = _class = class AddressInputGroup extends _react2.default.Component {
            constructor(props) {
                super();
                this.state = {
                    address: props.address || '',
                    qrReaderVisible: false,
                    placeholder: `Send to ${props.coin.properName} address…`
                };
            }
            componentWillReceiveProps(nextProps) {
                this.setState({
                    address: nextProps.address
                });
            }
            handleChangeAddress(_ref2) {
                let {
                    address
                } = _ref2;
                this.setState({
                    address
                });
                this.props.onChange && this.props.onChange({
                    address
                });
            }
            handleClickQRCamera() {
                this.setState({
                    qrReaderVisible: true
                });
            }
            handleClickQRClose() {
                this.setState({
                    qrReaderVisible: false
                });
            }
            handleMouseEnterQRCamera() {
                this.setState({
                    placeholder: 'Scan QR code…'
                });
            }
            handleMouseLeaveQRCamera() {
                this.setState({
                    placeholder: `Send to ${this.props.coin.properName} address…`
                });
            }
            handleQRRead(qrValue) {
                let data = (0, _bip.decode)(qrValue);
                if (data.coin === 'iban' && data.address) {
                    const ICAP = require('ethereumjs-icap');
                    data.address = ICAP.decode(data.address);
                }
                let newState = {
                    qrReaderVisible: false,
                    address: data.address
                };
                if (data.amount) {
                    newState.rawAmount = data.amount;
                    newState.parsedAmount = data.amount;
                }
                this.setState(newState);
                const {
                    coin
                } = this.props;
                const isETHLike = ['ethereum', 'ethereumclassic'].includes(coin.name) || coin.isEthereumToken;
                if (isETHLike && coin.address.validate(data.address) && (/^0x[0-9A-F]{40}$/.test(data.address) || /^0x[0-9a-f]{40}$/.test(data.address))) {
                    _swal2.default.warn({
                        text: 'This address is not formatted properly. Please double-check each character in the address. If you send to a wrong address, <strong>the funds cannot be recovered!</strong><br/><br/>Click "Learn More" to understand the risks.',
                        html: true,
                        showCancelButton: true,
                        cancelButtonText: 'Learn More',
                        closeOnConfirm: true,
                        closeOnCancel: true
                    }, function(isConfirm) {
                        if (isConfirm) return;
                        _electron.shell.openExternal('http://support.exodus.io/article/182-address-not-formatted-properly');
                    });
                }
                this.props.onChange && this.props.onChange({
                    address: data.address
                });
            }
            render() {
                const {
                    coin,
                    valid
                } = this.props;
                const {
                    address,
                    qrReaderVisible
                } = this.state;
                return _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('EXCOMP--input-address', {
                        'has-invalid': !valid
                    })
                }, qrReaderVisible ? _react2.default.createElement(QROverlay, {
                    onRead: this.handleQRRead.bind(this),
                    onClickClose: this.handleClickQRClose.bind(this)
                }) : null, _react2.default.createElement('div', {
                    className: 'input-addon qr-button',
                    onMouseEnter: this.handleMouseEnterQRCamera.bind(this),
                    onMouseLeave: this.handleMouseLeaveQRCamera.bind(this),
                    onClick: this.handleClickQRCamera.bind(this)
                }), _react2.default.createElement(_ui.AddressInput, {
                    id: 'send-to-input-address',
                    placeholder: this.state.placeholder,
                    className: `asset-input-${coin.name}`,
                    coin: coin.name,
                    onChange: this.handleChangeAddress.bind(this),
                    value: address,
                    valid: valid,
                    tabIndex: '1'
                }));
            }
        }, _class.propTypes = {
            coin: _propTypes2.default.object.isRequired,
            onChange: _propTypes2.default.func.isRequired
        }, _temp);
        exports.default = AddressInputGroup;

    }, {
        "199": 199,
        "285": 285,
        "306": 306,
        "333": 333,
        "undefined": undefined
    }],
    378: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _ui = require(333);
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactUtils = require(287);
        var _conversions = require(119);
        var _conversions2 = _interopRequireDefault(_conversions);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _coinAvailableAmounts = require(101);
        var _coinAvailableAmounts2 = _interopRequireDefault(_coinAvailableAmounts);
        var _reactRedux = require('react-redux');
        var _currencyFormatters = require(211);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let CurrencyInputSwap = (_dec = (0, _reactRedux.connect)(state => ({
            coinTotalAmounts: (0, _coinTotalAmounts2.default)(state),
            coinAvailableAmounts: (0, _coinAvailableAmounts2.default)(state),
            fiatConversions: (0, _conversions2.default)(state),
            fiatCurrency: (0, _fiat2.default)(state),
            getFiatVal: (0, _getValue2.default)(state)
        })), _dec(_class = (_temp = _class2 = class CurrencyInputSwap extends _react2.default.Component {
            constructor(props) {
                super();
                this.state = {
                    amountCrypto: {
                        rawAmount: '0.00'
                    },
                    amountFiat: {
                        rawAmount: '0.00'
                    },
                    isCryptoFocused: props.focus,
                    isFiatFocused: false
                };
            }
            componentWillReceiveProps(nextProps) {
                if (!this.state.isFiatFocused && !this.state.isCryptoFocused && nextProps.value) {
                    let val = nextProps.value;
                    let amounts = {
                        rawAmount: formatStrVal(val),
                        parsedAmount: val.toString({
                            unit: false
                        })
                    };
                    this.setState({
                        amountCrypto: amounts
                    });
                    let {
                        coin,
                        getFiatVal
                    } = this.props;
                    let parsedAmount = amounts.parsedAmount || '0';
                    let amount = coin.currency[coin.displayUnit](parsedAmount);
                    let fiatAmount = getFiatVal(amount);
                    let fiatAmountStr = fiatAmount.toString({
                        unit: false
                    });
                    this.setState({
                        amountFiat: {
                            rawAmount: formatStrVal(fiatAmount),
                            parsedAmount: fiatAmountStr
                        }
                    });
                }
                if (nextProps.coin.name !== this.props.coin.name) {
                    let newDisplayUnit = nextProps.coin.displayUnit;
                    let parsedAmount = this.state.amountCrypto.parsedAmount || '0';
                    let newAmount = nextProps.coin.currency[newDisplayUnit](parsedAmount).toBase().round().to(newDisplayUnit);
                    let fiatAmount = nextProps.getFiatVal(newAmount);
                    let fiatAmountStr = fiatAmount.toString({
                        unit: false
                    });
                    this.setState({
                        amountFiat: {
                            rawAmount: formatStrVal(fiatAmount),
                            parsedAmount: fiatAmountStr
                        }
                    });
                    this.props.onChange(newAmount);
                }
            }
            handleBlurCrypto() {
                let {
                    coin
                } = this.props;
                let parsedAmount = this.state.amountCrypto.parsedAmount || '0';
                let amount = coin.currency[coin.displayUnit](parsedAmount).toBase().round().to(coin.displayUnit);
                this.setState({
                    amountCrypto: Object.assign({}, this.state.amountCrypto, {
                        rawAmount: formatStrVal(amount)
                    }),
                    isCryptoFocused: false
                });
            }
            handleBlurFiat() {
                let {
                    fiatCurrency
                } = this.props;
                let parsedAmount = this.state.amountFiat.parsedAmount || '0';
                let amount = fiatCurrency.defaultUnit(parsedAmount).toBase().round().toDefault();
                this.setState({
                    amountFiat: Object.assign({}, this.state.amountFiat, {
                        rawAmount: formatStrVal(amount)
                    }),
                    isFiatFocused: false
                });
            }
            handleChangeCrypto(_ref) {
                let {
                    rawAmount,
                    parsedAmount,
                    valid
                } = _ref;
                const {
                    coin,
                    getFiatVal
                } = this.props;
                this.setState({
                    amountCrypto: {
                        rawAmount,
                        parsedAmount
                    }
                });
                parsedAmount = parsedAmount || '0';
                const crypto = coin.currency[coin.displayUnit](parsedAmount).toBase().round().to(coin.displayUnit);
                let fiat = getFiatVal(crypto);
                let fiatAmountStr = fiat.toString({
                    unit: false
                });
                this.setState({
                    amountFiat: {
                        rawAmount: formatStrVal(fiat),
                        parsedAmount: fiatAmountStr
                    }
                });
                if (crypto.isNegative) valid = false;
                this.props.onChange && this.props.onChange({
                    rawAmount,
                    crypto,
                    fiat,
                    valid
                });
            }
            handleChangeFiat(_ref2) {
                let {
                    rawAmount,
                    parsedAmount,
                    valid
                } = _ref2;
                const {
                    coin,
                    fiatConversions,
                    fiatCurrency
                } = this.props;
                this.setState({
                    amountFiat: {
                        rawAmount,
                        parsedAmount
                    }
                });
                parsedAmount = parsedAmount || '0';
                const fiat = fiatCurrency.defaultUnit(parsedAmount).toBase().round().toDefault();
                let crypto = fiatConversions[coin.name](fiat).toBase().round().to(coin.displayUnit);
                let cryptoAmountStr = crypto.toString({
                    unit: false
                });
                this.setState({
                    amountCrypto: {
                        rawAmount: formatStrVal(crypto),
                        parsedAmount: cryptoAmountStr
                    }
                });
                if (fiat.isNegative) valid = false;
                this.props.onChange && this.props.onChange({
                    rawAmount,
                    crypto,
                    fiat,
                    valid
                });
            }
            handleFocusCrypto() {
                this.setState({
                    isCryptoFocused: true
                });
                this.props.onFocus && this.props.onFocus();
            }
            handleFocusFiat() {
                this.setState({
                    isFiatFocused: true
                });
                this.props.onFocus && this.props.onFocus();
            }
            handleClickPrefill() {
                const {
                    coinTotalAmounts,
                    coinAvailableAmounts,
                    coin
                } = this.props;
                if (coinAvailableAmounts[coin.name].isZero()) return;
                let totalAmount = coinAvailableAmounts[coin.name];
                if (coin.name === 'ethereum' || coin.name === 'ethereumclassic') {
                    const gasLimit = this.props.feeExtraOpts.gasLimit || coin.gasTx;
                    const fee = coin.getFee(gasLimit);
                    totalAmount = coinTotalAmounts[coin.name].subtract(fee).clampLowerZero();
                }
                const amount = totalAmount.to(coin.displayUnit).toString({
                    unit: false
                });
                window.requestIdleCallback(() => {
                    this.handleChangeCrypto({
                        rawAmount: amount,
                        parsedAmount: amount,
                        valid: true
                    });
                }, {
                    timeout: 250
                });
            }
            handleMouseEnterPrefill() {
                this.setState({
                    placeholder: 'Prefill All Funds…'
                });
            }
            handleMouseLeavePrefill() {
                this.setState({
                    placeholder: 'Amount To Send'
                });
            }
            render() {
                let {
                    coin,
                    fiatCurrency
                } = this.props;
                let {
                    amountFiat,
                    amountCrypto
                } = this.state;
                return _react2.default.createElement('div', {
                    className: 'EXCOMP--input-asset'
                }, _react2.default.createElement('div', {
                    className: 'input-addon max-button',
                    onMouseEnter: this.handleMouseEnterPrefill.bind(this),
                    onMouseLeave: this.handleMouseLeavePrefill.bind(this),
                    onClick: this.handleClickPrefill.bind(this)
                }, 'All'), _react2.default.createElement('div', {
                    className: 'input-stacked-group'
                }, _react2.default.createElement('div', {
                    className: 'asset input-group exodus-color-' + coin.name
                }, _react2.default.createElement(_ui.CurrencyInput, {
                    className: 'asset-input',
                    value: amountCrypto.rawAmount,
                    onBlur: this.handleBlurCrypto.bind(this),
                    onChange: this.handleChangeCrypto.bind(this),
                    onFocus: this.handleFocusCrypto.bind(this)
                }), _react2.default.createElement('div', {
                    className: 'input-unit asset-unit'
                }, coin.displayUnit)), _react2.default.createElement('div', {
                    className: 'baseline exodus-bg-color-' + coin.name
                }), _react2.default.createElement('div', {
                    className: 'fiat input-group'
                }, _react2.default.createElement(_ui.CurrencyInput, {
                    className: 'fiat-input',
                    value: amountFiat.rawAmount,
                    onBlur: this.handleBlurFiat.bind(this),
                    onChange: this.handleChangeFiat.bind(this),
                    onFocus: this.handleFocusFiat.bind(this)
                }), _react2.default.createElement('div', {
                    className: 'input-unit fiat-unit'
                }, fiatCurrency.defaultUnit.unitName))));
            }
        }, _class2.propTypes = {
            coin: _propTypes2.default.object.isRequired,
            coinTotalAmounts: _propTypes2.default.object,
            coinAvailableAmounts: _propTypes2.default.object,
            fiatConversions: _propTypes2.default.object.isRequired,
            fiatCurrency: _propTypes2.default.object.isRequired,
            getFiatVal: _propTypes2.default.func,
            focus: _propTypes2.default.bool,
            onChange: _propTypes2.default.func,
            onFocus: _propTypes2.default.func,
            value: _reactUtils.isNumberUnitOrUndefined
        }, _class2.defaultProps = {
            onChange: () => {}
        }, _temp)) || _class);
        exports.default = CurrencyInputSwap;

        function formatStrVal(val) {
            return (0, _currencyFormatters.formatStr)(val, {
                format: '%v'
            });
        }

    }, {
        "101": 101,
        "102": 102,
        "104": 104,
        "119": 119,
        "121": 121,
        "211": 211,
        "287": 287,
        "333": 333,
        "undefined": undefined
    }],
    379: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _fieldDesc = require(383);
        var _fieldDesc2 = _interopRequireDefault(_fieldDesc);
        var _fieldData = require(382);
        var _fieldData2 = _interopRequireDefault(_fieldData);
        var _fieldGasPrice = require(385);
        var _fieldGasPrice2 = _interopRequireDefault(_fieldGasPrice);
        var _fieldGasLimit = require(384);
        var _fieldGasLimit2 = _interopRequireDefault(_fieldGasLimit);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerEthLike = (_temp = _class = class DrawerEthLike extends _react2.default.Component {
            constructor() {
                super();
                this.state = {
                    gasLimit: '',
                    gasPrice: '',
                    data: '',
                    desc: ''
                };
                this.handleChangeGasLimit = this.handleChangeGasLimit.bind(this);
                this.handleChangeGasPrice = this.handleChangeGasPrice.bind(this);
                this.handleChangeData = this.handleChangeData.bind(this);
                this.handleChangeDesc = this.handleChangeDesc.bind(this);
            }
            handleChangeGasLimit(_ref) {
                let {
                    value
                } = _ref;
                this.setState({
                    gasLimit: value
                });
            }
            handleChangeGasPrice(_ref2) {
                let {
                    value
                } = _ref2;
                this.setState({
                    gasPrice: value
                });
            }
            handleChangeData(_ref3) {
                let {
                    value
                } = _ref3;
                this.setState({
                    data: value
                });
            }
            handleChangeDesc(_ref4) {
                let {
                    value
                } = _ref4;
                this.setState({
                    desc: value
                });
            }
            render() {
                return _react2.default.createElement('div', {
                    className: 'advanced-drawer'
                }, _react2.default.createElement('div', {
                    className: 'advanced-controls'
                }, _react2.default.createElement(_fieldGasLimit2.default, null), _react2.default.createElement(_fieldGasPrice2.default, null), _react2.default.createElement(_fieldData2.default, null), _react2.default.createElement(_fieldDesc2.default, null)));
            }
        }, _class.propTypes = {
            handleChange: _propTypes2.default.bool
        }, _temp);
        exports.default = DrawerEthLike;

    }, {
        "382": 382,
        "383": 383,
        "384": 384,
        "385": 385,
        "undefined": undefined
    }],
    380: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _ethLike = require(379);
        var _ethLike2 = _interopRequireDefault(_ethLike);
        var _ripple = require(381);
        var _ripple2 = _interopRequireDefault(_ripple);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (_ref) => {
            let {
                asset,
                onChange
            } = _ref;
            const assetStr = typeof asset === 'string' ? asset : asset.name;
            switch (assetStr) {
                case 'ethereum':
                case 'ethereumclassic':
                    return _react2.default.createElement(_ethLike2.default, {
                        onChange: onChange
                    });
                case 'ripple':
                    return _react2.default.createElement(_ripple2.default, {
                        onChange: onChange
                    });
                default:
                    return _react2.default.createElement('div', null);
            }
        };

    }, {
        "379": 379,
        "381": 381,
        "undefined": undefined
    }],
    381: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _field = require(386);
        var _field2 = _interopRequireDefault(_field);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerRipple = (_temp = _class = class DrawerRipple extends _react2.default.PureComponent {
            constructor() {
                super();
                this.state = {
                    destTag: ''
                };
                this.handleChangeDestTag = this.handleChangeDestTag.bind(this);
            }
            handleChangeDestTag(event) {
                this.setState({
                    destTag: event.target.value
                }, () => {
                    this.props.onChange && this.props.onChange(this.state);
                });
            }
            render() {
                const {
                    destTag
                } = this.state;
                return _react2.default.createElement('div', {
                    className: 'advanced-drawer'
                }, _react2.default.createElement('div', {
                    className: 'advanced-controls'
                }, _react2.default.createElement(_field2.default, {
                    label: 'Destination Tag',
                    description: 'Indicate the beneficiary or destination for a payment.'
                }, _react2.default.createElement('input', {
                    type: 'text',
                    className: 'form-control',
                    placeholder: '',
                    value: destTag,
                    onChange: this.handleChangeDestTag
                }))));
            }
        }, _class.propTypes = {
            onChange: _propTypes2.default.func.isRequired
        }, _temp);
        exports.default = DrawerRipple;

    }, {
        "386": 386,
        "undefined": undefined
    }],
    382: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _field = require(386);
        var _field2 = _interopRequireDefault(_field);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerFieldData = (_temp = _class = class DrawerFieldData extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.state = {
                    value: ''
                };
                this.handleChange = this.handleChange.bind(this);
            }
            handleChange(event) {
                this.setState({
                    value: event.target.value
                });
                this.props.handleChange && this.props.handleChange({
                    value: event.target.value
                });
            }
            render() {
                const {
                    value
                } = this.state;
                return _react2.default.createElement(_field2.default, {
                    label: 'Data',
                    description: 'Custom data can be used when you send transactions to contracts.'
                }, _react2.default.createElement('textarea', {
                    placeholder: 'Paste your custom data here for your transaction\u2026',
                    className: 'form-control',
                    rows: '4',
                    value: value,
                    onChange: this.handleChange
                }));
            }
        }, _class.propTypes = {
            onChange: _propTypes2.default.func
        }, _temp);
        exports.default = DrawerFieldData;

    }, {
        "386": 386,
        "undefined": undefined
    }],
    383: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _field = require(386);
        var _field2 = _interopRequireDefault(_field);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerFieldDesc = (_temp = _class = class DrawerFieldDesc extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.state = {
                    value: ''
                };
                this.handleChange = this.handleChange.bind(this);
            }
            handleChange(event) {
                this.setState({
                    value: event.target.value
                });
                this.props.handleChange && this.props.handleChange({
                    value: event.target.value
                });
            }
            render() {
                const {
                    value
                } = this.state;
                return _react2.default.createElement(_field2.default, {
                    label: 'Description',
                    description: 'A memo area to input a descripton of your transaction so you can remember it later.'
                }, _react2.default.createElement('textarea', {
                    placeholder: 'This description will be attached to your transaction\u2026',
                    className: 'form-control',
                    rows: '2',
                    value: value,
                    onChange: this.handleChange
                }));
            }
        }, _class.propTypes = {
            onChange: _propTypes2.default.func
        }, _temp);
        exports.default = DrawerFieldDesc;

    }, {
        "386": 386,
        "undefined": undefined
    }],
    384: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _field = require(386);
        var _field2 = _interopRequireDefault(_field);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerFieldDesc = (_temp = _class = class DrawerFieldDesc extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.state = {
                    value: ''
                };
                this.handleChange = this.handleChange.bind(this);
            }
            handleChange(event) {
                this.setState({
                    value: event.target.value
                });
                this.props.handleChange && this.props.handleChange({
                    value: event.target.value
                });
            }
            render() {
                const {
                    value
                } = this.state;
                return _react2.default.createElement(_field2.default, {
                    label: 'Gas Limit',
                    description: 'Default gas limit is 21,000.'
                }, _react2.default.createElement('input', {
                    type: 'text',
                    className: 'form-control',
                    id: 'tx-gas-limit',
                    'aria-describedby': 'tx-gas-limit',
                    placeholder: 'Set custom gas limit for this transaction\u2026',
                    value: value,
                    onChange: this.handleChange
                }));
            }
        }, _class.propTypes = {
            onChange: _propTypes2.default.func
        }, _temp);
        exports.default = DrawerFieldDesc;

    }, {
        "386": 386,
        "undefined": undefined
    }],
    385: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _field = require(386);
        var _field2 = _interopRequireDefault(_field);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DrawerFieldDesc = (_temp = _class = class DrawerFieldDesc extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.state = {
                    value: ''
                };
                this.handleChange = this.handleChange.bind(this);
            }
            handleChange(event) {
                this.setState({
                    value: event.target.value
                });
                this.props.handleChange && this.props.handleChange({
                    value: event.target.value
                });
            }
            render() {
                const {
                    value
                } = this.state;
                return _react2.default.createElement(_field2.default, {
                    label: 'Gas Price',
                    description: 'Default gas price is 50 Gwei.'
                }, _react2.default.createElement('input', {
                    type: 'text',
                    className: 'form-control',
                    placeholder: 'Set custom amount per unit of gas\u2026',
                    value: value,
                    onChange: this.handleChange
                }));
            }
        }, _class.propTypes = {
            onChange: _propTypes2.default.func
        }, _temp);
        exports.default = DrawerFieldDesc;

    }, {
        "386": 386,
        "undefined": undefined
    }],
    386: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }
        exports.default = (_ref) => {
            let {
                label,
                description
            } = _ref, props = _objectWithoutProperties(_ref, ['label', 'description']);
            return _react2.default.createElement('div', {
                className: 'form-group'
            }, _react2.default.createElement('label', null, label), props.children, _react2.default.createElement('small', {
                id: 'tx-description'
            }, _react2.default.createElement('span', null, description)));
        };

    }, {
        "undefined": undefined
    }],
    387: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _getFee = require(124);
        var _getFee2 = _interopRequireDefault(_getFee);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _ui = require(333);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)(state => ({
            getFee: (0, _getFee2.default)(state),
            getFiatValue: (0, _getValue2.default)(state)
        }))((_ref) => {
            let {
                coin,
                getFee,
                getFiatValue,
                amount,
                ethereumContract,
                feeExtraOpts
            } = _ref;
            let displayUnit = coin.displayUnit;
            if (coin.isEthereumToken) displayUnit = _assets2.default.ethereum.displayUnit;
            if (coin.isOmniProperty) displayUnit = _assets2.default.bitcoin.displayUnit;
            let cryptoColor = coin.name;
            if (coin.isEthereumToken) cryptoColor = _assets2.default.ethereum.name;
            if (coin.isOmniProperty) cryptoColor = _assets2.default.bitcoin.name;
            const feeCrypto = getFee(coin.name, Object.assign({}, feeExtraOpts, {
                amount
            })).to(displayUnit);
            const feeFiat = getFiatValue(feeCrypto);
            let size = '';
            if (coin.name === 'bitcoin') {
                try {
                    size = (feeCrypto.toDefault().toNumber() / coin.feePerKB.toDefault().toNumber()).toFixed(3) + ' KB';
                } catch (err) {
                    size = '0 KB';
                }
            }
            if (coin.isEthereumToken || ['ethereum', 'ethereumclassic'].includes(coin.name) && ethereumContract) {
                const {
                    gasLimit
                } = feeExtraOpts;
                if (gasLimit) size = gasLimit + ' gas';
            }
            return _react2.default.createElement('tr', {
                className: 'tx-info fee'
            }, _react2.default.createElement('td', null, _react2.default.createElement('span', {
                className: 'title'
            }, `${coin.properName} Network Fee`, ' ', size ? `( ${size} )` : '')), _react2.default.createElement('td', null, _react2.default.createElement(_ui.NUCurrencyText, {
                className: `amount exodus-color-${cryptoColor}`,
                sigfigs: 8,
                amount: feeCrypto,
                code: true,
                onClick: () => {
                    _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/does-exodus-have-fees-to-send-or-receive');
                }
            })), _react2.default.createElement('td', null, _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'fiat exodus-color-flagmoney',
                amount: feeFiat,
                symbol: true,
                code: false
            })));
        });

    }, {
        "121": 121,
        "124": 124,
        "184": 184,
        "333": 333,
        "undefined": undefined
    }],
    388: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = () => _react2.default.createElement('div', {
            className: 'loader'
        }, _react2.default.createElement('div', {
            className: 'wrapper'
        }, _react2.default.createElement('div', {
            className: 'dot'
        }), _react2.default.createElement('div', {
            className: 'dot'
        }), _react2.default.createElement('div', {
            className: 'dot'
        })));

    }, {
        "undefined": undefined
    }],
    389: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _ui = require(333);
        var _remaining = require(137);
        var _remaining2 = _interopRequireDefault(_remaining);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _fee = require(387);
        var _fee2 = _interopRequireDefault(_fee);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)(state => ({
            getFiatValue: (0, _getValue2.default)(state),
            remaining: (0, _remaining2.default)(state)
        }))((_ref) => {
            let {
                coin,
                amount,
                ethereumContract,
                feeExtraOpts,
                getFiatValue,
                remaining,
                priceAvailable
            } = _ref;
            const crypto = remaining(coin.name, feeExtraOpts).sending(amount);
            const fiat = getFiatValue(crypto);
            return _react2.default.createElement('table', {
                className: 'tx-info-group'
            }, _react2.default.createElement('tbody', null, _react2.default.createElement(_fee2.default, {
                coin: coin,
                amount: amount,
                ethereumContract: ethereumContract,
                feeExtraOpts: feeExtraOpts
            }), _react2.default.createElement('tr', {
                className: 'tx-info balance'
            }, _react2.default.createElement('td', {
                className: 'title'
            }, 'Remaining Balance'), _react2.default.createElement('td', null, _react2.default.createElement(_ui.NUCurrencyText, {
                className: `amount exodus-color-${coin.name}`,
                sigfigs: 8,
                amount: crypto,
                code: coin.displayUnit,
                onClick: () => {
                    _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/why-is-my-available-balance-less-than-my-wallet-balance');
                }
            })), _react2.default.createElement('td', null, priceAvailable ? _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'fiat exodus-color-flagmoney',
                amount: fiat,
                symbol: true,
                code: false
            }) : '--.--'))));
        });

    }, {
        "121": 121,
        "137": 137,
        "333": 333,
        "387": 387,
        "undefined": undefined
    }],
    390: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _reactRedux = require('react-redux');
        var _lodash = require('lodash');
        var lodash = _interopRequireWildcard(_lodash);
        var _flux = require(257);
        var _coinLogo = require(328);
        var _coinLogo2 = _interopRequireDefault(_coinLogo);
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _util = require(213);
        var _bn = require('bn.js');
        var _bn2 = _interopRequireDefault(_bn);
        var _ethereumjsUtil = require('ethereumjs-util');
        var ethUtil = _interopRequireWildcard(_ethereumjsUtil);
        var _etcchain = require(221);
        var etcchain = _interopRequireWildcard(_etcchain);
        var _etherscan = require(223);
        var etherscan = _interopRequireWildcard(_etherscan);
        var _exodusEthereumServer = require(229);
        var _bitpay2bcash = require(202);
        var _bitpay2bcash2 = _interopRequireDefault(_bitpay2bcash);
        var _sending = require(392);
        var _sending2 = _interopRequireDefault(_sending);
        var _remainingBalance = require(389);
        var _remainingBalance2 = _interopRequireDefault(_remainingBalance);
        var _addressInputGroup = require(377);
        var _addressInputGroup2 = _interopRequireDefault(_addressInputGroup);
        var _status = require(393);
        var _status2 = _interopRequireDefault(_status);
        var _currencyInputSwap = require(378);
        var _currencyInputSwap2 = _interopRequireDefault(_currencyInputSwap);
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _remaining = require(137);
        var _remaining2 = _interopRequireDefault(_remaining);
        var _getReceiveAddress = require(92);
        var _getReceiveAddress2 = _interopRequireDefault(_getReceiveAddress);
        var _getRecvExchAddresses = require(94);
        var _getRecvExchAddresses2 = _interopRequireDefault(_getRecvExchAddresses);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _ethereumTokensEnoughFuel = require(108);
        var _hasTokens = require(126);
        var _hasTokens2 = _interopRequireDefault(_hasTokens);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _index = require(380);
        var _index2 = _interopRequireDefault(_index);
        var _sendingConfirm = require(391);
        var _sendingConfirm2 = _interopRequireDefault(_sendingConfirm);
        var _electron = require('electron');
        var _appConfig = require(80);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const DUST_VALUES = lodash.mapValues(_appConfig.DUST_VALUES, (value, name) => _assets2.default[name].currency.baseUnit(value));
        let SendModal = (_dec = (0, _reactRedux.connect)((state, props) => ({
            actions: _flux.actions,
            exchange: state.exchange,
            fiat: (0, _fiat2.default)(state),
            getRemaining: (0, _remaining2.default)(state),
            getReceiveAddresses: (0, _getReceiveAddress2.default)(state),
            recvExchAddrs: (0, _getRecvExchAddresses2.default)(state)(props.coin.name),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state),
            hasTokens: (0, _hasTokens2.default)(state),
            txSend: state.txSend
        })), _dec(_class = (_temp = _class2 = class SendModal extends _react2.default.Component {
            constructor(props) {
                super(props);
                this.state = {
                    address: '',
                    addressValid: true,
                    rawAmount: '',
                    parsedAmount: '',
                    amountUnit: props.coin.displayUnit,
                    amountValid: true,
                    amountRaw: '',
                    amountFiat: props.fiat.ZERO,
                    amountCrypto: props.coin.currency.ZERO,
                    isDust: false,
                    memo: '',
                    checkingGasLimit: false,
                    ethereumContract: false,
                    feeExtraOpts: {
                        gasLimit: null
                    },
                    confirmSending: false,
                    advanced: {}
                };
                this.handleChangeAmount = lodash.debounce(this.handleChangeAmount.bind(this), 250, {
                    trailing: true
                });
                this.handleClickSendConfirmCancel = this.handleClickSendConfirmCancel.bind(this);
                this.handleClickSendConfirmSend = this.handleClickSendConfirmSend.bind(this);
                this.handleChangeAdvanced = this.handleChangeAdvanced.bind(this);
            }
            canSend() {
                const {
                    coin,
                    getRemaining
                } = this.props;
                const {
                    address,
                    addressValid,
                    checkingGasLimit,
                    feeExtraOpts,
                    amountValid,
                    amountRaw,
                    amountCrypto,
                    isDust
                } = this.state;
                if (checkingGasLimit) return false;
                const addressOK = address && addressValid;
                if (!addressOK) return false;
                const remainingAmount = getRemaining(coin.name, feeExtraOpts).sending(amountCrypto);
                const amountOK = amountValid && !isDust && !amountCrypto.isZero() && remainingAmount.gte(coin.currency.ZERO) || amountCrypto.isZero() && amountRaw.trim().match(/^[0-9.,]+$/) && ['ethereum', 'ethereumclassic'].includes(coin.name);
                return amountOK;
            }
            componentDidMount() {
                this._isMounted = true;
            }
            componentWillUnmount() {
                this._isMounted = false;
            }
            handleChangeAddressAmount(_ref) {
                var _this = this;
                return _asyncToGenerator(function*() {
                    let {
                        address,
                        amountRaw,
                        amount,
                        valid
                    } = _ref;
                    const {
                        coin
                    } = _this.props;
                    if (!(['ethereum', 'ethereumclassic'].includes(coin.name) || coin.isEthereumToken)) return;
                    if (!(valid && amountRaw.trim().match(/^[0-9.,]+$/) && address)) {
                        return _this.setState({
                            checkingGasLimit: false,
                            ethereumContract: false,
                            feeExtraOpts: Object.assign({}, _this.state.feeExtraOpts, {
                                gasLimit: null
                            })
                        });
                    }
                    _this.setState({
                        checkingGasLimit: true
                    });
                    let ethereumContract = true;
                    let gasLimit = coin.gasTx;
                    try {
                        if (!coin.isEthereumToken) ethereumContract = yield coin.address.isContract(address);
                        if (ethereumContract) {
                            if (!coin.isEthereumToken) gasLimit = coin.gasContract;
                            let data = '0x';
                            if (coin.isEthereumToken) {
                                data = ethUtil.bufferToHex(coin.contract.transfer.build(address, amount));
                            }
                            const _estimateGas = coin.name === 'ethereum' || coin.isEthereumToken ? (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.eth.estimateGas, etherscan.estimateGas) : (0, _exodusEthereumServer.withFallback)(_exodusEthereumServer.etc.estimateGas, etcchain.estimateGas);
                            const estimatedGas = yield _estimateGas({
                                from: _this.props.getReceiveAddresses(coin.name).toString().toLowerCase(),
                                to: coin.isEthereumToken ? coin.contract.addresses.current : address,
                                value: ethUtil.bufferToHex((0, _util.currency2buffer)(coin.isEthereumToken ? _assets2.default.ethereum.currency.ZERO : amount)),
                                data
                            });
                            gasLimit = new _bn2.default(estimatedGas.slice(2), 16).imuln(6).idivn(5).toNumber();
                        }
                    } catch (err) {
                        console.log('estimateGas at send-modal error');
                        console.error(err);
                    }
                    if (_this._isMounted && address === _this.state.address && amount.equals(_this.state.amountCrypto)) {
                        _this.setState({
                            checkingGasLimit: false,
                            ethereumContract,
                            feeExtraOpts: Object.assign({}, _this.state.feeExtraOpts, {
                                gasLimit
                            })
                        });
                    }
                })();
            }
            handleChangeAddress(_ref2) {
                let {
                    address
                } = _ref2;
                const {
                    coin,
                    recvExchAddrs
                } = this.props;
                const validateAndUpdate = address => {
                    const valid = address ? coin.address.validate(address) && !recvExchAddrs.has(address) : true;
                    this.setState({
                        address,
                        addressValid: valid
                    });
                    this.handleChangeAddressAmount({
                        address,
                        amountRaw: this.state.amountRaw,
                        amount: this.state.amountCrypto,
                        valid: valid && this.state.amountValid
                    });
                };
                const correctAddress = coin.name === 'bcash' ? (0, _bitpay2bcash2.default)(address) : address;
                if (correctAddress !== address) {
                    _swal2.default.warn({
                        text: `${address} is in Copay address format. Address will be converted to standard format: ${correctAddress}`
                    }, () => validateAndUpdate(correctAddress));
                } else {
                    validateAndUpdate(address);
                }
            }
            handleChangeAmount(_ref3) {
                let {
                    rawAmount,
                    crypto,
                    fiat,
                    valid
                } = _ref3;
                const {
                    coin
                } = this.props;
                const isDust = DUST_VALUES[coin.name] && crypto.lte(DUST_VALUES[coin.name]);
                this.setState({
                    amountRaw: rawAmount,
                    amountCrypto: crypto,
                    amountFiat: fiat,
                    amountValid: valid,
                    isDust
                });
                this.handleChangeAddressAmount({
                    address: this.state.address,
                    amountRaw: rawAmount,
                    amount: crypto,
                    valid: valid && this.state.addressValid
                });
            }
            handleChangeMemo(_ref4) {
                let {
                    target
                } = _ref4;
                this.setState({
                    memo: target.value
                });
            }
            handleClickSend(event) {
                const {
                    coin,
                    getRemaining,
                    hasTokens
                } = this.props;
                const {
                    amountCrypto,
                    feeExtraOpts
                } = this.state;
                const canSend = this.canSend() && !this.props.exchange.isExchanging;
                if (!canSend) return;
                const remainingBalance = getRemaining(coin.name, feeExtraOpts).sending(amountCrypto);
                if (coin.name === 'ethereum' && hasTokens && remainingBalance.lt(_ethereumTokensEnoughFuel.threshold)) {
                    let that = this;
                    _swal2.default.warn({
                        title: 'Ethereum Token Warning',
                        text: 'You have tokens that require Ethereum. Sending this will not leave enough Ethereum to send or exchange your tokens. Are you sure you want to proceed?',
                        confirmButtonText: 'Continue',
                        cancelButtonText: 'Learn More',
                        showCancelButton: true
                    }, function(isConfirm) {
                        if (isConfirm) return that.setState({
                            confirmSending: true
                        });
                        _electron.shell.openExternal('http://support.exodus.io/article/67-how-do-i-send-or-exchange-an-ethereum-powered-asset');
                    });
                } else {
                    this.setState({
                        confirmSending: true
                    });
                }
            }
            handleClickSendConfirmCancel() {
                this.setState({
                    confirmSending: false
                });
            }
            handleClickSendConfirmSend() {
                const {
                    address,
                    amountCrypto,
                    memo,
                    feeExtraOpts,
                    advanced
                } = this.state;
                const {
                    coin
                } = this.props;
                this.setState({
                    confirmSending: false
                });
                const receiver = {
                    address,
                    amount: amountCrypto
                };
                const {
                    gasLimit
                } = feeExtraOpts;
                if (coin.name === 'ripple') {
                    if (advanced.destTag) receiver.destTag = advanced.destTag;
                }
                this.props.actions.txSend.send({
                    coin,
                    receiver,
                    memo,
                    gasLimit
                });
            }
            handleToggleDrawer() {
                var element = document.getElementById('ex-window--send');
                element.classList.toggle('open');
            }
            handleChangeAdvanced(fields) {
                this.setState({
                    advanced: fields
                });
            }
            render() {
                const {
                    coin,
                    exchange,
                    txSend,
                    marketPricesAvailable,
                    recvExchAddrs
                } = this.props;
                const {
                    amountCrypto,
                    amountFiat,
                    confirmSending,
                    isDust,
                    address,
                    addressValid
                } = this.state;
                const priceAvailable = marketPricesAvailable(coin.name);
                const ownAddress = recvExchAddrs.has(address);
                if (!exchange.isExchanging) {
                    if (txSend.hasInit && !txSend.isSending) {
                        if (!txSend.error) {
                            _swal2.default.success({
                                text: 'Transaction successfully sent.'
                            }, () => {
                                this.props.actions.txSend.ackSend();
                                this.props.onRequestClose();
                            });
                        } else {
                            console.error('Broadcast Transaction Error:');
                            console.error(txSend.error.message);
                            (0, _swal2.default)({
                                type: 'error',
                                title: `${coin.properName} Not Sent`,
                                text: `Your ${coin.properName} wallet lost connection with the network.<br/>Please refresh your ${coin.properName} wallet and try again.`,
                                html: true,
                                showCancelButton: true,
                                cancelButtonText: 'HOW DO I REFRESH?',
                                closeOnConfirm: true,
                                closeOnCancel: true
                            }, function(isConfirm) {
                                if (!isConfirm) _electron.shell.openExternal('http://support.exodus.io/article/75-how-do-i-refresh-my-wallet');
                                _flux.actions.txSend.ackSend();
                            });
                        }
                    }
                }
                const sendEnabled = this.canSend() && !exchange.isExchanging;
                const showAdvanced = _appConfig.ENV_DEV && ['ethereum', 'ethereumclassic'].includes(coin.name) || (_appConfig.ENV_DEV || _appConfig.ENV_BUILD_EDEN) && ['ripple'].includes(coin.name);
                const SendModalContent = _react2.default.createElement('div', {
                    className: 'modal'
                }, _react2.default.createElement('div', {
                    id: 'ex-window--send',
                    className: (0, _classnames2.default)('ex-window', {
                        'confirm': confirmSending,
                        'sending': txSend.hasInit && !exchange.isExchanging
                    })
                }, _react2.default.createElement('div', {
                    className: 'main'
                }, _react2.default.createElement(_coinLogo2.default, {
                    coin: this.props.coin.name,
                    text: ''
                }), _react2.default.createElement('div', {
                    className: 'close-button',
                    onClick: this.props.onRequestClose
                }), _react2.default.createElement('div', {
                    className: (0, _classnames2.default)('modal-button bottom-right advanced', {
                        'hidden': !showAdvanced
                    }),
                    onClick: this.handleToggleDrawer
                }, _react2.default.createElement('div', {
                    className: 'icon'
                }), _react2.default.createElement('div', {
                    className: 'title'
                }, 'Advanced')), _react2.default.createElement('div', {
                    className: 'clipping-path'
                }, _react2.default.createElement('div', {
                    className: 'accent top'
                }), _react2.default.createElement('form', {
                    className: 'send-form'
                }, _react2.default.createElement(_addressInputGroup2.default, {
                    coin: coin,
                    className: 'EXCOMP--asset-address',
                    onChange: this.handleChangeAddress.bind(this),
                    address: address,
                    valid: addressValid
                }), _react2.default.createElement(_currencyInputSwap2.default, {
                    coin: coin,
                    onChange: this.handleChangeAmount.bind(this),
                    feeExtraOpts: this.state.feeExtraOpts
                }), _react2.default.createElement(_status2.default, {
                    asset: coin,
                    amountCrypto: amountCrypto,
                    amountFiat: amountFiat,
                    isDust: isDust,
                    ownAddress: ownAddress,
                    feeExtraOpts: this.state.feeExtraOpts
                }), _react2.default.createElement('div', {
                    className: (0, _classnames2.default)(`EXCOMP--btn btn-primary btn-${coin.name}`, {
                        disabled: !sendEnabled
                    }),
                    onClick: this.handleClickSend.bind(this),
                    disabled: !sendEnabled
                }, 'Send'), _react2.default.createElement(_remainingBalance2.default, {
                    coin: coin,
                    amount: amountCrypto,
                    checkingGasLimit: this.state.checkingGasLimit,
                    ethereumContract: this.state.ethereumContract,
                    feeExtraOpts: this.state.feeExtraOpts,
                    priceAvailable: priceAvailable
                })), _react2.default.createElement('div', {
                    className: 'accent bottom'
                })), _react2.default.createElement('div', {
                    className: 'modal-button bottom-left clear-all hidden'
                }, _react2.default.createElement('div', {
                    className: 'icon'
                }), _react2.default.createElement('div', {
                    className: 'title'
                }, 'Clear All'))), _react2.default.createElement(_index2.default, {
                    asset: coin,
                    onChange: this.handleChangeAdvanced
                }), _react2.default.createElement(_sendingConfirm2.default, {
                    asset: coin,
                    onCancel: this.handleClickSendConfirmCancel,
                    onSend: this.handleClickSendConfirmSend,
                    amountFiat: amountFiat,
                    amountCrypto: amountCrypto,
                    address: this.state.address
                }), _react2.default.createElement(_sending2.default, {
                    coin: coin,
                    amountFiat: amountFiat,
                    amountCrypto: amountCrypto,
                    address: this.state.address,
                    priceAvailable: priceAvailable
                })), _react2.default.createElement('div', {
                    className: 'EXCOMP--fade-to-dark'
                }));
                return SendModalContent;
            }
        }, _class2.propTypes = {
            actions: _propTypes2.default.object.isRequired,
            coin: _propTypes2.default.object.isRequired,
            exchange: _propTypes2.default.object.isRequired,
            fiat: _propTypes2.default.object.isRequired,
            getRemaining: _propTypes2.default.func.isRequired,
            onRequestClose: _propTypes2.default.func.isRequired,
            getReceiveAddresses: _propTypes2.default.func.isRequired,
            recvExchAddrs: _propTypes2.default.object.isRequired,
            txSend: _propTypes2.default.object.isRequired
        }, _temp)) || _class);
        exports.default = SendModal;

    }, {
        "104": 104,
        "108": 108,
        "126": 126,
        "128": 128,
        "137": 137,
        "184": 184,
        "202": 202,
        "213": 213,
        "221": 221,
        "223": 223,
        "229": 229,
        "257": 257,
        "306": 306,
        "328": 328,
        "377": 377,
        "378": 378,
        "380": 380,
        "389": 389,
        "391": 391,
        "392": 392,
        "393": 393,
        "80": 80,
        "92": 92,
        "94": 94,
        "undefined": undefined
    }],
    391: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _ui = require(333);
        var _reactRedux = require('react-redux');
        var _fiat = require(104);
        var _fiat2 = _interopRequireDefault(_fiat);
        var _electron = require('electron');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let SendingConfirm = (_dec = (0, _reactRedux.connect)((state, props) => ({
            fiat: (0, _fiat2.default)(state)
        })), _dec(_class = (_temp = _class2 = class SendingConfirm extends _react2.default.Component {
            render() {
                const {
                    asset,
                    onCancel,
                    onSend,
                    amountCrypto,
                    amountFiat,
                    address
                } = this.props;
                const crypto = amountCrypto || asset.currency.ZERO;
                const fiat = amountFiat || this.props.fiat.ZERO;
                return _react2.default.createElement('div', {
                    className: 'confirm-tx'
                }, _react2.default.createElement('div', {
                    className: 'confirm-tx--intro'
                }, 'Are you sure you want to'), _react2.default.createElement('div', {
                    className: 'confirm-tx--title'
                }, _react2.default.createElement('span', {
                    className: 'copy'
                }, 'Send '), _react2.default.createElement('span', {
                    className: 'asset exodus-color-fiat'
                }, _react2.default.createElement(_ui.NUCurrencyText, {
                    amount: fiat
                })), _react2.default.createElement('span', {
                    className: 'copy'
                }, '?')), _react2.default.createElement('div', {
                    className: 'confirm-tx--body'
                }, _react2.default.createElement('table', null, _react2.default.createElement('tbody', null, _react2.default.createElement('tr', null, _react2.default.createElement('td', {
                    className: 'title'
                }, 'Sending:'), _react2.default.createElement('td', {
                    className: 'item'
                }, _react2.default.createElement(_ui.NUCurrencyText, {
                    className: 'asset exodus-color-' + asset.name,
                    amount: crypto
                }))), _react2.default.createElement('tr', null, _react2.default.createElement('td', {
                    className: 'title'
                }, 'Value:'), _react2.default.createElement('td', {
                    className: 'item exodus-color-fiat'
                }, _react2.default.createElement(_ui.NUCurrencyText, {
                    amount: fiat
                }))), _react2.default.createElement('tr', null, _react2.default.createElement('td', {
                    className: 'title'
                }, 'Address:'), _react2.default.createElement('td', {
                    className: 'item address-link exodus-color-' + asset.name,
                    onClick: () => _electron.shell.openExternal(asset.blockExplorer.addressUrl(address))
                }, address)))), _react2.default.createElement('div', {
                    className: 'confirm-tx--buttons'
                }, _react2.default.createElement('div', {
                    className: 'EXCOMP--btn btn-secondary btn-' + asset.name,
                    onClick: onCancel
                }, 'Back'), _react2.default.createElement('div', {
                    className: 'EXCOMP--btn btn-primary btn-' + asset.name,
                    onClick: onSend
                }, 'Send'))));
            }
        }, _class2.propTypes = {
            asset: _propTypes2.default.object.isRequired,
            onCancel: _propTypes2.default.func.isRequired,
            onSend: _propTypes2.default.func.isRequired,
            amountCrypto: _propTypes2.default.object,
            amountFiat: _propTypes2.default.object,
            address: _propTypes2.default.string
        }, _temp)) || _class);
        exports.default = SendingConfirm;

    }, {
        "104": 104,
        "333": 333,
        "undefined": undefined
    }],
    392: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _progressLoader = require(388);
        var _progressLoader2 = _interopRequireDefault(_progressLoader);
        var _ui = require(333);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (_ref) => {
            let {
                coin,
                amountCrypto,
                amountFiat,
                address,
                priceAvailable
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'send-tx'
            }, _react2.default.createElement(_progressLoader2.default, null), _react2.default.createElement('div', {
                className: 'in-progress-status-text'
            }, 'Sending ', _react2.default.createElement('span', {
                className: 'asset'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'exodus-color-' + coin.name,
                amount: amountCrypto
            })), ' to', _react2.default.createElement('br', null), _react2.default.createElement('span', {
                className: 'address exodus-color-' + coin.name
            }, address)));
        };

    }, {
        "333": 333,
        "388": 388,
        "undefined": undefined
    }],
    393: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _ui = require(333);
        var _reactRedux = require('react-redux');
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _remaining = require(137);
        var _remaining2 = _interopRequireDefault(_remaining);
        var _getFee = require(124);
        var _getFee2 = _interopRequireDefault(_getFee);
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)((state, props) => ({
            getFee: (0, _getFee2.default)(state),
            priceAvailable: (0, _pricesAvailable2.default)(state)(props.asset.name),
            remaining: (0, _remaining2.default)(state),
            totalAmount: (0, _coinTotalAmounts2.default)(state)
        }))((_ref) => {
            let {
                asset,
                amountCrypto,
                amountFiat,
                priceAvailable,
                getFee,
                remaining,
                totalAmount,
                isDust,
                ownAddress,
                feeExtraOpts
            } = _ref;
            if (amountCrypto.isZero()) return _react2.default.createElement('div', {
                className: 'send-confirm-text'
            }, '\xA0');
            if (amountCrypto.isNegative) return _react2.default.createElement('div', {
                className: 'send-confirm-text'
            }, 'Cannot send a negative amount.');
            const crypto = remaining(asset.name, feeExtraOpts).sending(amountCrypto);
            let message = '';
            if (!message && crypto.lt(asset.currency.ZERO)) {
                message = 'Not enough funds.';
            }
            if (!message && asset.isEthereumToken && asset.fee.gt(totalAmount.ethereum)) {
                message = 'Not enough funds for fee (Ethereum).';
            }
            if (!message && asset.isOmniProperty && asset.feePerKB.gt(totalAmount.bitcoin)) {
                message = 'Not enough funds for fee (Bitcoin).';
            }
            if (!message && isDust) {
                message = 'Amount less than dust.';
            }
            if (!message && ownAddress) {
                message = `You cannot send funds to your own ${asset.properName} address.`;
            }
            if (asset.name === 'bitcoin' && !amountCrypto.isZero()) {
                const fee = getFee('bitcoin', {
                    amount: amountCrypto
                });
                if (fee.gt(totalAmount.bitcoin)) {
                    message = 'Fee is more than balance.';
                }
            }
            if (message) return _react2.default.createElement('div', {
                className: 'send-confirm-text'
            }, message);
            return _react2.default.createElement('div', {
                className: 'send-confirm-text'
            }, 'You are sending\xA0', _react2.default.createElement('span', {
                className: 'strong'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                className: `exodus-color-${asset.name}`,
                amount: amountCrypto
            })), '\xA0(', priceAvailable ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: amountFiat,
                symbol: true,
                code: false
            }) : '--.--', ')');
        });

    }, {
        "102": 102,
        "124": 124,
        "128": 128,
        "137": 137,
        "333": 333,
        "undefined": undefined
    }],
    394: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let DetailsItem = class DetailsItem extends _react2.default.Component {
            render() {
                return _react2.default.createElement('div', {
                    className: 'tx-details__item' + ' ' + this.props.layout + ' ' + this.props.name,
                    onClick: this.props.onClick
                }, _react2.default.createElement('div', {
                    className: 'title'
                }, this.props.title), _react2.default.createElement('div', {
                    className: 'content' + (this.props.selectable ? ' selectable' : '')
                }, this.props.content || this.props.children));
            }
        };
        exports.default = DetailsItem;
        DetailsItem.propTypes = {
            title: _propTypes2.default.string.isRequired,
            content: _propTypes2.default.string,
            layout: _propTypes2.default.string,
            name: _propTypes2.default.string,
            onClick: _propTypes2.default.func
        };
        DetailsItem.defaultProps = {
            layout: 'col-6'
        };

    }, {
        "undefined": undefined
    }],
    395: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _util = require(403);
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)((state, props) => ({
            onClick: createOnClick(props.tx)
        }))(TxDetailsOrderId);

        function TxDetailsOrderId(_ref) {
            let {
                onClick,
                tx
            } = _ref;
            if (tx.meta.shapeshiftOrderId) {
                return _react2.default.createElement(_detailsItem2.default, {
                    title: 'ShapeShift Order',
                    layout: 'col-4',
                    name: 'tx-details__duration'
                }, _react2.default.createElement('div', {
                    className: 'content link',
                    onClick: onClick
                }, tx.meta.shapeshiftOrderId));
            }
            if (tx.meta.evercoinOrderId) {
                return _react2.default.createElement(_detailsItem2.default, {
                    title: 'Evercoin Order',
                    layout: 'col-4',
                    name: 'tx-details__duration'
                }, _react2.default.createElement('div', {
                    className: 'content link',
                    onClick: onClick
                }, tx.meta.evercoinOrderId));
            }
            console.dir(tx);
            return null;
        }

        function createOnClick(tx) {
            if (!tx.meta) return () => {};
            switch (exchangeDetect(tx)) {
                case 'shapeshift':
                    return (0, _util.openShapeShiftOrderId)(tx.meta.shapeshiftOrderId);
                case 'evercoin':
                    return (0, _util.openEvercoinOrderId)(tx.meta.evercoinOrderId);
                default:
                    return () => {};
            }
        }

        function exchangeDetect(tx) {
            if (tx.meta.shapeshiftOrderId) return 'shapeshift';
            if (tx.meta.evercoinOrderId) return 'evercoin';
            return '';
        }

    }, {
        "394": 394,
        "403": 403,
        "undefined": undefined
    }],
    396: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _util = require(403);
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)((state, props) => ({
            onClick: (0, _util.openBlockExplorerTxId)(props.asset, props.txId)
        }))(TxDetailsTxId);

        function TxDetailsTxId(_ref) {
            let {
                onClick,
                txId
            } = _ref;
            return _react2.default.createElement(_detailsItem2.default, {
                title: 'Transaction ID',
                layout: 'col-4'
            }, _react2.default.createElement('div', {
                className: 'content link',
                onClick: onClick
            }, txId));
        }

    }, {
        "394": 394,
        "403": 403,
        "undefined": undefined
    }],
    397: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Details = exports.Header = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _ui = require(333);
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);
        var _detailsTxid = require(396);
        var _detailsTxid2 = _interopRequireDefault(_detailsTxid);
        var _detailsOrderid = require(395);
        var _detailsOrderid2 = _interopRequireDefault(_detailsOrderid);
        var _historicalPrice = require(399);
        var _historicalPrice2 = _interopRequireDefault(_historicalPrice);
        var _ymd = require(337);
        var _ymd2 = _interopRequireDefault(_ymd);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const Header = exports.Header = (_ref) => {
            let {
                tx,
                onClick,
                tags
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'tx-entry__header transaction-entry--exchange',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'tx-entry__date'
            }, _react2.default.createElement('div', {
                className: 'tx-entry__month'
            }, (0, _moment2.default)(tx.date).format('MMM')), _react2.default.createElement('div', {
                className: 'tx-entry__day'
            }, (0, _moment2.default)(tx.date).format('D'))), _react2.default.createElement('div', {
                className: 'exodus-icon-set tx-entry__icon'
            }, _react2.default.createElement('div', {
                className: 'exodus-icon size24 icon-swap-svg'
            })), _react2.default.createElement('div', {
                className: 'tx-entry__title'
            }, 'Exchanged from ', _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.fromCoin.coin
            }, _assets2.default[tx.fromCoin.coin].properName), _react2.default.createElement('span', {
                className: 'tx-entry__relative-date'
            }, (0, _moment2.default)().diff(tx.date, 'minutes') < 1440 ? _react2.default.createElement('span', null, ' ', (0, _moment2.default)(tx.date).fromNow()) : null)), tags.map((tag, i) => _react2.default.createElement('div', {
                className: 'tx-entry__status',
                key: i
            }, tag)), _react2.default.createElement('div', {
                className: 'tx-entry__amount'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement('span', {
                className: 'tx-entry__sign'
            }, '+'), _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))), _react2.default.createElement('div', {
                className: 'tx-entry__balance'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))));
        };
        const Details = exports.Details = (0, _reactRedux.connect)(state => ({
            getFiatValue: (0, _getValue2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state)
        }))((_ref2) => {
            let {
                getFiatValue,
                marketPricesAvailable,
                asset,
                tx
            } = _ref2;
            return _react2.default.createElement('div', {
                className: 'tx-details'
            }, _react2.default.createElement(_detailsItem2.default, {
                title: 'Date',
                layout: 'col-4',
                name: 'tx-details__date',
                content: (0, _moment2.default)(tx.date).format('dddd, MMM Do YYYY, h:mm:ss A')
            }), _react2.default.createElement('div', {
                className: 'tx-details__item col-4 tx-details__exchange-amounts'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Details'), _react2.default.createElement('div', {
                className: 'content selectable'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'exodus-color-' + tx.fromCoin.coin,
                amount: tx.fromCoin.coinAmount,
                code: true
            }), '\xA0for\xA0', _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'exodus-color-' + tx.coinName,
                amount: tx.coinAmount,
                code: true
            }))), _react2.default.createElement(_detailsTxid2.default, {
                asset: tx.coinName,
                txId: tx.txId
            }), _react2.default.createElement(_detailsOrderid2.default, {
                tx: tx
            }), _react2.default.createElement(_detailsItem2.default, {
                title: 'Now',
                layout: 'col-4',
                name: 'tx-details__current-value'
            }, marketPricesAvailable(tx.coinName) ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatValue(tx.coinAmount.abs()),
                symbol: true
            }) : '--.--'), (0, _ymd2.default)(new Date()) !== (0, _ymd2.default)(tx.date) ? _react2.default.createElement(_historicalPrice2.default, {
                amount: tx.coinAmount,
                date: tx.date
            }) : null, tx.confirmations === 0 && ['bitcoin'].includes(asset.name) && _react2.default.createElement('div', {
                className: 'tx-details__item col-4'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Confirmations'), _react2.default.createElement('div', {
                className: 'content link'
            }, 'Funds unavailable until confirmed')));
        });

    }, {
        "121": 121,
        "128": 128,
        "184": 184,
        "333": 333,
        "337": 337,
        "394": 394,
        "395": 395,
        "396": 396,
        "399": 399,
        "undefined": undefined
    }],
    398: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Details = exports.Header = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _ui = require(333);
        var _electron = require('electron');
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);
        var _detailsTxid = require(396);
        var _detailsTxid2 = _interopRequireDefault(_detailsTxid);
        var _detailsOrderid = require(395);
        var _detailsOrderid2 = _interopRequireDefault(_detailsOrderid);
        var _historicalPrice = require(399);
        var _historicalPrice2 = _interopRequireDefault(_historicalPrice);
        var _ymd = require(337);
        var _ymd2 = _interopRequireDefault(_ymd);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function handleTxOrderIdClick(event, tx) {
            console.log('txId + orderId copied to clipboard');
            _electron.clipboard.writeText(`${tx.txId}: ${tx.meta.shapeshiftOrderId}`);
        }
        const Header = exports.Header = (_ref) => {
            let {
                tx,
                onClick,
                tags
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'tx-entry__header  transaction-entry--sent',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'tx-entry__date'
            }, _react2.default.createElement('div', {
                className: 'tx-entry__month'
            }, (0, _moment2.default)(tx.date).format('MMM')), _react2.default.createElement('div', {
                className: 'tx-entry__day'
            }, (0, _moment2.default)(tx.date).format('D'))), _react2.default.createElement('div', {
                className: 'exodus-icon-set tx-entry__icon'
            }, _react2.default.createElement('div', {
                className: 'exodus-icon size24 icon-swap-svg'
            })), _react2.default.createElement('div', {
                className: 'tx-entry__title'
            }, tx.duration ? 'Exchanged for ' : 'Exchanged for ', _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.toCoin.coin
            }, _assets2.default[tx.toCoin.coin].properName), _react2.default.createElement('span', {
                className: 'tx-entry__relative-date'
            }, (0, _moment2.default)().diff(tx.date, 'minutes') < 1440 ? _react2.default.createElement('span', null, ' ', (0, _moment2.default)(tx.date).fromNow()) : null)), tags.map((tag, i) => _react2.default.createElement('div', {
                className: 'tx-entry__status',
                key: i
            }, tag)), _react2.default.createElement('div', {
                className: 'tx-entry__amount'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement('span', {
                className: 'tx-entry__sign'
            }, '-'), _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))), _react2.default.createElement('div', {
                className: 'tx-entry__balance'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))));
        };
        const Details = exports.Details = (0, _reactRedux.connect)(state => ({
            getFiatValue: (0, _getValue2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state)
        }))((_ref2) => {
            let {
                getFiatValue,
                marketPricesAvailable,
                tx
            } = _ref2;
            return _react2.default.createElement('div', {
                className: 'tx-details'
            }, _react2.default.createElement(_detailsItem2.default, {
                title: 'Date',
                layout: 'col-4',
                name: 'tx-details__date',
                content: (0, _moment2.default)(tx.date).format('dddd, MMM Do YYYY, h:mm:ss A'),
                onClick: event => handleTxOrderIdClick(event, tx)
            }), _react2.default.createElement('div', {
                className: 'tx-details__item col-4 tx-details__exchange-amounts'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Amounts'), _react2.default.createElement('div', {
                className: 'content selectable'
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'exodus-color-' + tx.coinName,
                amount: tx.coinAmount.abs(),
                code: true
            }), '\xA0for\xA0', _react2.default.createElement(_ui.NUCurrencyText, {
                className: 'exodus-color-' + tx.toCoin.coin,
                amount: tx.toCoin.coinAmount,
                code: true
            }))), _react2.default.createElement(_detailsTxid2.default, {
                asset: tx.coinName,
                txId: tx.txId
            }), tx.duration ? _react2.default.createElement(_detailsItem2.default, {
                title: 'Duration',
                layout: 'col-4',
                name: 'tx-details__duration',
                content: tx.duration + ' seconds'
            }) : null, _react2.default.createElement(_detailsOrderid2.default, {
                tx: tx
            }), _react2.default.createElement(_detailsItem2.default, {
                title: 'Now',
                layout: 'col-4',
                name: 'tx-details__current-value'
            }, marketPricesAvailable(tx.coinName) ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatValue(tx.coinAmount.abs()),
                symbol: true
            }) : '--.--'), (0, _ymd2.default)(new Date()) !== (0, _ymd2.default)(tx.date) ? _react2.default.createElement(_historicalPrice2.default, {
                amount: tx.coinAmount,
                date: tx.date
            }) : null);
        });

    }, {
        "121": 121,
        "128": 128,
        "184": 184,
        "333": 333,
        "337": 337,
        "394": 394,
        "395": 395,
        "396": 396,
        "399": 399,
        "undefined": undefined
    }],
    399: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _getHistoricalFiatValue = require(127);
        var _getHistoricalFiatValue2 = _interopRequireDefault(_getHistoricalFiatValue);
        var _ui = require(333);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let HistoricalPrice = (_dec = (0, _reactRedux.connect)(state => ({
            getHistoricalFiatValue: (0, _getHistoricalFiatValue2.default)(state)
        })), _dec(_class = (_temp = _class2 = class HistoricalPrice extends _react2.default.Component {
            render() {
                const {
                    amount,
                    date,
                    getHistoricalFiatValue
                } = this.props;
                const fiatAmount = getHistoricalFiatValue(amount.abs(), date);
                return _react2.default.createElement('div', {
                    className: 'tx-details__item col-4 tx-details__countervalue'
                }, _react2.default.createElement('div', {
                    className: 'title'
                }, (0, _moment2.default)(date).format('MMM Do')), _react2.default.createElement('div', {
                    className: 'content'
                }, fiatAmount ? fiatAmount instanceof Error ? 'Not Available' : _react2.default.createElement(_ui.NUCurrencyText, {
                    amount: fiatAmount,
                    symbol: true,
                    prefix: true
                }) : 'Loading...'));
            }
        }, _class2.propTypes = {
            amount: _propTypes2.default.object.isRequired,
            date: _propTypes2.default.object.isRequired,
            getHistoricalFiatValue: _propTypes2.default.func.isRequired
        }, _temp)) || _class);
        exports.default = HistoricalPrice;

    }, {
        "127": 127,
        "333": 333,
        "undefined": undefined
    }],
    400: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _class, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _exchRecv = require(397);
        var _exchSent = require(398);
        var _recv = require(401);
        var _sent = require(402);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let TransactionEntry = (_temp = _class = class TransactionEntry extends _react2.default.PureComponent {
            constructor(props) {
                super();
                this.state = {
                    detailsVisible: false,
                    asset: props.asset
                };
                this.handleToggleVisible = this.handleToggleVisible.bind(this);
            }
            getChildContext() {
                return {
                    asset: this.state.asset
                };
            }
            handleToggleVisible() {
                this.setState({
                    detailsVisible: !this.state.detailsVisible
                });
            }
            render() {
                const {
                    tx,
                    asset
                } = this.props;
                const {
                    detailsVisible
                } = this.state;
                const tags = [];
                if (['bitcoin', 'ethereum', 'ethereumclassic', 'factom'].includes(asset.name) || asset.isEthereumToken) {
                    if (!tx.sent) {
                        tags.push(_react2.default.createElement(Tag, {
                            text: 'pending',
                            type: 'default',
                            show: tx.confirmations === 0
                        }));
                    }
                }
                if (['ethereum', 'ethereumclassic', 'ripple'].includes(asset.name) || asset.isEthereumToken) {
                    if (tx.error) {
                        tags.push(_react2.default.createElement(Tag, {
                            text: tx.error,
                            type: 'error',
                            show: 'yes'
                        }));
                    }
                }
                const className = tx.exchange ? 'transaction-entry--exchange' : tx.coinAmount.isNegative ? 'transaction-entry--send' : 'transaction-entry--receive';
                const hasMemo = tx.memo ? ' has-description' : '';
                return _react2.default.createElement('div', {
                    onClick: this.props.onClick,
                    key: this.props.id,
                    className: (0, _classnames2.default)('transaction-entry ' + className + hasMemo, {
                        expanded: detailsVisible
                    })
                }, _react2.default.createElement(TxHeader, {
                    tx: tx,
                    tags: tags,
                    onClick: this.handleToggleVisible
                }), detailsVisible ? _react2.default.createElement(TxDetails, {
                    asset: asset,
                    tx: tx
                }) : null);
            }
        }, _class.propTypes = {
            asset: _propTypes2.default.object.isRequired,
            tx: _propTypes2.default.object.isRequired
        }, _class.childContextTypes = {
            asset: _propTypes2.default.object.isRequired
        }, _temp);
        exports.default = TransactionEntry;

        function TxHeader(_ref) {
            let {
                tx,
                tags,
                onClick
            } = _ref;
            return tx.exchange ? tx.sent ? _react2.default.createElement(_exchSent.Header, {
                tx: tx,
                tags: tags,
                onClick: onClick
            }) : _react2.default.createElement(_exchRecv.Header, {
                tx: tx,
                tags: tags,
                onClick: onClick
            }) : tx.sent ? _react2.default.createElement(_sent.Header, {
                tx: tx,
                tags: tags,
                onClick: onClick
            }) : _react2.default.createElement(_recv.Header, {
                tx: tx,
                tags: tags,
                onClick: onClick
            });
        }

        function TxDetails(_ref2) {
            let {
                asset,
                tx
            } = _ref2;
            return tx.exchange ? tx.sent ? _react2.default.createElement(_exchSent.Details, {
                asset: asset,
                tx: tx
            }) : _react2.default.createElement(_exchRecv.Details, {
                asset: asset,
                tx: tx
            }) : tx.sent ? _react2.default.createElement(_sent.Details, {
                asset: asset,
                tx: tx
            }) : _react2.default.createElement(_recv.Details, {
                asset: asset,
                tx: tx
            });
        }

        function Tag(_ref3) {
            let {
                text,
                type,
                show
            } = _ref3;
            return _react2.default.createElement('div', {
                className: `tx-entry__tag ${type} ${show?'show':'hide'}`
            }, _react2.default.createElement('span', null, text));
        }

    }, {
        "397": 397,
        "398": 398,
        "401": 401,
        "402": 402,
        "undefined": undefined
    }],
    401: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Details = exports.Header = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _ui = require(333);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);
        var _historicalPrice = require(399);
        var _historicalPrice2 = _interopRequireDefault(_historicalPrice);
        var _detailsTxid = require(396);
        var _detailsTxid2 = _interopRequireDefault(_detailsTxid);
        var _electron = require('electron');
        var _ymd = require(337);
        var _ymd2 = _interopRequireDefault(_ymd);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const Header = exports.Header = (_ref, _ref2) => {
            let {
                onClick,
                tx,
                tags
            } = _ref;
            let {
                asset
            } = _ref2;
            return _react2.default.createElement('div', {
                className: 'tx-entry__header transaction-entry-summary--receive',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'tx-entry__date'
            }, _react2.default.createElement('div', {
                className: 'tx-entry__month'
            }, (0, _moment2.default)(tx.date).format('MMM')), _react2.default.createElement('div', {
                className: 'tx-entry__day'
            }, (0, _moment2.default)(tx.date).format('D'))), _react2.default.createElement('div', {
                className: 'tx-entry__icon exodus-icon-set'
            }, _react2.default.createElement('div', {
                className: 'exodus-icon size24 icon-receive'
            })), _react2.default.createElement('div', {
                className: 'tx-entry__title'
            }, 'Received', _react2.default.createElement('span', {
                className: 'tx-entry__relative-date'
            }, (0, _moment2.default)().diff(tx.date, 'minutes') < 1440 ? _react2.default.createElement('span', null, ' ', (0, _moment2.default)(tx.date).fromNow()) : null)), tags.map((tag, i) => _react2.default.createElement('div', {
                className: 'tx-entry__status',
                key: i
            }, tag)), _react2.default.createElement('div', {
                className: 'tx-entry__amount'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement('span', {
                className: 'tx-entry__sign'
            }, '+'), _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))));
        };
        Header.contextTypes = {
            asset: _propTypes2.default.object.isRequired
        };
        const Details = exports.Details = (0, _reactRedux.connect)((state, props) => ({
            getFiatValue: (0, _getValue2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state)
        }))((_ref3) => {
            let {
                getFiatValue,
                marketPricesAvailable,
                asset,
                tx
            } = _ref3;
            return _react2.default.createElement('div', {
                className: 'tx-details'
            }, _react2.default.createElement(_detailsItem2.default, {
                title: 'Date',
                layout: 'col-4',
                name: 'tx-details__date',
                content: (0, _moment2.default)(tx.date).format('dddd, MMM Do YYYY, h:mm:ss A')
            }), _react2.default.createElement(_detailsTxid2.default, {
                asset: asset,
                txId: tx.txId
            }), tx.addresses.size > 0 ? _react2.default.createElement(_detailsItem2.default, {
                title: 'To',
                layout: 'col-4',
                name: 'tx-details__to',
                selectable: 'yes',
                content: String(Array.from(tx.addresses)[0])
            }) : null, _react2.default.createElement(_detailsItem2.default, {
                title: 'Now',
                layout: 'col-4',
                name: 'tx-details__current-value'
            }, marketPricesAvailable(tx.coinName) ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatValue(tx.coinAmount.abs()),
                symbol: true
            }) : '--.--'), (0, _ymd2.default)(new Date()) !== (0, _ymd2.default)(tx.date) ? _react2.default.createElement(_historicalPrice2.default, {
                amount: tx.coinAmount,
                date: tx.date
            }) : null, tx.confirmations === 0 && ['bitcoin'].includes(asset.name) && _react2.default.createElement('div', {
                className: 'tx-details__item col-4'
            }, _react2.default.createElement('div', {
                className: 'title'
            }, 'Confirmations'), _react2.default.createElement('div', {
                className: 'content link',
                onClick: () => {
                    _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/why-is-my-transaction-pending-1');
                }
            }, 'Funds unavailable until confirmed')));
        });

    }, {
        "121": 121,
        "128": 128,
        "333": 333,
        "337": 337,
        "394": 394,
        "396": 396,
        "399": 399,
        "undefined": undefined
    }],
    402: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Details = exports.Header = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _ui = require(333);
        var _moment = require('moment');
        var _moment2 = _interopRequireDefault(_moment);
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);
        var _detailsItem = require(394);
        var _detailsItem2 = _interopRequireDefault(_detailsItem);
        var _detailsTxid = require(396);
        var _detailsTxid2 = _interopRequireDefault(_detailsTxid);
        var _historicalPrice = require(399);
        var _historicalPrice2 = _interopRequireDefault(_historicalPrice);
        var _ymd = require(337);
        var _ymd2 = _interopRequireDefault(_ymd);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const Header = exports.Header = (_ref) => {
            let {
                tx,
                onClick,
                tags
            } = _ref;
            return _react2.default.createElement('div', {
                className: 'tx-entry__header  transaction-entry--sent',
                onClick: onClick
            }, _react2.default.createElement('div', {
                className: 'tx-entry__date'
            }, _react2.default.createElement('div', {
                className: 'tx-entry__month'
            }, (0, _moment2.default)(tx.date).format('MMM')), _react2.default.createElement('div', {
                className: 'tx-entry__day'
            }, (0, _moment2.default)(tx.date).format('D'))), _react2.default.createElement('div', {
                className: 'exodus-icon-set tx-entry__icon'
            }, _react2.default.createElement('div', {
                className: 'exodus-icon size24 ' + (tx.token ? 'icon-send-alt' : 'icon-send')
            })), _react2.default.createElement('div', {
                className: 'tx-entry__title'
            }, tx.token && _assets2.default[tx.token] ? _react2.default.createElement('span', null, 'Fee To Send\xA0', _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.token
            }, _assets2.default[tx.token].properName)) : 'Sent', tx.memo ? '…' : null, _react2.default.createElement('span', {
                className: 'tx-entry__relative-date'
            }, (0, _moment2.default)().diff(tx.date, 'minutes') < 1440 ? _react2.default.createElement('span', null, ' ', (0, _moment2.default)(tx.date).fromNow()) : null)), tags.map((tag, i) => _react2.default.createElement('div', {
                className: 'tx-entry__status',
                key: i
            }, tag)), _react2.default.createElement('div', {
                className: 'tx-entry__amount'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement('span', {
                className: 'tx-entry__sign'
            }, !tx.token && !tx.coinAmount.isNegative && !tx.coinAmount.isZero() ? '+' : '-'), _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.token ? tx.feeAmount : tx.coinAmount.abs(),
                code: false
            }))), _react2.default.createElement('div', {
                className: 'tx-entry__balance'
            }, _react2.default.createElement('span', {
                className: 'exodus-color-' + tx.coinName
            }, _react2.default.createElement(_ui.NUCurrencyText, {
                amount: tx.coinAmount.abs(),
                code: false
            }))));
        };
        const Details = exports.Details = (0, _reactRedux.connect)(state => ({
            getFiatValue: (0, _getValue2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state)
        }))((_ref2) => {
            let {
                getFiatValue,
                marketPricesAvailable,
                tx
            } = _ref2;
            return _react2.default.createElement('div', {
                className: 'tx-details'
            }, _react2.default.createElement(_detailsItem2.default, {
                title: 'Date',
                layout: 'col-4',
                name: 'tx-details__date',
                content: (0, _moment2.default)(tx.date).format('dddd, MMM Do YYYY, h:mm:ss A')
            }), tx.to ? _react2.default.createElement(_detailsItem2.default, {
                title: 'To',
                layout: 'col-4',
                name: 'tx-details__to',
                selectable: 'yes',
                content: tx.to
            }) : null, _react2.default.createElement(_detailsTxid2.default, {
                asset: tx.coinName,
                txId: tx.txId
            }), tx.feeAmount ? _react2.default.createElement(_detailsItem2.default, {
                title: 'Fee',
                layout: 'col-4',
                name: 'tx-details__fee',
                content: tx.feeAmount.toString()
            }) : null, _react2.default.createElement(_detailsItem2.default, {
                title: 'Now',
                layout: 'col-4',
                name: 'tx-details__current-value'
            }, marketPricesAvailable(tx.coinName) ? _react2.default.createElement(_ui.NUCurrencyText, {
                amount: getFiatValue(tx.coinAmount.abs()),
                symbol: true
            }) : '--.--'), (0, _ymd2.default)(new Date()) !== (0, _ymd2.default)(tx.date) ? _react2.default.createElement(_historicalPrice2.default, {
                amount: tx.coinAmount,
                date: tx.date
            }) : null, tx.memo ? _react2.default.createElement(_detailsItem2.default, {
                title: 'Description',
                layout: 'col-12',
                name: 'tx-details__memo',
                selectable: 'yes',
                content: tx.memo
            }) : null);
        });

    }, {
        "121": 121,
        "128": 128,
        "184": 184,
        "333": 333,
        "337": 337,
        "394": 394,
        "396": 396,
        "399": 399,
        "undefined": undefined
    }],
    403: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.openBlockExplorerTxId = openBlockExplorerTxId;
        exports.openShapeShiftOrderId = openShapeShiftOrderId;
        exports.openEvercoinOrderId = openEvercoinOrderId;
        var _electron = require('electron');
        var _assets = require(184);
        var _assets2 = _interopRequireDefault(_assets);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function openBlockExplorerTxId(asset, txId) {
            const a = typeof asset === 'string' ? _assets2.default[asset] : asset;
            return () => _electron.shell.openExternal(a.blockExplorer.txUrl(txId));
        }

        function openShapeShiftOrderId(orderId) {
            return () => _electron.shell.openExternal(`https://shapeshift.io/#/status/${orderId}`);
        }

        function openEvercoinOrderId(orderId) {
            return () => _electron.shell.openExternal(`https://evercoin.com/status/${orderId}`);
        }

    }, {
        "184": 184,
        "undefined": undefined
    }],
    404: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _classnames = require('classnames');
        var _classnames2 = _interopRequireDefault(_classnames);
        var _ui = require(333);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        let WalletDetailHeader = class WalletDetailHeader extends _react2.default.PureComponent {
            render() {
                let {
                    coin,
                    coinTotalAmounts,
                    isRefreshing,
                    getFiatValue,
                    onClickSend,
                    onClickReceive,
                    onClickLogo,
                    hasTransactions,
                    assetLoaded,
                    marketPricesLoaded,
                    marketPricesAvailable
                } = this.props;
                return _react2.default.createElement('div', {
                    id: 'wallet-coin-detail-header'
                }, _react2.default.createElement('div', {
                    id: 'wallet-asset-header-logomark-and-status',
                    className: (0, _classnames2.default)({
                        'refreshing': isRefreshing
                    })
                }, _react2.default.createElement('div', {
                    id: 'wallet-asset-header-logomark',
                    onClick: onClickLogo
                }, _react2.default.createElement('div', {
                    id: 'wallet-asset-header-refresh',
                    className: (0, _classnames2.default)('button-color-' + coin.name, {
                        'on': isRefreshing
                    })
                }, _react2.default.createElement('div', {
                    id: 'wallet-asset-header-refresh-icon',
                    className: ''
                })), _react2.default.createElement('div', {
                    id: 'wallet-coin-header-logo',
                    className: (0, _classnames2.default)('exodus-icon large-coin-logo icon-' + coin.name + ' exodus-animate-all', {
                        'on': isRefreshing
                    })
                }))), _react2.default.createElement('div', {
                    id: 'wallet-coin-header-balance',
                    className: 'wallet-balance exodus-color-' + coin.name + ''
                }, assetLoaded ? _react2.default.createElement(_ui.NUCurrencyText, {
                    amount: coinTotalAmounts.to(coin.displayUnit),
                    code: false,
                    sigfigs: 8
                }) : _react2.default.createElement('span', null, '--.--'), _react2.default.createElement('span', {
                    className: 'display-unit'
                }, assetLoaded && coin.displayUnit)), _react2.default.createElement('div', {
                    id: 'wallet-coin-header-balance-local',
                    className: 'wallet-balance-in-local-currency'
                }, assetLoaded && marketPricesLoaded && marketPricesAvailable(coin.name) ? _react2.default.createElement(_ui.NUCurrencyText, {
                    amount: getFiatValue(coinTotalAmounts),
                    symbol: true
                }) : _react2.default.createElement('span', null, '--.--')), _react2.default.createElement('div', {
                    className: 'button-row'
                }, _react2.default.createElement('div', {
                    className: 'exodus-button exodus-button-' + coin.name + ' primary-button button-row-start exodus-animate-all',
                    onClick: onClickSend
                }, 'Send'), _react2.default.createElement('div', {
                    className: 'exodus-button exodus-button-' + coin.name + ' primary-button button-row-end exodus-animate-all',
                    onClick: onClickReceive
                }, 'Receive')), hasTransactions ? _react2.default.createElement('div', {
                    className: 'tx-header'
                }, _react2.default.createElement('div', {
                    className: 'tx-header__item date'
                }, 'Date'), _react2.default.createElement('div', {
                    className: 'tx-header__item desc'
                }, 'Description'), _react2.default.createElement('div', {
                    className: 'tx-header__item amount'
                }, 'Amount'), _react2.default.createElement('div', {
                    className: 'tx-header__item balance'
                }, 'Balance')) : '');
            }
        };
        exports.default = WalletDetailHeader;

    }, {
        "333": 333,
        "undefined": undefined
    }],
    405: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _dec, _class, _class2, _temp;
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = require('react-redux');
        var _coinTotalAmounts = require(102);
        var _coinTotalAmounts2 = _interopRequireDefault(_coinTotalAmounts);
        var _ethereumTokensEnoughFuel = require(108);
        var _ethereumTokensEnoughFuel2 = _interopRequireDefault(_ethereumTokensEnoughFuel);
        var _getValue = require(121);
        var _getValue2 = _interopRequireDefault(_getValue);
        var _pricesLoaded = require(129);
        var _pricesLoaded2 = _interopRequireDefault(_pricesLoaded);
        var _pricesAvailable = require(128);
        var _pricesAvailable2 = _interopRequireDefault(_pricesAvailable);
        var _loaded = require(98);
        var _loaded2 = _interopRequireDefault(_loaded);
        var _btcDisabled = require(97);
        var _btcDisabled2 = _interopRequireDefault(_btcDisabled);
        var _flux = require(257);
        var _receiveModal = require(376);
        var _receiveModal2 = _interopRequireDefault(_receiveModal);
        var _sendModal = require(390);
        var _sendModal2 = _interopRequireDefault(_sendModal);
        var _ui = require(333);
        var _electron = require('electron');
        var _swal = require(306);
        var _swal2 = _interopRequireDefault(_swal);
        var _index = require(400);
        var _index2 = _interopRequireDefault(_index);
        var _walletDetailHeader = require(404);
        var _walletDetailHeader2 = _interopRequireDefault(_walletDetailHeader);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const emptyTxs = [];
        let WalletDetail = (_dec = (0, _reactRedux.connect)((state, props) => ({
            coinTotalAmounts: (0, _coinTotalAmounts2.default)(state)[props.coin.name],
            ethereumTokensEnoughFuel: (0, _ethereumTokensEnoughFuel2.default)(state),
            getFiatValue: (0, _getValue2.default)(state),
            marketPricesLoaded: (0, _pricesLoaded2.default)(state),
            marketPricesAvailable: (0, _pricesAvailable2.default)(state),
            assetsLoaded: (0, _loaded2.default)(state),
            btcDisabled: (0, _btcDisabled2.default)(state),
            txLog: state.txLog[props.coin.name],
            actions: _flux.actions,
            isRefreshing: state.assetsRefresh[props.coin.name],
            refreshError: state.assetsRefresh.error
        })), _dec(_class = (_temp = _class2 = class WalletDetail extends _react2.default.PureComponent {
            constructor(props) {
                super(props);
                this.handleClickReceive = () => {
                    const openModal = () => this.setState({
                        receiveModalVisible: true
                    });
                    openModal();
                };
                this.handleReceiveClose = () => this.setState({
                    receiveModalVisible: false
                });
                this.handleSendClose = () => this.setState({
                    sendModalVisible: false
                });
                this.handleClickSend = () => {
                    if (this.props.coin.name === 'bitcoin' && this.props.btcDisabled && !global.BTC_ENABLED) {
                        return _swal2.default.error({
                            title: this.props.btcDisabled.title || 'Error',
                            text: this.props.btcDisabled.message
                        });
                    }
                    if (this.props.coin.isEthereumToken && !this.props.ethereumTokensEnoughFuel) {
                        return (0, _swal2.default)({
                            type: 'warning',
                            title: 'Deposit Ethereum',
                            text: 'You need more Ethereum (ETH) to send this asset. Learn how to fix this by clicking "Learn More".',
                            showCancelButton: true,
                            cancelButtonText: 'Learn More',
                            closeOnConfirm: true,
                            closeOnCancel: true
                        }, function(isConfirm) {
                            if (isConfirm) return;
                            _electron.shell.openExternal('http://support.exodus.io/knowledge_base/topics/how-do-i-send-or-exchange-an-ethereum-powered-asset');
                        });
                    }
                    this.setState({
                        sendModalVisible: true
                    });
                };
                this.state = {
                    receiveModalVisible: false,
                    sendModalVisible: false,
                    refreshIcon: false
                };
                this.mouseEnterListener = () => {
                    document.getElementById('wallet-coin-header-logo').classList.add('on');
                    document.getElementById('wallet-asset-header-refresh').classList.add('on');
                };
                this.mouseLeaveListener = () => {
                    if (this.props.isRefreshing) return;
                    document.getElementById('wallet-coin-header-logo').classList.remove('on');
                    document.getElementById('wallet-asset-header-refresh').classList.remove('on');
                };
                this.handleClickLogo = this.handleClickLogo.bind(this);
                document.addEventListener('keydown', event => {
                    if (event.key === 'Escape') {
                        this.handleReceiveClose();
                        this.handleSendClose();
                    }
                });
            }
            componentDidUpdate() {
                if (this.props.refreshError) {
                    _flux.actions.dialog.error(this.props.refreshError.message, {
                        title: 'Rescan Error'
                    });
                    _flux.actions.assetsRefresh.refreshAckError();
                }
            }
            componentDidMount() {
                document.getElementById('wallet-asset-header-logomark').addEventListener('mouseenter', this.mouseEnterListener);
                document.getElementById('wallet-asset-header-logomark').addEventListener('mouseleave', this.mouseLeaveListener);
                this.loadTransactions(this.props.txLog);
            }
            componentWillReceiveProps(nextProps) {
                if (!nextProps.isRefreshing && this.props.isRefreshing) setTimeout(this.mouseLeaveListener.bind(this), 1500);
                if (this.props.txLog !== nextProps.txLog) {
                    this.loadTransactions(nextProps.txLog, nextProps.coin);
                }
            }
            componentWillUnmount() {
                document.getElementById('wallet-asset-header-logomark').removeEventListener('mouseenter', this.mouseEnterListener);
                document.getElementById('wallet-asset-header-logomark').removeEventListener('mouseleave', this.mouseLeaveListener);
            }
            loadTransactions(txLog, coin) {
                coin = coin || this.props.coin;
                let txs = Array.from(txLog || emptyTxs).map((item, index) => {
                    return {
                        tx: item,
                        index: index,
                        asset: coin,
                        id: item.id + '-' + index
                    };
                }).sort((a, b) => b.tx.date - a.tx.date);
                this.setState({
                    sortedTransactions: txs
                });
            }
            handleClickLogo() {
                const {
                    name,
                    properName
                } = this.props.coin;
                if (this.props.isRefreshing) {
                    return _swal2.default.warn({
                        title: `${properName} is currently being refreshed`
                    });
                }
                _swal2.default.confirm({
                    title: 'Rescan blockchain?',
                    text: `Are you sure you want to rescan the ${properName} blockchain for your funds? This may take <span style="font-style: italic; color: red;">5 to 10 minutes</span>.`,
                    confirmButtonText: 'Rescan',
                    html: true
                }, confirmRescan => {
                    if (!confirmRescan) return;
                    window.requestIdleCallback(() => _flux.actions.assetsRefresh.refresh(name));
                });
            }
            onSelectTxAtIndex(txData, rowIndex) {}
            render() {
                let {
                    coin
                } = this.props;
                let assetLoaded = this.props.assetsLoaded[coin.name];
                let txs = this.state.sortedTransactions;
                return _react2.default.createElement('div', {
                    id: 'wallet-coin-detail'
                }, this.state.sendModalVisible ? _react2.default.createElement(_sendModal2.default, {
                    coin: coin,
                    onRequestClose: this.handleSendClose
                }) : null, this.state.receiveModalVisible ? _react2.default.createElement(_receiveModal2.default, {
                    coin: coin,
                    onRequestClose: this.handleReceiveClose
                }) : null, _react2.default.createElement(_ui.CollectionView, {
                    id: 'exodus-wallet-transaction-list',
                    renderedHeader: _react2.default.createElement(_walletDetailHeader2.default, _extends({}, this.props, {
                        onClickLogo: this.handleClickLogo,
                        onClickSend: this.handleClickSend,
                        onClickReceive: this.handleClickReceive,
                        hasTransactions: txs && txs.length,
                        assetLoaded: assetLoaded
                    })),
                    className: 'transaction-view',
                    emptyText: assetLoaded ? `No ${coin.properName} Transactions` : 'Loading...',
                    pageSize: 50,
                    hasScrolledThreshold: 200,
                    loadMoreThreshold: 500,
                    items: txs,
                    itemRenderer: _index2.default,
                    onSelectItem: this.onSelectTxAtIndex
                }));
            }
        }, _class2.propTypes = {
            actions: _propTypes2.default.object,
            coin: _propTypes2.default.object.isRequired,
            coinTotalAmounts: _propTypes2.default.object.isRequired,
            ethereumTokensEnoughFuel: _propTypes2.default.bool.isRequired,
            getFiatValue: _propTypes2.default.func.isRequired,
            txLog: _propTypes2.default.object.isRequired,
            isRefreshing: _propTypes2.default.bool.isRequired
        }, _temp)) || _class);
        exports.default = WalletDetail;

    }, {
        "102": 102,
        "108": 108,
        "121": 121,
        "128": 128,
        "129": 129,
        "257": 257,
        "306": 306,
        "333": 333,
        "376": 376,
        "390": 390,
        "400": 400,
        "404": 404,
        "97": 97,
        "98": 98,
        "undefined": undefined
    }],
    406: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = require('react-redux');
        var _available = require(96);
        var _available2 = _interopRequireDefault(_available);
        var _addButton = require(95);
        var _addButton2 = _interopRequireDefault(_addButton);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        exports.default = (0, _reactRedux.connect)(state => ({
            availableAssets: (0, _available2.default)(state),
            assetsAddButton: (0, _addButton2.default)(state)
        }))((_ref) => {
            let {
                activeCoin,
                onClick,
                availableAssets,
                assetsAddButton
            } = _ref;
            return _react2.default.createElement('nav', {
                id: 'wallet-coin-list',
                className: 'menu menu--secondary' + (activeCoin ? ' exodus-border-color-' + activeCoin.name : '')
            }, _react2.default.createElement('ul', {
                className: 'menu__list'
            }, Object.values(availableAssets).map(asset => _react2.default.createElement('li', {
                className: activeCoin === asset ? 'menu__item menu__item--current' : 'menu__item',
                key: asset.name,
                onClick: () => onClick(asset)
            }, _react2.default.createElement('a', {
                className: activeCoin === asset ? 'menu__link exodus-color-' + activeCoin.name : 'menu__link'
            }, asset.properName))), _react2.default.createElement('li', {
                id: 'add_asset',
                className: 'menu__item',
                key: 'add-assets',
                onClick: global.handleClickWalletAddAssets
            }, _react2.default.createElement('a', {
                className: 'menu__link'
            }, assetsAddButton ? '+ Add More' : '- Remove'))));
        });

    }, {
        "95": 95,
        "96": 96,
        "undefined": undefined
    }],
    407: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const accountStateMutations = exports.accountStateMutations = function(coinName) {
            let accountName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'account0';
            return `coins.${coinName}.${accountName}.state.mutations`;
        };
        const accountStateChain = exports.accountStateChain = function(coinName) {
            let accountName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'account0';
            return `coins.${coinName}.${accountName}.state.chain`;
        };
        const accountTxs = exports.accountTxs = function(coinName) {
            let accountName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'account0';
            return `coins.${coinName}.${accountName}.txs`;
        };
        const accountOrders = exports.accountOrders = accountName => `orders.${accountName}`;
        const backup = exports.backup = () => 'backup';
        const twoOfTwo = exports.twoOfTwo = label => `twoOfTwo.${label}`;

    }, {}],
    408: [function(require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WALLET_DIR = exports.PASSPHRASE_FILE = exports.SEED_FILE = exports.INFO_FILE = undefined;
        exports.walletDirFromExodusDir = walletDirFromExodusDir;
        var _fsExtra = require('fs-extra');
        var _fsExtra2 = _interopRequireDefault(_fsExtra);
        var _path = require('path');
        var _path2 = _interopRequireDefault(_path);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _asyncToGenerator(fn) {
            return function() {
                var gen = fn.apply(this, arguments);
                return new Promise(function(resolve, reject) {
                    function step(key, arg) {
                        try {
                            var info = gen[key](arg);
                            var value = info.value;
                        } catch (error) {
                            reject(error);
                            return;
                        }
                        if (info.done) {
                            resolve(value);
                        } else {
                            return Promise.resolve(value).then(function(value) {
                                step("next", value);
                            }, function(err) {
                                step("throw", err);
                            });
                        }
                    }
                    return step("next");
                });
            };
        }
        const INFO_FILE = exports.INFO_FILE = 'info.seco';
        const SEED_FILE = exports.SEED_FILE = 'seed.seco';
        const PASSPHRASE_FILE = exports.PASSPHRASE_FILE = 'passphrase.json';
        const WALLET_DIR = exports.WALLET_DIR = 'exodus.wallet';
        exports.default = walletDir => ({
            get infoFile() {
                return _path2.default.join(walletDir, INFO_FILE);
            },
            infoFileExists: (() => {
                var _ref = _asyncToGenerator(function*() {
                    return _fsExtra2.default.pathExists(this.infoFile);
                });
                return function infoFileExists() {
                    return _ref.apply(this, arguments);
                };
            })(),
            get passphraseFile() {
                return _path2.default.join(walletDir, PASSPHRASE_FILE);
            },
            passphraseFileExists: (() => {
                var _ref2 = _asyncToGenerator(function*() {
                    return _fsExtra2.default.pathExists(this.passphraseFile);
                });
                return function passphraseFileExists() {
                    return _ref2.apply(this, arguments);
                };
            })(),
            get seedFile() {
                return _path2.default.join(walletDir, SEED_FILE);
            },
            seedFileExists: (() => {
                var _ref3 = _asyncToGenerator(function*() {
                    return _fsExtra2.default.pathExists(this.seedFile);
                });
                return function seedFileExists() {
                    return _ref3.apply(this, arguments);
                };
            })(),
            get walletDir() {
                return walletDir;
            }
        });

        function walletDirFromExodusDir(exodusDir) {
            return _path2.default.join(exodusDir, WALLET_DIR);
        }

    }, {
        "undefined": undefined
    }],
    409: [function(require, module, exports) {
        module.exports = {
            "name": "exodus",
            "productName": "Exodus",
            "version": "1.41.0",
            "description": "Secure, manage, and trade blockchain assets."
        }
    }, {}]
}, {}, [342]);